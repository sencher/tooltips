From: <Saved by Blink>
Snapshot-Content-Location: https://greensock.com/asdocs/
Subject: TimelineLite - GreenSock Documentation
Date: Mon, 1 Mar 2021 20:44:49 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----"


------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/html
Content-ID: <frame-DA76C2611254C00D6CABFF9659EF2FE2@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.o=
rg/TR/html4/frameset.dtd"><html><head><meta http-equiv=3D"Content-Type" con=
tent=3D"text/html; charset=3DUTF-8">

   =20
<title>TimelineLite - GreenSock Documentation</title>
   =20


</head>

<frameset cols=3D"210,*" border=3D"2" bordercolor=3D"#AAAAAA" framespacing=
=3D"0" class=3D"vsc-initialized">
      =20
<frame src=3D"cid:frame-6AE12EBDFE6A8350249B7E28D19C4064@mhtml.blink" name=
=3D"packageFrame" scrolling=3D"no">
      =20
<frameset rows=3D"80,*" border=3D"0" bordercolor=3D"#AAAAAA">
       	=09
<frame src=3D"cid:frame-38C6058C90D607FBF27EBC678735689E@mhtml.blink" name=
=3D"titlebar" scrolling=3D"no" frameborder=3D"0">
       	=09
<frame src=3D"cid:frame-19B0504533C0959208C8006B3F9A4620@mhtml.blink" name=
=3D"classFrame" frameborder=3D"0">
    =09
</frameset>
   =20
<noframes>
=09
<body>
       =20
<h2>Frame Alert</h2>
       =20
<p>
        This document is designed to be viewed using the frames feature. If=
 you see this message, you are using a non-frame-capable web client.
        <br>
        Link to <a href=3D"package-summary.html">Non-frame version.</a>
       =20
</p>
       =20
</body>
   =20
</noframes>

</frameset>
<!-- -->


</html>
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/html
Content-ID: <frame-6AE12EBDFE6A8350249B7E28D19C4064@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/package-frame.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.o=
rg/TR/html4/frameset.dtd"><html><head><meta http-equiv=3D"Content-Type" con=
tent=3D"text/html; charset=3DUTF-8">

   =20
<title>GreenSock Tweening Platform Language Reference</title>

</head>

<frameset rows=3D"40%,60%" border=3D"2" framespacing=3D"1" bordercolor=3D"#=
AAAAAA" class=3D"vsc-initialized">
   =20
<frame src=3D"cid:frame-0D8FE997E0DC7555A36E072C5878B4E5@mhtml.blink" name=
=3D"packageListFrame">
   =20
<frame src=3D"cid:frame-456D421651605C2A3401E63107EB6DA9@mhtml.blink" name=
=3D"classListFrame">
   =20
<noframes>
       =20
<body>
           =20
<h2>Frame Alert</h2>
           =20
<p>This document is designed to be viewed using the frames feature. If you =
see this message, you are using a non-frame-capable web client.
                <br>
                Link to<a href=3D"package-summary.html">Non-frame version.<=
/a>
           =20
</p>
       =20
</body>
   =20
</noframes>

</frameset>
<!-- -->


</html>
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/html
Content-ID: <frame-38C6058C90D607FBF27EBC678735689E@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/title-bar.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><!=
-- saved from url=3D(0014)about:internet --><html><head><meta http-equiv=3D=
"Content-Type" content=3D"text/html; charset=3DUTF-8">
		<title>GreenSock ActionScript API Docs</title><link rel=3D"stylesheet" hr=
ef=3D"https://greensock.com/asdocs/style.css" type=3D"text/css" media=3D"sc=
reen"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/print.c=
ss" type=3D"text/css" media=3D"print"><link rel=3D"stylesheet" href=3D"http=
s://greensock.com/asdocs/override.css" type=3D"text/css">
	=09
	=09
	=09
	</head>
	<body class=3D"vsc-initialized">
		<a name=3D"top"></a>
	=09
		<div style=3D"width:300px; height:60px;position:absolute;background-image=
:url('images/02geek-as3-js.gif'); left:240px; top:7px; border:1px solid #77=
7;">
			<a href=3D"http://02skills.com/course/javascript-animation-bundle/?affco=
de=3Dic6i&amp;couponCode=3DBEST" target=3D"_blank"><div style=3D"width:174p=
x;height:61px;position:relative;left:0px;top:0px;"></div></a>
			<a href=3D"http://02skills.com/course/gsap-flash-animation/?affcode=3Dic=
6i&amp;couponCode=3DBEST" target=3D"_blank"><div style=3D"width:33px;height=
:61px;position:relative;left:174px;top:-61px;"></div></a>
			<a name=3D"02geek" href=3D"http://02skills.com/course/animation-bundle/?=
affcode=3Dic6i&amp;couponCode=3DBEST" target=3D"_blank">
					<div style=3D"width:93px;height:61px;position:relative;left:207px;top:=
-122px;"></div>
			</a>
		</div>
		<table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
		  <tbody><tr>
			<td>
			  <table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
				<tbody><tr>
				  <td class=3D"titleTableTitle" align=3D"left">GreenSock ActionScript A=
PI Docs</td><td class=3D"titleTableSearch" align=3D"center">&nbsp;</td>
				  <td class=3D"titleTableTopNav" align=3D"right">
					<a target=3D"classFrame" href=3D"https://greensock.com/asdocs/package-=
summary.html"> All Packages </a>&nbsp;|&nbsp;<a target=3D"classFrame" href=
=3D"https://greensock.com/asdocs/class-summary.html"> All Classes </a>&nbsp=
;|&nbsp;<a target=3D"classFrame" href=3D"https://greensock.com/asdocs/all-i=
ndex-A.html"> Index </a>&nbsp;|&nbsp;<a href=3D"https://greensock.com/asdoc=
s/title-bar.html"> No Frames </a>
				  </td>
				</tr>
			  </tbody></table>
			</td>
			<td class=3D"titleTableLogo" align=3D"right" rowspan=3D"3"><img src=3D"h=
ttps://greensock.com/asdocs/images/logo.jpg" class=3D"logoImage" title=3D"A=
dobe Logo" alt=3D"Adobe Logo"></td>
		  </tr>
		  <tr>
			<td>
			  <table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
				<tbody><tr class=3D"titleTableRow2">
				  <td class=3D"titleTableSubTitle" id=3D"subTitle" align=3D"left" colsp=
an=3D"2">TimelineLite</td>
				  <td class=3D"titleTableSubNav" id=3D"subNav" align=3D"right">
					<a id=3D"propertiesLink" href=3D"https://greensock.com/asdocs/title-ba=
r.html#top" style=3D"display: inline;"> Properties </a><span id=3D"properti=
esBar" style=3D"display: inline;"> | </span><a id=3D"packagePropertiesLink"=
 href=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display:=
none"> Properties </a><span id=3D"packagePropertiesBar" style=3D"display:no=
ne"> | </span><a id=3D"constructorLink" href=3D"https://greensock.com/asdoc=
s/title-bar.html#top" style=3D"display:none"> Constructor </a><span id=3D"c=
onstructorBar" style=3D"display:none"> | </span><a id=3D"methodsLink" href=
=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display: inli=
ne;"> Methods </a><span id=3D"methodsBar" style=3D"display: none;"> | </spa=
n><a id=3D"packageFunctionsLink" href=3D"https://greensock.com/asdocs/title=
-bar.html#top" style=3D"display:none"> Functions </a><span id=3D"packageFun=
ctionsBar" style=3D"display:none"> | </span><a id=3D"eventsLink" href=3D"ht=
tps://greensock.com/asdocs/title-bar.html#top" style=3D"display:none"> Even=
ts </a><span id=3D"eventsBar" style=3D"display:none"> | </span><a id=3D"sty=
lesLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"=
display:none"> Styles </a><span id=3D"stylesBar" style=3D"display:none"> | =
</span><a id=3D"SkinPartLink" href=3D"https://greensock.com/asdocs/title-ba=
r.html#top" style=3D"display:none"> Skin Parts </a><span id=3D"SkinPartBar"=
 style=3D"display:none"> | </span><a id=3D"SkinStateLink" href=3D"https://g=
reensock.com/asdocs/title-bar.html#top" style=3D"display:none"> Skin States=
 </a><span id=3D"SkinStateBar" style=3D"display:none"> | </span><a id=3D"ef=
fectsLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" style=
=3D"display:none"> Effects </a><span id=3D"effectsBar" style=3D"display:non=
e"> | </span><a id=3D"constantsLink" href=3D"https://greensock.com/asdocs/t=
itle-bar.html#top" style=3D"display:none"> Constants </a><span id=3D"consta=
ntsBar" style=3D"display:none"> | </span><a id=3D"packageConstantsLink" hre=
f=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display:none=
"> Constants </a><span id=3D"packageConstantsBar" style=3D"display:none"> |=
 </span><a id=3D"interfacesLink" href=3D"https://greensock.com/asdocs/title=
-bar.html#top" style=3D"display:none"> Interfaces </a><span id=3D"interface=
sBar" style=3D"display:none"> | </span><a id=3D"classesLink" href=3D"https:=
//greensock.com/asdocs/title-bar.html#top" style=3D"display: none;"> Classe=
s </a><span id=3D"classesBar" style=3D"display:none"> | </span><a id=3D"pac=
kageUseLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" style=
=3D"display:none">Use</a><span id=3D"packageUseBar" style=3D"display:none">=
 | </span><a id=3D"examplesLink" href=3D"https://greensock.com/asdocs/title=
-bar.html#top" style=3D"display: none;"> Examples </a>
				  </td>
				</tr>
				<tr class=3D"titleTableRow3">
				  <td colspan=3D"3">&nbsp;</td>
				</tr>
			  </tbody></table>
			</td>
		  </tr>
		</tbody></table>
=09
<!--<br/>Thu Mar 28 2013, 04:38 PM -05:00  --></body></html>
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/style.css

@charset "utf-8";

.titleTable { width: 100%; }

.titleTableTitle { white-space: nowrap; padding-left: 15px; padding-right: =
5px; font-size: 13px; height: 44px; background-image: url("images/titleTabl=
eTop.jpg"); background-repeat: repeat-x; }

.titleTableSearch { white-space: nowrap; background-image: url("images/titl=
eTableTop.jpg"); background-repeat: repeat-x; padding-right: 10px; }

.searchForm { margin-top: 0px; margin-bottom: 0px; }

.titleTableTopNav { font-size: 12px; background-image: url("images/titleTab=
leTop.jpg"); background-repeat: repeat-x; }

.titleTableLogo { width: 76px; height: 80px; vertical-align: top; }

.titleTableRow2 { color: rgb(0, 0, 0); height: 31px; background-image: url(=
"images/titleTableMiddle.jpg"); background-repeat: repeat-x; }

.titleTableSubTitle { font-size: 20px; padding-left: 15px; padding-right: 5=
px; }

.titleTableSubNav { font-size: 12px; }

.titleTableRow3 { height: 5px; background-image: url("images/titleTableBott=
om.jpg"); background-repeat: repeat-x; }

.logoImage { width: 76px; height: 80px; }

.classHeaderTable { margin-top: 20px; }

.classHeaderTable td { vertical-align: top; padding-bottom: 4px; }

.classHeaderTableLabel { font-weight: bold; padding-right: 15px; }

.classSignature { text-indent: -20px; padding-left: 20px; }

.inheritanceList { text-indent: -20px; padding-left: 20px; }

.inheritArrow { width: 15px; height: 9px; }

.mxmlSyntax { margin-bottom: -13px; }

.collapsedImage { width: 9px; height: 9px; border: 0px; }

.expandedImage { width: 9px; height: 9px; border: 0px; }

.classFrameContent { margin: 10px 5px 10px 10px; }

.classFrameContent td { white-space: nowrap; padding-right: 5px; }

.eclipseBody { display: none; }

img { border: 0px; }

.annotation { font-size: 20px; margin-top: 20px; }

.label { color: rgb(68, 68, 68); font-weight: bold; }

strong { color: rgb(68, 68, 68); }

.summarySection { margin-left: 20px; margin-right: 10px; }

.summaryTableTitle { font-weight: bold; font-size: 18px; padding-top: 20px;=
 padding-bottom: 5px; }

* .summaryTable { margin-top: 10px; border: 1px solid rgb(153, 153, 153); w=
idth: 100%; margin-bottom: 20px; }

html > body .summaryTable { margin-top: 10px; border: 1px solid rgb(153, 15=
3, 153); width: 100%; margin-bottom: 20px; margin-right: 10px; }

.summaryTable th { color: rgb(255, 255, 255); background-color: rgb(98, 124=
, 157); white-space: nowrap; }

.summaryTable td { border-top: 1px solid rgb(153, 153, 153); vertical-align=
: top; }

.summaryTablePaddingCol { width: 5px; }

.summaryTableInheritanceCol { width: 14px; }

.summaryTableSignatureCol { padding-right: 10px; }

.summaryTableOperatorCol { padding-left: 10px; padding-right: 10px; font-we=
ight: bold; }

.summaryTableStatementCol { padding-left: 10px; padding-right: 10px; font-w=
eight: bold; white-space: nowrap; }

.summarySignature { text-indent: -20px; padding-left: 20px; }

.summaryTableOwnerCol { padding-right: 10px; width: 10px; }

.summaryTableCol, .summaryTableSecondCol { }

.signatureLink { font-weight: bold; }

.summaryTableDescription { color: rgb(51, 51, 51); }

.summaryTableLastCol { padding-right: 10px; }

.inheritedSummaryImage { width: 14px; height: 14px; }

.showHideLink { }

.showHideLinkImage { width: 9px; height: 9px; }

.hideInheritedConstant { display: none; }

.showInheritedConstant { display: inline; }

.hideInheritedProtectedConstant { display: none; }

.showInheritedProtectedConstant { display: inline; }

.hideInheritedProperty { display: none; }

.showInheritedProperty { display: inline; }

.hideInheritedProtectedProperty { display: none; }

.showInheritedProtectedProperty { display: inline; }

.hideInheritedMethod { display: none; }

.showInheritedMethod { display: inline; }

.hideInheritedProtectedMethod { display: none; }

.showInheritedProtectedMethod { display: inline; }

.hideInheritedEvent { display: none; }

.showInheritedEvent { display: inline; }

.hideInheritedStyle { display: none; }

.showInheritedStyle { display: inline; }

.hideInheritedEffect { display: none; }

.showInheritedEffect { display: inline; }

.detailSectionHeader { color: rgb(67, 67, 67); font-size: 18px; padding-lef=
t: 10px; padding-top: 4px; padding-bottom: 4px; margin-top: 40px; margin-bo=
ttom: 3px; background-image: url("images/detailSectionHeader.jpg"); backgro=
und-repeat: repeat-x; }

.detailHeader { margin-left: 20px; margin-top: 10px; margin-bottom: 3px; }

.detailHeaderName { font-weight: bold; font-size: 16px; vertical-align: bas=
eline; white-space: nowrap; }

.detailHeaderType { font-size: 12px; vertical-align: baseline; padding-righ=
t: 10px; padding-left: 7px; white-space: nowrap; }

.detailHeaderParens { font-size: 14px; font-weight: bold; padding-left: 1px=
; padding-bottom: 2px; }

.detailHeaderRule { background-image: url("images/detailHeaderRule.jpg"); b=
ackground-repeat: repeat-x; width: 100%; background-position: 50% center; }

.detailBody { margin-left: 20px; margin-right: 15px; margin-bottom: 20px; }

.exampleHeader { background-color: rgb(200, 209, 223); padding-left: 10px; =
padding-top: 3px; padding-bottom: 3px; }

.seeAlso { margin-top: -13px; padding-left: 20px; }

body { font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; color: r=
gb(0, 0, 0); background-color: rgb(255, 255, 255); margin: 0px; padding: 0p=
x; }

body, td, th { font-size: 13px; }

.MainContent { margin-left: 20px; margin-right: 10px; margin-bottom: 10px; =
}

code { font-family: "Lucida Console", "Courier New", Courier, monospace; fo=
nt-size: 12px; }

pre { font-family: "Lucida Console", "Courier New", Courier, monospace; fon=
t-size: 12px; }

th { text-align: left; font-weight: bold; vertical-align: bottom; }

table { background-color: white; }

table.withBorder { border-color: rgb(187, 187, 187); border-width: 1px; bor=
der-style: solid; }

.innertable { border-collapse: collapse; }

.innertable th { border: 1px solid rgb(0, 0, 0); background: rgb(221, 221, =
221); padding: 2px 3px; }

.innertable td { border: 1px solid rgb(0, 0, 0); padding: 2px 3px; }

.paramSpacer { font-size: 5px; }

.row0 { background-color: rgb(242, 242, 242); }

.row1 { background-color: rgb(255, 255, 255); }

.prow0 { background-color: rgb(242, 242, 242); }

.prow1 { background-color: rgb(255, 255, 255); }

.idxrow { padding-top: 5px; }

.SummaryTableHeader { background-color: rgb(204, 204, 204); }

.InheritedTableHeader { background-color: rgb(238, 238, 238); }

.PackageTableHeader { background-color: rgb(238, 238, 238); }

a:link { color: rgb(0, 0, 204); text-decoration: none; }

a:visited { color: rgb(0, 0, 204); text-decoration: none; }

a:hover { text-decoration: underline; color: rgb(0, 0, 204); }

a:active { text-decoration: none; color: rgb(204, 0, 0); }

h1, h2, h3, h4, h5, h6 { font-family: "Trebuchet MS", "Bitstream Vera Sans"=
, verdana, lucida, arial, helvetica, sans-serif; font-weight: bold; margin-=
top: 3px; margin-bottom: 3px; letter-spacing: 1px; width: 90%; }

h1 { font-size: 18px; }

h2 { font-size: 16px; }

h3 { font-size: 14px; }

h4 { font-size: 12px; color: rgb(102, 102, 102); }

h5 { font-size: 11px; }

.copyright { margin-top: 30px; color: rgb(119, 119, 119); font-size: 10px; =
padding-bottom: 5px; }

.inheritanceList { line-height: 19px; }

.private { color: rgb(153, 153, 153); }

.flashonly { color: rgb(0, 0, 0); }

.flexonly { display: none; color: rgb(0, 0, 0); }

.hide { display: none; }

.feedbackLink { }

* html .listing { width: 93%; padding: 5px 5px 5px 6%; overflow-x: auto; ba=
ckground-color: rgb(242, 242, 242); margin-bottom: 10px; margin-top: 10px; =
font-family: "Lucida Console", "Courier New", Courier, monospace; font-size=
: 12px; }

html > body .listing pre { overflow: auto; padding: 5px 5px 5px 40px; backg=
round-color: rgb(242, 242, 242); margin-top: 10px; margin-bottom: 10px; fon=
t-family: "Lucida Console", "Courier New", Courier, monospace; font-size: 1=
2px; }

.listingIcons { padding: 0px; margin-top: 10px; height: 15px; }

.pageTop { height: 10px; }

.hideInheritedSkinState { display: none; }

.showInheritedSkinState { display: inline; }

.hideInheritedSkinPart { display: none; }

.showInheritedSkinPart { display: inline; }
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableTop.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAsAAEDAREA
AhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABAcJ/8QAHRAAAgEEAwAAAAAAAAAAAAAAABMFAQMS
F1WS0//EABgBAQEAAwAAAAAAAAAAAAAAAAEAAgQF/8QAFhEBAQEAAAAAAAAAAAAAAAAAABES/9oA
DAMBAAIRAxEAPwDRnCh0mhDVhTS1hSeokYsElWzJbiIvrf8Aczwn/9k=

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableMiddle.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAfAAEDAREA
AhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABQQJ/8QAGBABAQADAAAAAAAAAAAAAAAAABMBEmH/
xAAXAQADAQAAAAAAAAAAAAAAAAABAgQA/8QAFhEBAQEAAAAAAAAAAAAAAAAAABEB/9oADAMBAAIR
AxEAPwDWaPF1SlIgy7QIYhPBLgx//9k=

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableBottom.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAFAAEDAREA
AhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/EABoQAAAHAAAAAAAAAAAAAAAAAAABAwYYU5H/
xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFREBAQAAAAAAAAAAAAAAAAAAABH/2gAMAwEAAhEDEQA/
AFEjYx7V8ICP/9k=

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/print.css

@charset "utf-8";

body { color: rgb(0, 0, 0); background: rgb(255, 255, 255); font-family: "T=
imes New Roman", Times, serif; font-size: 12pt; }

a { text-decoration: none; color: rgb(0, 0, 0); }

pre { overflow-wrap: break-word; }

.titleTableTopNav, .titleTableSubNav, .logoImage { display: none; }

.packageFrame { display: none; }

.titleTableSubTitle { font-weight: bold; }

.classHeaderTableLabel { padding-right: 10px; vertical-align: top; }

.showHideLinks { display: none; }

html > body code { font-size: 10pt; }

.summaryTableTitle, .detailSectionHeader { font-size: 14pt; font-weight: bo=
ld; padding-top: 15px; padding-bottom: 5px; }

.summaryTable { border: 1px solid rgb(0, 0, 0); border-collapse: collapse; =
width: 100%; }

.summaryTableDescription { padding-bottom: 20px; }

.summaryTableSignatureCol, .summaryTableOwnerCol, .summaryTableLastCol, .su=
mmaryTableCol { border: 1px solid rgb(0, 0, 0); }

.summaryTablePaddingCol { border-width: 1px 0px 1px 1px; border-top-style: =
solid; border-bottom-style: solid; border-left-style: solid; border-top-col=
or: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb=
(0, 0, 0); border-image: initial; border-right-style: initial; border-right=
-color: initial; }

.summaryTableInheritanceCol, .summaryTableOperatorCol, .summaryTableStateme=
ntCol, .summaryTableSecondCol { border-width: 1px 1px 1px 0px; border-top-s=
tyle: solid; border-right-style: solid; border-bottom-style: solid; border-=
top-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-bottom-co=
lor: rgb(0, 0, 0); border-image: initial; border-left-style: initial; borde=
r-left-color: initial; }

.summaryTableLastCol { vertical-align: top; }

.detailHeader { font-size: 13pt; padding-top: 100px; }

.detailHeaderName { font-weight: bold; }

.detailHeaderType { padding-left: 5px; }

.detailHeaderRule { background: rgb(255, 0, 0); }

.seeAlso { padding-bottom: 20px; margin-top: -20px; }

.innertable { border-collapse: collapse; }

.innertable td, .innertable th { border: 1px solid rgb(0, 0, 0); padding-le=
ft: 5px; padding-right: 5px; }

.listing { font-size: 10pt; }

.feedbackLink { display: none; }

.copyright { font-size: 10pt; }
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/override.css

@charset "utf-8";
=0A
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/02geek-as3-js.gif

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

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/logo.jpg

/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABGAAD/7gAOQWRvYmUA
ZMAAAAAB/9sAhAAEAwMDAwMEAwMEBgQDBAYHBQQEBQcIBgYHBgYICggJCQkJCAoKDAwMDAwKDAwN
DQwMEREREREUFBQUFBQUFBQUAQQFBQgHCA8KCg8UDg4OFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABQAEwDAREAAhEBAxEB/8QAYwABAAIDAAAA
AAAAAAAAAAAAAAMEAQYIAQEBAAMAAAAAAAAAAAAAAAAAAQIDBBAAAgADCQAAAAAAAAAAAAAAABIB
AwRhUpKT0xTUVQcRAQEBAQAAAAAAAAAAAAAAAAAREgH/2gAMAwEAAhEDEQA/AOjVgdrkgsAQWAIL
AEFgCCwBBYAgsAQWAILAETICiAogKICiAogKICiAogKICpkJVEFBBQQUEFBBQQUEFBBQQUWEAIAQ
AgBACAEAIAQAgEygFAKAUAoBQCgFAKAUDKV96lyJvIEUSvvUuRN5AgJX3qXIm8gQEr71LkTeQICV
96lyJvIEBK+9S5E3kCAlfepcibyBASvvUuRN5AgJX3qXIm8gQEr71LkTeQIL6GKiAEAIAQAgBACA
EAIBaWwAtgBbAC2AFsALYAWwAtgBbAC2ATpElWCRFIJEUgkRSCRFIJEUgkRSCRFIJEUgkRSNP3Xq
XWUGCbrGnfW3JuvUusoME3WG+mTdepdZQYJusN9Mm69S6ygwTdYb6ZN16l1lBgm6w30ybr1LrKDB
N1hvpk3XqXWUGCbrDfTJuvUusoME3WG+mTdepdZQYJusN9Mm69S6ygwTdYb6Zf/Z

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/html
Content-ID: <frame-19B0504533C0959208C8006B3F9A4620@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/com/greensock/TimelineLite.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/sty=
le.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" href=3D=
"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"print">=
<link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/override.css"=
 type=3D"text/css"><meta name=3D"keywords" content=3D"TimelineLite,com.gree=
nsock.TimelineLite,add,addCallback,addEventListener,addEventListener,addLab=
el,addPause,call,clear,currentLabel,delayedCall,delayedCall,delayedCall,dis=
ableBitmapMode,disableBitmapMode,dispose,dispose,duration,duration,enableBi=
tmapMode,enableBitmapMode,exportRoot,from,from,from,from,fromTo,fromTo,from=
To,getActive,getAllTweens,getChildren,getLabelAfter,getLabelBefore,getLabel=
Time,getLabelsArray,getTweensOf,getTweensOf,getTweensOf,invalidate,invalida=
te,invalidate,invalidate,isTweening,kill,killAll,killChildTweensOf,killDela=
yedCallsTo,killDelayedCallsTo,killTweensOf,killTweensOf,killTweensOf,normal=
izePosition,normalizePosition,pauseAll,progress,progress,remove,removeCallb=
ack,removeEventListener,removeEventListener,removeLabel,repeat,repeat,repea=
tDelay,repeatDelay,resumeAll,seek,set,set,set,setActualSize,setSize,setSize=
,shiftChildren,staggerFrom,staggerFrom,staggerFromTo,staggerFromTo,staggerT=
o,staggerTo,stop,time,time,to,to,to,to,totalDuration,totalDuration,totalDur=
ation,totalProgress,totalProgress,tweenFromTo,tweenTo,update,update,updateT=
o,usesFrames,yoyo,yoyo"><title>com.greensock.TimelineLite</title></head><bo=
dy class=3D"vsc-initialized">
<table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0" id=3D"title=
Table" style=3D"display:none"><tbody><tr><td class=3D"titleTableTitle" alig=
n=3D"left">GreenSock ActionScript API Docs</td><td class=3D"titleTableTopNa=
v" align=3D"right"><a href=3D"https://greensock.com/asdocs/package-summary.=
html">All Packages</a>&nbsp;|&nbsp;<a href=3D"https://greensock.com/asdocs/=
class-summary.html">All Classes</a>&nbsp;|&nbsp;<a href=3D"https://greensoc=
k.com/asdocs/all-index-A.html">Index</a>&nbsp;|&nbsp;<a id=3D"framesLink1" =
href=3D"https://greensock.com/asdocs/index.html?com/greensock/TimelineLite.=
html&amp;com/greensock/class-list.html">Frames</a><a id=3D"noFramesLink1" s=
tyle=3D"display:none" href=3D"https://greensock.com/asdocs/com/greensock/Ti=
melineLite.html"> No Frames </a></td><td class=3D"titleTableLogo" align=3D"=
right" rowspan=3D"3"><img src=3D"https://greensock.com/asdocs/images/logo.j=
pg" class=3D"logoImage" alt=3D" Adobe Logo " title=3D" Adobe Logo "></td></=
tr><tr class=3D"titleTableRow2"><td class=3D"titleTableSubTitle" id=3D"subT=
itle" align=3D"left">TimelineLite</td><td class=3D"titleTableSubNav" id=3D"=
subNav" align=3D"right"><a href=3D"https://greensock.com/asdocs/com/greenso=
ck/TimelineLite.html#propertySummary">Properties</a>&nbsp;| <a href=3D"http=
s://greensock.com/asdocs/com/greensock/TimelineLite.html#methodSummary">Met=
hods</a></td></tr><tr class=3D"titleTableRow3"><td colspan=3D"3">&nbsp;</td=
></tr></tbody></table><div xmlns:fn=3D"http://www.w3.org/2005/xpath-functio=
ns" class=3D"MainContent"><table class=3D"classHeaderTable" cellpadding=3D"=
0" cellspacing=3D"0"><tbody><tr><td class=3D"classHeaderTableLabel">Package=
</td><td><a href=3D"https://greensock.com/asdocs/com/greensock/package-deta=
il.html">com.greensock</a></td></tr><tr><td class=3D"classHeaderTableLabel"=
>Class</td><td class=3D"classSignature">public  class  TimelineLite</td></t=
r><tr><td class=3D"classHeaderTableLabel">Inheritance</td><td class=3D"inhe=
ritanceList">TimelineLite  <img src=3D"https://greensock.com/asdocs/images/=
inherit-arrow.gif" title=3D"Inheritance" alt=3D"Inheritance" class=3D"inher=
itArrow"> <a href=3D"https://greensock.com/asdocs/com/greensock/core/Simple=
Timeline.html">SimpleTimeline</a> <img src=3D"https://greensock.com/asdocs/=
images/inherit-arrow.gif" title=3D"Inheritance" alt=3D"Inheritance" class=
=3D"inheritArrow"> <a href=3D"https://greensock.com/asdocs/com/greensock/co=
re/Animation.html">Animation</a> <img src=3D"https://greensock.com/asdocs/i=
mages/inherit-arrow.gif" title=3D"Inheritance" alt=3D"Inheritance" class=3D=
"inheritArrow"> Object</td></tr><tr><td class=3D"classHeaderTableLabel">Sub=
classes</td><td> <a href=3D"https://greensock.com/asdocs/com/greensock/Time=
lineMax.html">TimelineMax</a></td></tr></tbody></table><p></p><p></p><p></p=
>
 TimelineLite is a powerful sequencing tool that acts as a container for tw=
eens and=20
 other timelines, making it simple to control them as a whole and precisely=
 manage their
 timing in relation to each other. Without TimelineLite (or its big brother=
 TimelineMax), building=20
 complex sequences would be far more cumbersome because you'd need to use t=
he <code>delay</code> special property
 for everything which would make future edits far more tedious. Here is a b=
asic example of a=20
 sequence <b>without</b> using TimelineLite (the tedious way):=20
 <div class=3D"listing" version=3D"3.0"><pre>TweenLite.to(mc, 1, {x:100});
TweenLite.to(mc, 1, {y:50, delay:1});
TweenLite.to(mc, 1, {alpha:0, delay:2});
</pre></div>
 The above code animates <code>mc.x</code> to 100, then <code>mc.y</code> t=
o 50, and finally=20
 <code>mc.alpha</code> to 0 (notice the <code>delay</code> in all but the f=
irst tween). But=20
 imagine if you wanted to increase the duration of the first tween to 1.5 -=
 you'd need to
 adjust every delay thereafter. And what if you want to <code>pause()</code=
> the whole=20
 sequence or <code>restart()</code> it or <code>reverse()</code> it on-the-=
fly or jump to
 a specific point in the whole animation? This becomes quite messy (or flat=
-out impossible),=20
 but TimelineLite makes it incredibly simple:
=20
 <div class=3D"listing" version=3D"3.0"><pre>var tl =3D new TimelineLite();
tl.add( TweenLite.to(mc, 1, {x:100}) );
tl.add( TweenLite.to(mc, 1, {y:50}) );
tl.add( TweenLite.to(mc, 1, {alpha:0}) );
=20
//then later, control the whole thing...
tl.pause();
tl.resume();
tl.seek(1.5);
tl.reverse();
...
</pre></div>
 Or use the convenient <code>to()</code> method and chaining to make it eve=
n more concise:
 <div class=3D"listing" version=3D"3.0"><pre>var tl =3D new TimelineLite();
tl.to(mc, 1, {x:100}).to(mc, 1, {y:50}).to(mc, 1, {alpha:0});
</pre></div>
=20
               <p>Now you can adjust any of the tweens without worrying abo=
ut trickle-down
 changes to delays. Increase the duration of that first tween and everythin=
g automatically
 adjusts!</p>
=20
               <p>Here are some other benefits and features of TimelineLite=
:</p>
=20
 	             <ul>
 		               <li> Things can overlap on the timeline as much as you wa=
nt. You have complete control=20
 			over where tweens/timelines are placed. Most other animation tools can =
only do basic=20
 			one-after-the-other sequencing but can't allow things to overlap. Imagi=
ne appending
 			a tween that moves an object and you want it to start fading out 0.5 se=
conds before the=20
 			end of that tween? With TimelineLite it's easy.</li>
=20
 		               <li> Add labels, play(), stop(), seek(), restart(), and e=
ven reverse() smoothly anytime.</li>
 	=09
 		               <li> Nest timelines within timelines as deeply as you wan=
t. This means you can modularize
 			your code and make it far more efficient. Imagine building your app wit=
h common animateIn()=20
 			and animateOut() methods that return a tween or timeline instance, then=
 you can string=20
 			things together like=20
 			<code>myTimeline.add( myObject.animateIn() ).add( myObject.animateOut()=
, "+=3D4").add( myObject2.animateIn(), "-=3D0.5")...</code>
                  </li>
 	=09
 		               <li> Speed up or slow down the entire timeline with its <=
code>timeScale()</code> method.=20
 			You can even tween it to gradually speed up or slow down the animation =
smoothly.</li>
 	=09
 		               <li> Get or set the progress of the timeline using its <c=
ode>progress()</code> method.=20
 			For example, to skip to the halfway point, set <code>myTimeline.progres=
s(0.5);</code>
                  </li>
 		 =20
 		               <li> Tween the <code>time</code> or <code>progress</code>=
 to fastforward/rewind=20
 			the timeline. You could even attach a slider to one of these properties=
 to give the=20
 			user the ability to drag forward/backward through the timeline.</li>
 		 =20
 		               <li> Add <code>onComplete, onStart, onUpdate,</code> and/=
or <code>onReverseComplete</code>=20
 			callbacks using the constructor's <code>vars</code> object like
 			<code>var tl =3D new TimelineLite({onComplete:myFunction});</code>
                  </li>
=20
 		               <li> Kill the tweens of a particular object inside the ti=
meline with <code>kill(null, target)</code>=20
 			or get the tweens of an object with <code>getTweensOf()</code> or get a=
ll the tweens/timelines=20
 			in the timeline with <code>getChildren()</code>
                  </li>
 		 =20
 		               <li> By passing <code>useFrames:true</code> in the <code>=
vars</code> parameter, you can
 			base the timing on frames instead of seconds. Please note, however, tha=
t
 		  the timeline's timing mode dictates its childrens' timing mode as well=
. </li>
 	=09
 		               <li> You can export all the tween/timelines from the root=
 (master) timeline anytime into=20
 			a TimelineLite instance using <code>TimelineLite.exportRoot()</code> so=
 that
 			you can <code>pause()</code> them all or <code>reverse()</code> or alte=
r their=20
 			<code>timeScale</code>, etc. without affecting tweens/timelines that yo=
u create in
 			the future. Imagine a game that has all its animation driven by the Gre=
enSock=20
 			Animation Platform and it needs to pause or slow down while a status sc=
reen pops up.=20
 			Very easy.</li>
 		 =20
 		               <li> If you need even more features like <code>repeat, re=
peatDelay, yoyo, currentLabel(),=20
 			getLabelAfter(), getLabelBefore(), addCallback(), removeCallback(), get=
Active()</code>,=20
 			AS3 event listeners and more, check out TimelineMax which extends Timel=
ineLite.</li>
 	             </ul>
=20
=20
               <p>
                  <b>SPECIAL PROPERTIES:</b>
               </p>
               <p>You can optionally use the constructor's <code>vars</code=
> parameter to define any of
 the special properties below (syntax example: <code>new TimelineLite({onCo=
mplete:myFunction, delay:2});</code>
               </p>
=20
               <ul>
 	                <li>
                     <b> delay </b>:<i> Number</i> -
 				 Amount of delay in seconds (or frames for frames-based tweens) before=
 the timeline should begin.</li>
=20
                  <li>
                     <b> paused </b>:<i> Boolean</i> -
 				 If <code>true</code>, the timeline will pause itself immediately upon=
 creation (by default,=20
 				 timelines automatically begin playing immediately). If you plan to cr=
eate a TimelineLite and=20
 				 then populate it later (after one or more frames elapse), it is typic=
ally best to set=20
 				 <code>paused:true</code> and then <code>play()</code> after you popul=
ate it.</li>
 =09
 	                <li>
                     <b> onComplete </b>:<i> Function</i> -
 				 A function that should be called when the timeline has completed</li>
 =09
 	                <li>
                     <b> onCompleteParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onComplete</code> function. =
For example,
 				 <code>new TimelineLite({onComplete:myFunction, onCompleteParams:["par=
am1", "param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onCompleteParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> useFrames </b>:<i> Boolean</i> -
 				 If <code>useFrames</code> is <code>true</code>, the timelines's timin=
g will be=20
 				 based on frames instead of seconds because it is intially added to th=
e root
 				 frames-based timeline. This causes both its <code>duration</code>
 				 and <code>delay</code> to be based on frames. An animations's timing =
mode is=20
 				 always determined by its parent <code>timeline</code>.</li>
=20
                  <li>
                     <b> tweens </b>:<i> Array</i> -
 				 To immediately insert several tweens into the timeline, use the <code=
>tweens</code>=20
 				 special property to pass in an Array of TweenLite/TweenMax/TimelineLi=
te/TimelineMax=20
 				 instances. You can use this in conjunction with the <code>align</code=
> and=20
 				 <code>stagger</code> special properties to set up complex sequences w=
ith minimal code.
 				 These values simply get passed to the <code>add()</code> method.</li>
 =09
 	                <li>
                     <b> align </b>:<i> String</i> -
 				 Only used in conjunction with the <code>tweens</code> special propert=
y when multiple=20
 				 tweens are	to be inserted immediately. The value simply gets passed t=
o the=20
 				 <code>add()</code> method. The default is <code>"normal"</code>.=20
 				 Options are:
 					<ul>
 						                 <li>
                           <b>
                              <code>"sequence"</code>
                           </b>: aligns the tweens one-after-the-other in a=
 sequence</li>
 						                 <li>
                           <b>
                              <code>"start"</code>
                           </b>: aligns the start times of all of the tween=
s (ignores delays)</li>
 						                 <li>
                           <b>
                              <code>"normal"</code>
                           </b>: aligns the start times of all the tweens (=
honors delays)</li>
 					               </ul>
 				The <code>align</code> special property does <b>not</b> force all chil=
d=20
 				tweens/timelines to maintain relative positioning, so for example, if =
you use=20
 				<code>"sequence"</code> and then later change the duration of one of t=
he nested tweens,=20
 				it does <b>not</b> force all subsequent timelines to change their posi=
tion.
 				The <code>align</code> special property only affects the alignment of =
the tweens that are
 				initially placed into the timeline through the <code>tweens</code> spe=
cial property of=20
 				the <code>vars</code> object.</li>
 									=09
 	                <li>
                     <b> stagger </b>:<i> Number</i> -
 				 Only used in conjunction with the <code>tweens</code> special propert=
y when multiple=20
 				 tweens are	to be added immediately. It staggers the tweens by a set a=
mount of time=20
 				 in seconds (or in frames if <code>useFrames</code> is true). For exam=
ple, if the=20
 				 stagger value is 0.5 and the "align" property is set to <code>"start"=
</code>, the=20
 				 second tween will start 0.5 seconds after the first one starts, then =
0.5 seconds=20
 				 later the third one will start, etc. If the align property is <code>"=
sequence"</code>,
 				 there would be 0.5 seconds added between each tween. This value simpl=
y gets=20
 				 passed to the <code>add()</code> method. Default is 0.</li>
=20
                  <li>
                     <b> onStart </b>:<i> Function</i> -
 				 A function that should be called when the timeline begins (when its <=
code>time</code>
 				 changes from 0 to some other value which can happen more than once if=
 the=20
 				 timeline is restarted multiple times).</li>
 =09
 	                <li>
                     <b> onStartParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onStart</code> function. For=
 example,=20
 				 <code>new TimelineLite({onStart:myFunction, onStartParams:["param1", =
"param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onStartParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> onUpdate </b>:<i> Function</i> -
 				 A function that should be called every time the timeline updates =20
 				 (on every frame while the timeline is active)</li>
 =09
 	                <li>
                     <b> onUpdateParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onUpdate</code> function. Fo=
r example,
 				 <code>new TimelineLite({onUpdate:myFunction, onUpdateParams:["param1"=
, "param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onUpdateParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> onReverseComplete </b>:<i> Function</i> -
 				 A function that should be called when the timeline has reached its be=
ginning again from the=20
 				 reverse direction. For example, if <code>reverse()</code> is called, =
the timeline will move
 				 back towards its beginning and when its <code>time</code> reaches 0, =
<code>onReverseComplete</code>
 				 will be called. This can also happen if the timeline is placed in a T=
imelineLite or TimelineMax=20
 				 instance that gets reversed and plays the timeline backwards to (or p=
ast) the beginning.</li>
 =09
 	                <li>
                     <b> onReverseCompleteParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onReverseComplete</code> fun=
ction. For example,=20
 				 <code>new TimelineLite({onReverseComplete:myFunction, onReverseComple=
teParams:["param1", "param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onReverseCompleteParams:["{self}", "param2"]</code>
                  </li>
=20
                  <li>
                     <b> autoRemoveChildren </b>:<i> Boolean</i> -
 				If <code>autoRemoveChildren</code> is set to <code>true</code>, as soo=
n as child=20
 				tweens/timelines complete, they will automatically get killed/removed.=
 This is normally=20
 				undesireable because it prevents going backwards in time (like if you =
want to=20
 				<code>reverse()</code> or set the <code>progress</code> lower, etc.). =
It can, however,=20
 				improve speed and memory management. The root timelines use <code>auto=
RemoveChildren:true</code>.</li>
=20
                  <li>
                     <b> smoothChildTiming </b>:<i> Boolean</i> -
 				Controls whether or not child tweens/timelines are repositioned automa=
tically=20
 				(changing their <code>startTime</code>) in order to maintain smooth pl=
ayback when=20
 				properties are changed on-the-fly. For example, imagine that the timel=
ine's playhead is=20
 				on a child tween that is 75% complete, moving mc.x from 0 to 100 and t=
hen that tween's=20
 				<code>reverse()</code> method is called. If <code>smoothChildTiming</c=
ode> is <code>false</code>=20
 				(the default except for the root timelines), the tween would flip in p=
lace, keeping its=20
 				<code>startTime</code> consistent. Therefore the playhead of the timel=
ine would now be=20
 				at the tween's 25% completion point instead of 75%. Remember, the time=
line's playhead=20
 				position and direction are unaffected by child tween/timeline changes.=
 mc.x would jump=20
 				from 75 to 25, but the tween's position in the timeline would remain c=
onsistent. However,=20
 				if <code>smoothChildTiming</code> is <code>true</code>, that child twe=
en's=20
 				<code>startTime</code> would be adjusted so that the timeline's playhe=
ad intersects=20
 				with the same spot on the tween (75% complete) as it had immediately b=
efore=20
 				<code>reverse()</code> was called, thus playback appears perfectly smo=
oth. mc.x=20
 				would still be 75 and it would continue from there as the playhead mov=
es on, but=20
 				since the tween is reversed now mc.x will travel back towards 0 instea=
d of 100.=20
 				Ultimately it's a decision between prioritizing smooth on-the-fly play=
back=20
 				(<code>true</code>) or consistent position(s) of child tweens/timeline=
s=20
 				(<code>false</code>).=20
=20
 				Some examples of on-the-fly changes to child tweens/timelines that cou=
ld cause their=20
 				<code>startTime</code> to change when <code>smoothChildTiming</code> i=
s <code>true</code>=20
 				are: <code>reversed, timeScale, progress, totalProgress, time, totalTi=
me, delay, pause,=20
 				resume, duration,</code> and <code>totalDuration</code>.</li>
 =09
 	             </ul>
=20
               <b>Sample code:</b>
               <div class=3D"listing" version=3D"3.0"><pre>//create the tim=
eline with an onComplete callback that calls myFunction() when the timeline=
 completes
var tl =3D new TimelineLite({onComplete:myFunction});
//add a tween
tl.add( new TweenLite(mc, 1, {x:200, y:100}) );
       =20
//add another tween at the end of the timeline (makes sequencing easy)
tl.add( new TweenLite(mc, 0.5, {alpha:0}) );
=20
//append a tween using the convenience method (shorter syntax) and offset i=
t by 0.5 seconds
tl.to(mc, 1, {rotation:30}, "+=3D0.5");
        =20
//reverse anytime
tl.reverse();
//Add a "spin" label 3-seconds into the timeline
tl.add("spin", 3);
//insert a rotation tween at the "spin" label (you could also define the in=
sertion point as the time instead of a label)
tl.add( new TweenLite(mc, 2, {rotation:"360"}), "spin");
   =20
//go to the "spin" label and play the timeline from there
tl.play("spin");
//nest another TimelineLite inside your timeline...
var nested =3D new TimelineLite();
nested.to(mc2, 1, {x:200}));
tl.add(nested);
</pre></div>
=20
               <p>
                  <b>How do timelines work? What are the mechanics like?</b=
>
               </p>
               <p>Every animation (tween and timeline) is placed on a paren=
t timeline (except the 2 root timelines - there's one for normal tweens and=
 another for "useFrames" ones).=20
 In a sense, they all have their own playheads (that's what its "time" refe=
rs to, or "totalTime" which is identical except that it includes repeats an=
d repeatDelays)=20
 but generally they're not independent because they're sitting on a timelin=
e whose playhead moves.=20
 When the parent's playhead moves to a new position, it updates the childre=
ns' too. </p>
=20
               <p>When a timeline renders at a particular time, it loops th=
rough its children and says "okay, you should render as if your playhead is=
 at ____" and if that child=20
 is a timeline with children, it does the same to its children, right on do=
wn the line. </p>
=20
               <p>The only exception is when the tween/timeline is paused i=
n which case its internal playhead acts like it's "locked". So in that case=
,=20
 it's possible (likely in fact) that the child's playhead would <b>not</b> =
be synced with the parent's.=20
 When you unpause it (<code>resume()</code>), it essentially picks it up an=
d moves it so that its internal playhead=20
 is synchronized with wherever the parent's playhead is at that moment, thu=
s things play perfectly smoothly.=20
 That is, unless the timeline's <code>smoothChildTiming</code> is to <code>=
false</code> in which case it won't move -=20
 its <code>startTime</code> will remain locked to where it was. </p>
=20
               <p>So basically, when <code>smoothChildTiming</code> is <cod=
e>true</code>, the engine will rearrange things on=20
 the fly to ensure the playheads line up so that playback is seamless and s=
mooth. The same thing happens when you <code>reverse()</code>
 or alter the <code>timeScale</code>, etc. But sometimes you might not want=
 that behavior - you prefer to have tight=20
 control over exactly where your tweens line up in the timeline - that's wh=
en <code>smoothChildTiming:false</code> is handy.</p>
=20
               <p>One more example: let's say you've got a 10-second tween =
that's just sitting on the root timeline and you're 2-seconds into the twee=
n.=20
 Let's assume it started at exactly 0 on the root to make this easy, and th=
en when it's at 2-seconds, you do <code>tween.seek(5)</code>.=20
 The playhead of the root isn't affected - it keeps going exactly as it alw=
ays did, but in order to make that tween jump to 5 seconds=20
 and play appropriately, the tween's <code>startTime</code> gets changed to=
 -3. That way, the tween's playhead and the root=20
 playhead are perfectly aligned. </p>
=20
               <p>
                  <b>Copyright 2008-2013, GreenSock. All rights reserved.</=
b> This work is subject to the terms in <a href=3D"http://www.greensock.com=
/terms_of_use.html" target=3D"">http://www.greensock.com/terms_of_use.html<=
/a> or for <a href=3D"http://www.greensock.com/club/" target=3D"">Club Gree=
nSock</a> members, the software agreement that was issued with the membersh=
ip.</p>
=20
            <p></p><br><hr></div><a name=3D"propertySummary"></a><div class=
=3D"summarySection"><div class=3D"summaryTableTitle">Public Properties</div=
><div class=3D"showHideLinks"><div id=3D"hideInheritedProperty" class=3D"hi=
deInheritedProperty"><a class=3D"showHideLink" href=3D"https://greensock.co=
m/asdocs/com/greensock/TimelineLite.html#propertySummary"><img class=3D"sho=
wHideLinkImage" src=3D"https://greensock.com/asdocs/images/expanded.gif"> H=
ide Inherited Public Properties</a></div><div id=3D"showInheritedProperty" =
class=3D"showInheritedProperty"><a class=3D"showHideLink" href=3D"https://g=
reensock.com/asdocs/com/greensock/TimelineLite.html#propertySummary"><img c=
lass=3D"showHideLinkImage" src=3D"https://greensock.com/asdocs/images/colla=
psed.gif"> Show Inherited Public Properties</a></div></div><table cellspaci=
ng=3D"0" cellpadding=3D"3" class=3D"summaryTable hideInheritedProperty" id=
=3D"summaryTableProperty"><tbody><tr><th>&nbsp;</th><th colspan=3D"2">Prope=
rty</th><th class=3D"summaryTableOwnerCol">Defined By</th></tr><tr class=3D=
"hideInheritedProperty" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddin=
gCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"https=
://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" titl=
e=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTa=
bleSignatureCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core=
/SimpleTimeline.html#autoRemoveChildren" class=3D"signatureLink">autoRemove=
Children</a> : Boolean<div class=3D"summaryTableDescription"> If true, chil=
d tweens/timelines will be removed as soon as they complete.</div></td><td =
class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/=
greensock/core/SimpleTimeline.html">SimpleTimeline</a></td></tr><tr class=
=3D"hideInheritedProperty" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePad=
dingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"ht=
tps://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" t=
itle=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summar=
yTableSignatureCol"><a href=3D"https://greensock.com/asdocs/com/greensock/c=
ore/Animation.html#data" class=3D"signatureLink">data</a> : *<div class=3D"=
summaryTableDescription"> A place to store any data you want (initially pop=
ulated with vars.data if it exists).</div></td><td class=3D"summaryTableOwn=
erCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation=
.html">Animation</a></td></tr><tr class=3D"hideInheritedProperty" bgcolor=
=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><a href=3D"htt=
ps://greensock.com/asdocs/com/greensock/core/SimpleTimeline.html#smoothChil=
dTiming" class=3D"signatureLink">smoothChildTiming</a> : Boolean<div class=
=3D"summaryTableDescription">=20
		 Controls whether or not child tweens/timelines are repositioned automati=
cally (changing their startTime)=20
		 in order to maintain smooth playback when properties are changed on-the-=
fly.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greens=
ock.com/asdocs/com/greensock/core/SimpleTimeline.html">SimpleTimeline</a></=
td></tr><tr class=3D"hideInheritedProperty" bgcolor=3D"#F2F2F2"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><a href=3D"https://greensock.com/asd=
ocs/com/greensock/core/Animation.html#ticker" class=3D"signatureLink">ticke=
r</a> : Shape<div class=3D"summaryTableDescription">[static]=20
		 The object that dispatches a "tick" event each time the engine updates, =
making it easy for=20
		 you to add your own listener(s) to run custom logic after each update (g=
reat for game developers).</div></td><td class=3D"summaryTableOwnerCol"><a =
href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Ani=
mation</a></td></tr><tr class=3D"hideInheritedProperty" bgcolor=3D"#FFFFFF"=
><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableI=
nheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSum=
mary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryIm=
age"></td><td class=3D"summaryTableSignatureCol"><a href=3D"https://greenso=
ck.com/asdocs/com/greensock/core/Animation.html#timeline" class=3D"signatur=
eLink">timeline</a> : <a href=3D"https://greensock.com/asdocs/com/greensock=
/core/SimpleTimeline.html">SimpleTimeline</a><div class=3D"summaryTableDesc=
ription"> [Read-only] Parent timeline.</div></td><td class=3D"summaryTableO=
wnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animati=
on.html">Animation</a></td></tr><tr class=3D"hideInheritedProperty" bgcolor=
=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><a href=3D"htt=
ps://greensock.com/asdocs/com/greensock/core/Animation.html#vars" class=3D"=
signatureLink">vars</a> : Object<div class=3D"summaryTableDescription"> The=
 vars object passed into the constructor which stores configuration variabl=
es like onComplete, onUpdate, etc.</div></td><td class=3D"summaryTableOwner=
Col"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.h=
tml">Animation</a></td></tr></tbody></table></div><a name=3D"methodSummary"=
></a><div class=3D"summarySection"><div class=3D"summaryTableTitle">Public =
Methods </div><div class=3D"showHideLinks"><div id=3D"hideInheritedMethod" =
class=3D"hideInheritedMethod"><a class=3D"showHideLink" href=3D"https://gre=
ensock.com/asdocs/com/greensock/TimelineLite.html#methodSummary"><img class=
=3D"showHideLinkImage" src=3D"https://greensock.com/asdocs/images/expanded.=
gif"> Hide Inherited Public Methods</a></div><div id=3D"showInheritedMethod=
" class=3D"showInheritedMethod"><a class=3D"showHideLink" href=3D"https://g=
reensock.com/asdocs/com/greensock/TimelineLite.html#methodSummary"><img cla=
ss=3D"showHideLinkImage" src=3D"https://greensock.com/asdocs/images/collaps=
ed.gif"> Show Inherited Public Methods</a></div></div><table cellspacing=3D=
"0" cellpadding=3D"3" class=3D"summaryTable " id=3D"summaryTableMethod"><tb=
ody><tr><th>&nbsp;</th><th colspan=3D"2">Method</th><th class=3D"summaryTab=
leOwnerCol">Defined By</th></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td clas=
s=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanc=
eCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summa=
rySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/Timeline=
Lite.html#TimelineLite()" class=3D"signatureLink">TimelineLite</a>(vars:Obj=
ect =3D null)</div><div class=3D"summaryTableDescription">
		 Constructor.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</=
td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePadding=
Col">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td cla=
ss=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"=
https://greensock.com/asdocs/com/greensock/TimelineLite.html#add()" class=
=3D"signatureLink">add</a>(value:*, position:* =3D +=3D0, align:String =3D =
normal, stagger:Number =3D 0):*</div><div class=3D"summaryTableDescription"=
>[override]=20
		 Adds a tween, timeline, callback, or label (or an array of them) to the =
timeline.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</td></t=
r><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&=
nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"=
summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"https:=
//greensock.com/asdocs/com/greensock/TimelineLite.html#addLabel()" class=3D=
"signatureLink">addLabel</a>(label:String, position:* =3D +=3D0):*</div><di=
v class=3D"summaryTableDescription">
		 Adds a label to the timeline, making it easy to mark important positions=
/times.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</td></tr>=
<tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nb=
sp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"su=
mmaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://=
greensock.com/asdocs/com/greensock/TimelineLite.html#addPause()" class=3D"s=
ignatureLink">addPause</a>(position:* =3D +=3D0, callback:Function =3D null=
, params:Array =3D null):*</div><div class=3D"summaryTableDescription">
		 Inserts a special callback that pauses playback of the timeline at a
		 particular time or label.</div></td><td class=3D"summaryTableOwnerCol">T=
imelineLite</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summar=
yTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp=
;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature=
"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#c=
all()" class=3D"signatureLink">call</a>(callback:Function, params:Array =3D=
 null, position:* =3D +=3D0):*</div><div class=3D"summaryTableDescription">
		 Adds a callback to the end of the timeline (or elsewhere using the "posi=
tion" parameter)
		  - this is a convenience method that accomplishes exactly the same thing=
 as=20
		 add( TweenLite.delayedCall(...) ) but with less code.</div></td><td clas=
s=3D"summaryTableOwnerCol">TimelineLite</td></tr><tr class=3D"" bgcolor=3D"=
#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summa=
ryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><d=
iv class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/g=
reensock/TimelineLite.html#clear()" class=3D"signatureLink">clear</a>(label=
s:Boolean =3D true):*</div><div class=3D"summaryTableDescription">
		 Empties the timeline of all tweens, timelines, and callbacks (and option=
ally labels too).</div></td><td class=3D"summaryTableOwnerCol">TimelineLite=
</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#delay=
()" class=3D"signatureLink">delay</a>(value:Number):*</div><div class=3D"su=
mmaryTableDescription">=20
		 Gets or sets the animation's initial delay which is the length of time i=
n seconds=20
		 (or frames for frames-based tweens) before the animation should begin.</=
div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.co=
m/asdocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr clas=
s=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td>=
<td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTab=
leSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TimelineLite.html#duration()" class=3D"signature=
Link">duration</a>(value:Number):*</div><div class=3D"summaryTableDescripti=
on">[override]=20
		 Gets the timeline's duration or, if used as a setter, adjusts the timeli=
ne's=20
		 timeScale to fit it within the specified duration.</div></td><td class=
=3D"summaryTableOwnerCol">TimelineLite</td></tr><tr class=3D"hideInheritedM=
ethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td>=
<td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.com/=
asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" c=
lass=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol">=
<div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com=
/greensock/core/Animation.html#eventCallback()" class=3D"signatureLink">eve=
ntCallback</a>(type:String, callback:Function =3D null, params:Array =3D nu=
ll):*</div><div class=3D"summaryTableDescription">
		 Gets or sets an event callback like "onComplete", "onUpdate", "onStart",=
 "onReverseComplete"
		 or "onRepeat" (onRepeat only applies to TweenMax or TimelineMax instance=
s)
		 along with any parameters that should be passed to that callback.</div><=
/td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asd=
ocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr class=3D"=
" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td c=
lass=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSig=
natureCol"><div class=3D"summarySignature"><a href=3D"https://greensock.com=
/asdocs/com/greensock/TimelineLite.html#exportRoot()" class=3D"signatureLin=
k">exportRoot</a>(vars:Object =3D null, omitDelayedCalls:Boolean =3D true):=
<a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html">Ti=
melineLite</a></div><div class=3D"summaryTableDescription">[static]=20
		 Seamlessly transfers all tweens, timelines, and [optionally] delayed cal=
ls from the root=20
		 timeline into a new TimelineLite so that you can perform advanced tasks =
on a seemingly global=20
		 basis without affecting tweens/timelines that you create after the expor=
t.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</td></tr><tr c=
lass=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</=
td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summary=
TableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://green=
sock.com/asdocs/com/greensock/TimelineLite.html#from()" class=3D"signatureL=
ink">from</a>(target:Object, duration:Number, vars:Object, position:* =3D +=
=3D0):*</div><div class=3D"summaryTableDescription">
		 Adds a TweenLite.from() tween to the end of the timeline (or elsewhere u=
sing the "position" parameter)
		 - this is a convenience method that accomplishes exactly the same thing =
as=20
		 add( TweenLite.from(...) ) but with less code.</div></td><td class=3D"su=
mmaryTableOwnerCol">TimelineLite</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2=
"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTable=
InheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div clas=
s=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensoc=
k/TimelineLite.html#fromTo()" class=3D"signatureLink">fromTo</a>(target:Obj=
ect, duration:Number, fromVars:Object, toVars:Object, position:* =3D +=3D0)=
:*</div><div class=3D"summaryTableDescription">
		 Adds a TweenLite.fromTo() tween to the end of the timeline - this is=20
		 a convenience method that accomplishes exactly the same thing as=20
		 add( TweenLite.fromTo(...) ) but with less code.</div></td><td class=3D"=
summaryTableOwnerCol">TimelineLite</td></tr><tr class=3D"" bgcolor=3D"#FFFF=
FF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTab=
leInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div cl=
ass=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greens=
ock/TimelineLite.html#getChildren()" class=3D"signatureLink">getChildren</a=
>(nested:Boolean =3D true, tweens:Boolean =3D true, timelines:Boolean =3D t=
rue, ignoreBeforeTime:Number =3D -9999999999):Array</div><div class=3D"summ=
aryTableDescription">
		 Returns an array containing all the tweens and/or timelines nested in th=
is timeline.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</td>=
</tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol=
">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=
=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineLite.html#getLabelTime()" =
class=3D"signatureLink">getLabelTime</a>(label:String):Number</div><div cla=
ss=3D"summaryTableDescription">
		 Returns the time associated with a particular label.</div></td><td class=
=3D"summaryTableOwnerCol">TimelineLite</td></tr><tr class=3D"" bgcolor=3D"#=
FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summar=
yTableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><di=
v class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/gr=
eensock/TimelineLite.html#getTweensOf()" class=3D"signatureLink">getTweensO=
f</a>(target:Object, nested:Boolean =3D true):Array</div><div class=3D"summ=
aryTableDescription">
		 Returns the tweens of a particular object that are inside this timeline.=
</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</td></tr><tr cla=
ss=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td=
><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTa=
bleSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greenso=
ck.com/asdocs/com/greensock/TimelineLite.html#invalidate()" class=3D"signat=
ureLink">invalidate</a>():*</div><div class=3D"summaryTableDescription">[ov=
erride]  =20
		 Clears any initialization data (like starting/ending values in tweens) w=
hich can be useful if, for example,=20
		 you want to restart a tween without reverting to any previously recorded=
 starting values.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite=
</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#isAct=
ive()" class=3D"signatureLink">isActive</a>():Boolean</div><div class=3D"su=
mmaryTableDescription">=20
		 Indicates whether or not the animation is currently active (meaning the =
virtual playhead is actively moving across=20
		 this instance's time span and it is not paused, nor are any of its ances=
tor timelines).</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"htt=
ps://greensock.com/asdocs/com/greensock/core/Animation.html">Animation</a><=
/td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D=
"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol=
"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=
=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td=
 class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#kill()" =
class=3D"signatureLink">kill</a>(vars:Object =3D null, target:Object =3D nu=
ll):*</div><div class=3D"summaryTableDescription">
		 Kills the animation entirely or in part depending on the parameters.</di=
v></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/=
asdocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr class=
=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddi=
ngCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"http=
s://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" tit=
le=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryT=
ableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greens=
ock.com/asdocs/com/greensock/core/Animation.html#pause()" class=3D"signatur=
eLink">pause</a>(atTime:* =3D null, suppressEvents:Boolean =3D true):*</div=
><div class=3D"summaryTableDescription">
		 Pauses the instance, optionally jumping to a specific time.</div></td><t=
d class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/co=
m/greensock/core/Animation.html">Animation</a></td></tr><tr class=3D"hideIn=
heritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nb=
sp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greens=
ock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inhe=
rited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignat=
ureCol"><div class=3D"summarySignature"><a href=3D"https://greensock.com/as=
docs/com/greensock/core/Animation.html#paused()" class=3D"signatureLink">pa=
used</a>(value:Boolean =3D false):*</div><div class=3D"summaryTableDescript=
ion">=20
		 Gets or sets the animation's paused state which indicates whether or not=
 the animation=20
		 is currently paused.</div></td><td class=3D"summaryTableOwnerCol"><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Animat=
ion</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td =
class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheri=
tanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.=
gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage">=
</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"=
><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#=
play()" class=3D"signatureLink">play</a>(from:* =3D null, suppressEvents:Bo=
olean =3D true):*</div><div class=3D"summaryTableDescription">
		 Begins playing forward, optionally from a specific time (by default play=
back begins from
		 wherever the playhead currently is).</div></td><td class=3D"summaryTable=
OwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animat=
ion.html">Animation</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=
=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"=
summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html#progress()" class=3D"signatureLink">progress</a>(value:Num=
ber, suppressEvents:Boolean =3D false):*</div><div class=3D"summaryTableDes=
cription">=20
		 Gets or sets the animations's progress which is a value between 0 and 1 =
indicating the position=20
		 of the virtual playhead (excluding repeats) where 0 is at the beginning,=
 0.5 is at the halfway point,=20
		 and 1 is at the end (complete).</div></td><td class=3D"summaryTableOwner=
Col"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.h=
tml">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D=
"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol=
">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySi=
gnature"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite=
.html#remove()" class=3D"signatureLink">remove</a>(value:*):*</div><div cla=
ss=3D"summaryTableDescription">
		 Removes a tween, timeline, callback, or label (or array of them) from th=
e timeline.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</td><=
/tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol"=
>&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=
=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineLite.html#removeLabel()" c=
lass=3D"signatureLink">removeLabel</a>(label:String):*</div><div class=3D"s=
ummaryTableDescription">
		=20
		 Removes a label from the timeline and returns the time of that label.</d=
iv></td><td class=3D"summaryTableOwnerCol">TimelineLite</td></tr><tr class=
=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddi=
ngCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"http=
s://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" tit=
le=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryT=
ableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greens=
ock.com/asdocs/com/greensock/core/SimpleTimeline.html#render()" class=3D"si=
gnatureLink">render</a>(time:Number, suppressEvents:Boolean =3D false, forc=
e:Boolean =3D false):void</div><div class=3D"summaryTableDescription">[over=
ride]  </div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://gre=
ensock.com/asdocs/com/greensock/core/SimpleTimeline.html">SimpleTimeline</a=
></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#resta=
rt()" class=3D"signatureLink">restart</a>(includeDelay:Boolean =3D false, s=
uppressEvents:Boolean =3D true):*</div><div class=3D"summaryTableDescriptio=
n">
		 Restarts and begins playing forward from the beginning.</div></td><td cl=
ass=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/gr=
eensock/core/Animation.html">Animation</a></td></tr><tr class=3D"hideInheri=
tedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;<=
/td><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.=
com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherite=
d" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureC=
ol"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs=
/com/greensock/core/Animation.html#resume()" class=3D"signatureLink">resume=
</a>(from:* =3D null, suppressEvents:Boolean =3D true):*</div><div class=3D=
"summaryTableDescription">
		 Resumes playing without altering direction (forward or reversed), option=
ally jumping to a specific time first.</div></td><td class=3D"summaryTableO=
wnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animati=
on.html">Animation</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=
=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"=
summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html#reverse()" class=3D"signatureLink">reverse</a>(from:* =3D =
null, suppressEvents:Boolean =3D true):*</div><div class=3D"summaryTableDes=
cription">
		 Reverses playback so that all aspects of the animation are oriented back=
wards including, for example,
		 a tween's ease.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"=
https://greensock.com/asdocs/com/greensock/core/Animation.html">Animation</=
a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#rever=
sed()" class=3D"signatureLink">reversed</a>(value:Boolean =3D false):*</div=
><div class=3D"summaryTableDescription">=20
		 Gets or sets the animation's reversed state which indicates whether or n=
ot the animation=20
		 should be played backwards.</div></td><td class=3D"summaryTableOwnerCol"=
><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html"=
>Animation</a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"sum=
maryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&n=
bsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignat=
ure"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.htm=
l#seek()" class=3D"signatureLink">seek</a>(position:*, suppressEvents:Boole=
an =3D true):*</div><div class=3D"summaryTableDescription">[override]=20
		 Jumps to a specific time (or label) without affecting whether or not the=
 instance=20
		 is paused or reversed.</div></td><td class=3D"summaryTableOwnerCol">Time=
lineLite</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTa=
blePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</=
td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><=
a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#set(=
)" class=3D"signatureLink">set</a>(target:Object, vars:Object, position:* =
=3D +=3D0):*</div><div class=3D"summaryTableDescription">
		 Adds a zero-duration tween to the end of the timeline (or elsewhere usin=
g the "position" parameter)
		 that sets values immediately (when the virtual playhead reaches that pos=
ition
		 on the timeline) - this is a convenience method that accomplishes exactl=
y=20
		 the same thing as add( TweenLite.to(target, 0, {...}) ) but=20
		 with less code.</div></td><td class=3D"summaryTableOwnerCol">TimelineLit=
e</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePadd=
ingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td =
class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#shiftChild=
ren()" class=3D"signatureLink">shiftChildren</a>(amount:Number, adjustLabel=
s:Boolean =3D false, ignoreBeforeTime:Number =3D 0):*</div><div class=3D"su=
mmaryTableDescription">
		 Shifts the startTime of the timeline's children by a certain amount and =
optionally adjusts labels too.</div></td><td class=3D"summaryTableOwnerCol"=
>TimelineLite</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summ=
aryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nb=
sp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignatu=
re"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html=
#staggerFrom()" class=3D"signatureLink">staggerFrom</a>(targets:Array, dura=
tion:Number, vars:Object, stagger:Number =3D 0, position:* =3D +=3D0, onCom=
pleteAll:Function =3D null, onCompleteAllParams:Array =3D null):*</div><div=
 class=3D"summaryTableDescription">
		 Tweens an array of targets from a common set of destination values (usin=
g the current
		 values as the destination), but staggers their start times by a specifie=
d amount of time,=20
		 creating an evenly-spaced sequence with a surprisingly small amount of c=
ode.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</td></tr><tr=
 class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;=
</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summa=
ryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://gre=
ensock.com/asdocs/com/greensock/TimelineLite.html#staggerFromTo()" class=3D=
"signatureLink">staggerFromTo</a>(targets:Array, duration:Number, fromVars:=
Object, toVars:Object, stagger:Number =3D 0, position:* =3D +=3D0, onComple=
teAll:Function =3D null, onCompleteAllParams:Array =3D null):*</div><div cl=
ass=3D"summaryTableDescription">
		 Tweens an array of targets from and to a common set of values, but stagg=
ers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code.</div></td><td class=3D"summaryTableOw=
nerCol">TimelineLite</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summar=
ySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineL=
ite.html#staggerTo()" class=3D"signatureLink">staggerTo</a>(targets:Array, =
duration:Number, vars:Object, stagger:Number, position:* =3D +=3D0, onCompl=
eteAll:Function =3D null, onCompleteAllParams:Array =3D null):*</div><div c=
lass=3D"summaryTableDescription">
		 Tweens an array of targets to a common set of destination values, but st=
aggers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code.</div></td><td class=3D"summaryTableOw=
nerCol">TimelineLite</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"=
#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summa=
ryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inhe=
ritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedS=
ummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summ=
arySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/core/An=
imation.html#startTime()" class=3D"signatureLink">startTime</a>(value:Numbe=
r):*</div><div class=3D"summaryTableDescription">=20
		 Gets or sets the time at which the animation begins on its parent timeli=
ne (after any delay
		 that was defined).</div></td><td class=3D"summaryTableOwnerCol"><a href=
=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Animati=
on</a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTabl=
ePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td=
><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a =
href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#stop()=
" class=3D"signatureLink">stop</a>():*</div><div class=3D"summaryTableDescr=
iption"> [deprecated] Pauses the timeline (used for consistency with Flash'=
s MovieClip.stop() functionality, but essentially accomplishes the same thi=
ng as pause() without the parameter) </div></td><td class=3D"summaryTableOw=
nerCol">TimelineLite</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"=
#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summa=
ryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inhe=
ritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedS=
ummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summ=
arySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/core/An=
imation.html#time()" class=3D"signatureLink">time</a>(value:Number, suppres=
sEvents:Boolean =3D false):*</div><div class=3D"summaryTableDescription">
		 Gets or sets the local position of the playhead (essentially the current=
 time),=20
		 described in seconds (or frames for frames-based animations) which
		 will never be less than 0 or greater than the animation's duration.</div=
></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/a=
sdocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr class=
=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddi=
ngCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"http=
s://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" tit=
le=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryT=
ableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greens=
ock.com/asdocs/com/greensock/core/Animation.html#timeScale()" class=3D"sign=
atureLink">timeScale</a>(value:Number):*</div><div class=3D"summaryTableDes=
cription">=20
		 Factor that's used to scale time in the animation where 1 =3D normal spe=
ed (the default),
		 0.5 =3D half speed, 2 =3D double speed, etc.</div></td><td class=3D"summ=
aryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"=
><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableI=
nheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=
=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock=
/TimelineLite.html#to()" class=3D"signatureLink">to</a>(target:Object, dura=
tion:Number, vars:Object, position:* =3D +=3D0):*</div><div class=3D"summar=
yTableDescription">
		 Adds a TweenLite.to() tween to the end of the timeline (or elsewhere usi=
ng the "position" parameter)
		  - this is a convenience method that accomplishes exactly the same thing=
 as=20
		 add( TweenLite.to(...) ) but with less code.</div></td><td class=3D"summ=
aryTableOwnerCol">TimelineLite</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF">=
<td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableIn=
heritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=
=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock=
/TimelineLite.html#totalDuration()" class=3D"signatureLink">totalDuration</=
a>(value:Number):*</div><div class=3D"summaryTableDescription">[override]=
=20
		 Gets the timeline's total duration or, if used as a setter, adjusts the =
timeline's=20
		 timeScale to fit it within the specified duration.</div></td><td class=
=3D"summaryTableOwnerCol">TimelineLite</td></tr><tr class=3D"hideInheritedM=
ethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td>=
<td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.com/=
asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" c=
lass=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol">=
<div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com=
/greensock/core/Animation.html#totalProgress()" class=3D"signatureLink">tot=
alProgress</a>(value:Number, suppressEvents:Boolean =3D false):*</div><div =
class=3D"summaryTableDescription">=20
		 Gets or sets the animation's total progress which is a value between 0 a=
nd 1 indicating the position=20
		 of the virtual playhead (including repeats) where 0 is at the beginning,=
 0.5 is=20
		 at the halfway point, and 1 is at the end (complete).</div></td><td clas=
s=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/gree=
nsock/core/Animation.html">Animation</a></td></tr><tr class=3D"hideInherite=
dMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</t=
d><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.co=
m/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited"=
 class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol=
"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/c=
om/greensock/core/Animation.html#totalTime()" class=3D"signatureLink">total=
Time</a>(time:Number, suppressEvents:Boolean =3D false, uncapped:Boolean =
=3D false):*</div><div class=3D"summaryTableDescription">
		 Gets or sets the position of the playhead according to the totalDuration
		 which includes any repeats and repeatDelays (only available=20
		 in TweenMax and TimelineMax).</div></td><td class=3D"summaryTableOwnerCo=
l"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.htm=
l">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"s=
ummaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">=
&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySign=
ature"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.h=
tml#usesFrames()" class=3D"signatureLink">usesFrames</a>():Boolean</div><di=
v class=3D"summaryTableDescription">=20
		 [READ-ONLY] If true, the timeline's timing mode is frames-based instead =
of
		 seconds.</div></td><td class=3D"summaryTableOwnerCol">TimelineLite</td><=
/tr></tbody></table></div><div class=3D"MainContent"><a name=3D"constructor=
Detail"></a><div class=3D"detailSectionHeader">Constructor Detail</div><a n=
ame=3D"TimelineLite()"></a><a name=3D"TimelineLite(Object)"></a><table clas=
s=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=
=3D"detailHeaderName">TimelineLite</td><td class=3D"detailHeaderParens">()<=
/td><td class=3D"detailHeaderType">Constructor</td></tr></tbody></table><di=
v class=3D"detailBody"><code>public function TimelineLite(vars:Object =3D n=
ull)</code><p></p><p>
		 Constructor.
		=20
		 </p><p><b>SPECIAL PROPERTIES</b></p>
		 <p>The following special properties may be passed in via the constructor=
's vars parameter, like
		 <code>new TimelineLite({paused:true, onComplete:myFunction})</code></p>
		=20
		 <ul>
		 	<li><b> delay </b>:<i> Number</i> -
		 				 Amount of delay in seconds (or frames for frames-based tweens) befo=
re the timeline should begin.</li>
		=20
		  <li><b> paused </b>:<i> Boolean</i> -
		 				 If <code>true</code>, the timeline will pause itself immediately up=
on creation (by default,=20
		 				 timelines automatically begin playing immediately). If you plan to =
create a TimelineLite and=20
		 				 then populate it later (after one or more frames elapse), it is typ=
ically best to set=20
		 				 <code>paused:true</code> and then <code>play()</code> after you pop=
ulate it.</li>
		 =09
		 	<li><b> onComplete </b>:<i> Function</i> -
		 				 A function that should be called when the timeline has completed</l=
i>
		 =09
		 	<li><b> onCompleteParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the <code>onComplete</code> function=
. For example,
		 				 <code>new TimelineLite({onComplete:myFunction, onCompleteParams:["p=
aram1", "param2"]});</code></li>
		 =09
		 	<li><b> useFrames </b>:<i> Boolean</i> -
		 				 If <code>useFrames</code> is <code>true</code>, the timelines's tim=
ing will be=20
		 				 based on frames instead of seconds because it is intially added to =
the root
		 				 frames-based timeline. This causes both its <code>duration</code>
		 				 and <code>delay</code> to be based on frames. An animations's timin=
g mode is=20
		 				 always determined by its parent <code>timeline</code>.</li>
		=20
		  <li><b> tweens </b>:<i> Array</i> -
		 				 To immediately insert several tweens into the timeline, use the <co=
de>tweens</code>=20
		 				 special property to pass in an Array of TweenLite/TweenMax/Timeline=
Lite/TimelineMax=20
		 				 instances. You can use this in conjunction with the <code>align</co=
de> and=20
		 				 <code>stagger</code> special properties to set up complex sequences=
 with minimal code.
		 				 These values simply get passed to the <code>add()</code> method.</l=
i>
		 =09
		 	<li><b> align </b>:<i> String</i> -
		 				 Only used in conjunction with the <code>tweens</code> special prope=
rty when multiple=20
		 				 tweens are	to be inserted immediately. The value simply gets passed=
 to the=20
		 				 <code>add()</code> method. The default is <code>"normal"</code>.=20
		 				 Options are:
		 					<ul>
		 						<li><b><code>"sequence"</code></b>: aligns the tweens one-after-th=
e-other in a sequence</li>
		 						<li><b><code>"start"</code></b>: aligns the start times of all of =
the tweens (ignores delays)</li>
		 						<li><b><code>"normal"</code></b>: aligns the start times of all th=
e tweens (honors delays)</li>
		 					</ul>
		 				The <code>align</code> special property does <b>not</b> force all ch=
ild=20
		 				tweens/timelines to maintain relative positioning, so for example, i=
f you use=20
		 				<code>"sequence"</code> and then later change the duration of one of=
 the nested tweens,=20
		 				it does <b>not</b> force all subsequent timelines to change their po=
sition.
		 				The <code>align</code> special property only affects the alignment o=
f the tweens that are
		 				initially placed into the timeline through the <code>tweens</code> s=
pecial property of=20
		 				the <code>vars</code> object.</li>
		 									=09
		 	<li><b> stagger </b>:<i> Number</i> -
		 				 Only used in conjunction with the <code>tweens</code> special prope=
rty when multiple=20
		 				 tweens are	to be inserted immediately. It staggers the tweens by a =
set amount of time=20
		 				 in seconds (or in frames if <code>useFrames</code> is true). For ex=
ample, if the=20
		 				 stagger value is 0.5 and the "align" property is set to <code>"star=
t"</code>, the=20
		 				 second tween will start 0.5 seconds after the first one starts, the=
n 0.5 seconds=20
		 				 later the third one will start, etc. If the align property is <code=
>"sequence"</code>,
		 				 there would be 0.5 seconds added between each tween. This value sim=
ply gets=20
		 				 passed to the <code>add()</code> method. Default is 0.</li>
		=20
		  <li><b> onStart </b>:<i> Function</i> -
		 				 A function that should be called when the timeline begins (when its=
 <code>time</code>
		 				 changes from 0 to some other value which can happen more than once =
if the=20
		 				 timeline is restarted multiple times).</li>
		 =09
		 	<li><b> onStartParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the <code>onStart</code> function. F=
or example,=20
		 				 <code>new TimelineLite({onStart:myFunction, onStartParams:["param1"=
, "param2"]});</code></li>
		 =09
		 	<li><b> onUpdate </b>:<i> Function</i> -
		 				 A function that should be called every time the timeline updates =
=20
		 				 (on every frame while the timeline is active)</li>
		 =09
		 	<li><b> onUpdateParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the <code>onUpdate</code> function. =
For example,
		 				 <code>new TimelineLite({onUpdate:myFunction, onUpdateParams:["param=
1", "param2"]});</code></li>
		 =09
		 	<li><b> onReverseComplete </b>:<i> Function</i> -
		 				 A function that should be called when the timeline has reached its =
beginning again from the=20
		 				 reverse direction. For example, if <code>reverse()</code> is called=
, the timeline will move
		 				 back towards its beginning and when its <code>time</code> reaches 0=
, <code>onReverseComplete</code>
		 				 will be called. This can also happen if the timeline is placed in a=
 TimelineLite or TimelineMax=20
		 				 instance that gets reversed and plays the timeline backwards to (or=
 past) the beginning.</li>
		 =09
		 	<li><b> onReverseCompleteParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the <code>onReverseComplete</code> f=
unction. For example,=20
		 				 <code>new TimelineLite({onReverseComplete:myFunction, onReverseComp=
leteParams:["param1", "param2"]});</code></li>
		=20
		 <li><b> autoRemoveChildren </b>:<i> Boolean</i> -
		 				If <code>autoRemoveChildren</code> is set to <code>true</code>, as s=
oon as child=20
		 				tweens/timelines complete, they will automatically get killed/remove=
d. This is normally=20
		 				undesireable because it prevents going backwards in time (like if yo=
u want to=20
		 				<code>reverse()</code> or set the <code>progress</code> lower, etc.)=
. It can, however,=20
		 				improve speed and memory management. The root timelines use <code>au=
toRemoveChildren:true</code>.</li>
		=20
		 <li><b> smoothChildTiming </b>:<i> Boolean</i> -
		 				Controls whether or not child tweens/timelines are repositioned auto=
matically=20
		 				(changing their <code>startTime</code>) in order to maintain smooth =
playback when=20
		 				properties are changed on-the-fly. For example, imagine that the tim=
eline's playhead is=20
		 				on a child tween that is 75% complete, moving mc.x from 0 to 100 and=
 then that tween's=20
		 				<code>reverse()</code> method is called. If <code>smoothChildTiming<=
/code> is <code>false</code>=20
		 				(the default except for the root timelines), the tween would flip in=
 place, keeping its=20
		 				<code>startTime</code> consistent. Therefore the playhead of the tim=
eline would now be=20
		 				at the tween's 25% completion point instead of 75%. Remember, the ti=
meline's playhead=20
		 				position and direction are unaffected by child tween/timeline change=
s. mc.x would jump=20
		 				from 75 to 25, but the tween's position in the timeline would remain=
 consistent. However,=20
		 				if <code>smoothChildTiming</code> is <code>true</code>, that child t=
ween's=20
		 				<code>startTime</code> would be adjusted so that the timeline's play=
head intersects=20
		 				with the same spot on the tween (75% complete) as it had immediately=
 before=20
		 				<code>reverse()</code> was called, thus playback appears perfectly s=
mooth. mc.x=20
		 				would still be 75 and it would continue from there as the playhead m=
oves on, but=20
		 				since the tween is reversed now mc.x will travel back towards 0 inst=
ead of 100.=20
		 				Ultimately it's a decision between prioritizing smooth on-the-fly pl=
ayback=20
		 				(<code>true</code>) or consistent position(s) of child tweens/timeli=
nes=20
		 				(<code>false</code>).=20
		=20
		 				Some examples of on-the-fly changes to child tweens/timelines that c=
ould cause their=20
		 				<code>startTime</code> to change when <code>smoothChildTiming</code>=
 is <code>true</code>=20
		 				are: <code>reversed, timeScale, progress, totalProgress, time, total=
Time, delay, pause,=20
		 				resume, duration,</code> and <code>totalDuration</code>.</li>
		 =09
		 	</ul>
		=20
		 <p></p><span class=3D"label"> Parameters </span><table cellpadding=3D"0"=
 cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><td><cod=
e><span class=3D"label">vars</span>:Object</code> (default =3D <code>null</=
code>)<code></code> =E2=80=94 optionally pass in special properties like <c=
ode>onComplete, onCompleteParams, onUpdate, onUpdateParams, onStart, onStar=
tParams, tweens, align, stagger, delay, useFrames,</code> and/or <code>auto=
RemoveChildren</code>.
		 </td></tr></tbody></table></div><a name=3D"methodDetail"></a><div class=
=3D"detailSectionHeader">Method Detail</div><a name=3D"add()"></a><a name=
=3D"add(any,any,String,Number)"></a><table class=3D"detailHeader" cellpaddi=
ng=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">add</t=
d><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">me=
thod</td></tr></tbody></table><div class=3D"detailBody"><code>override publ=
ic function add(value:*, position:* =3D +=3D0, align:String =3D normal, sta=
gger:Number =3D 0):*</code><p></p><p></p><p>
		 Adds a tween, timeline, callback, or label (or an array of them) to the =
timeline.=20
		=20
		 </p><p>The <code>position</code> parameter gives you complete control ov=
er the insertion point.
		 By default, it's at the end of the timeline. Use a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the object 2 seconds after=
 the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the object inserted exactly at the label or combine a label and =
a relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the object 2 seconds after "myLabe=
l" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tween=20
		 there which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//add a tween to the end of =
the timeline
tl.add( TweenLite.to(mc, 2, {x:100}) );
//add a callback at 1.5 seconds
tl.add(func, 1.5);=20
//add a label 2 seconds after the end of the timeline (with a gap of 2 seco=
nds)
tl.add("myLabel", "+=3D2");
//add another timeline at "myLabel"
tl.add(otherTimeline, "myLabel");=20
//add an array of tweens 2 seconds after "myLabel"
tl.add([tween1, tween2, tween3], "myLabel+=3D2");=20
//add an array of tweens so that they are sequenced one-after-the-other wit=
h 0.5 seconds inbetween them, starting 2 seconds after the end of the timel=
ine
tl.add([tween1, tween2, tween3], "+=3D2", "sequence", 0.5);
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:*</code> =E2=80=94 The tween, t=
imeline, callback, or label (or array of them) to add
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the object in the timeline (by default, it's the end of the timeline, like=
 "+=3D0"). Use a number to indicate an absolute time in terms of seconds (o=
r frames for frames-based timelines), or you can use a string with a "+=3D"=
 or "-=3D" prefix to offset the insertion point relative to the END of the =
timeline. For example, <code>"+=3D2"</code> would place the object 2 second=
s after the end, leaving a 2-second gap. <code>"-=3D2"</code> would create =
a 2-second overlap. You may also use a label like <code>"myLabel"</code> to=
 have the object inserted exactly at the label or combine a label and a rel=
ative offset like <code>"myLabel+=3D2"</code> to insert the object 2 second=
s after "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 seconds bef=
ore "myLabel". If you define a label that doesn't exist yet, it will <b>aut=
omatically be added to the end of the timeline</b> before inserting the twe=
en there which can be quite convenient.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">align</span>:String</code> (def=
ault =3D <code>normal</code>)<code></code> =E2=80=94 <b><i>[only relevant w=
hen the first parameter, <code>value</code>, is an array]</i></b> Determine=
s how the tweens/timelines/callbacks/labels in the array that is being adde=
d will be aligned in relation to each other before getting inserted. Option=
s are: <code>"sequence"</code> (aligns them one-after-the-other in a sequen=
ce), <code>"start"</code> (aligns the start times of all of the objects (ig=
noring delays)), and <code>"normal"</code> (aligns the start times of all t=
he tweens (honoring delays)). The default is <code>"normal"</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">stagger</span>:Number</code> (d=
efault =3D <code>0</code>)<code></code> =E2=80=94 <b><i>[only relevant when=
 the first parameter, <code>value</code>, is an array]</i></b> Staggers the=
 inserted objects from the array the is being added by a set amount of time=
 (in seconds) (or in frames for frames-based timelines). For example, if th=
e stagger value is 0.5 and the <code>"align"</code> parameter is set to <co=
de>"start"</code>, the second one will start 0.5 seconds after the first on=
e starts, then 0.5 seconds later the third one will start, etc. If the alig=
n property is <code>"sequence"</code>, there would be 0.5 seconds added bet=
ween each tween. Default is 0.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table></div><a name=3D"addLabel()"></a><a name=3D"ad=
dLabel(String,any)"></a><table class=3D"detailHeader" cellpadding=3D"0" cel=
lspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">addLabel</td><td c=
lass=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</t=
d><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=
=3D"detailBody"><code> public function addLabel(label:String, position:* =
=3D +=3D0):*</code><p></p><p></p><p>
		 Adds a label to the timeline, making it easy to mark important positions=
/times. You can then
		 reference that label in other methods, like <code>seek("myLabel")</code>=
 or <code>add(myTween, "myLabel")</code>
		 or <code>reverse("myLabel")</code>. You could also use the <code>add()</=
code> method to insert a label.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">label</span>:String</code> =E2=80=94 The name=
 of the label
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the label in the timeline (by default, it's the end of the timeline, like =
"+=3D0"). Use a number to indicate an absolute time in terms of seconds (or=
 frames for frames-based timelines), or you can use a string with a "+=3D" =
or "-=3D" prefix to offset the insertion point relative to the END of the t=
imeline. For example, <code>"+=3D2"</code> would place the label 2 seconds =
after the end, leaving a 2-second gap. <code>"-=3D2"</code> would create a =
2-second overlap. You may also use a label like <code>"myLabel"</code> to h=
ave the label inserted exactly at the label or combine a label and a relati=
ve offset like <code>"myLabel+=3D2"</code> to insert the label 2 seconds af=
ter "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 seconds before =
"myLabel". If you define a label that doesn't exist yet, it will <b>automat=
ically be added to the end of the timeline</b> before inserting the label t=
here which can be quite convenient.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code></td></tr></tbody></table></div><a name=
=3D"addPause()"></a><a name=3D"addPause(any,Function,Array)"></a><table cla=
ss=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td clas=
s=3D"detailHeaderName">addPause</td><td class=3D"detailHeaderParens">()</td=
><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">&=
nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> public func=
tion addPause(position:* =3D +=3D0, callback:Function =3D null, params:Arra=
y =3D null):*</code><p></p><p></p><p>
		 Inserts a special callback that pauses playback of the timeline at a
		 particular time or label. This method is more accurate than using a simp=
le callback of your own because=20
		 it ensures that even if the virtual playhead had moved slightly beyond t=
he pause position, it'll get moved
		 back to precisely the correct position.=20
		=20
		 </p><p>Remember, the virtual playhead moves to a new position on each ti=
ck (frame) of the core timing mechanism,=20
		 so it is possible, for example for it to be at 0.99 and then the next re=
nder happens at 1.01, so if your
		 callback was at exactly 1 second, the playhead would (in this example) m=
ove slightly past where you wanted to
		 pause. Then, if you reverse(), it would run into that callback again and=
 get paused almost immediately. However,=20
		 if you use the <code>addPause()</code> method, it will calibrate things =
so that when the callback is=20
		 hit, it'll move the playhead back to <b>EXACTLY</b> where it should be. =
Thus, if you reverse()
		 it won't run into the same callback again.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//insert a pause at exactly =
2 seconds into the timeline
timeline.addPause(2);
=20
//insert a pause at "yourLabel"
timeline.addPause("yourLabel");
=20
//insert a pause 3 seconds after "yourLabel" and when that pause occurs, ca=
ll yourFunction
timeline.addPause("yourLabel+=3D3", yourFunction);
=20
//insert a pause at exactly 4 seconds and then call yourFunction and pass i=
t 2 parameters, "param1" and "param2"
timeline.addPause(4, yourFunction, ["param1", "param2"]);
</pre></div>
		=20
		 <p>The special callback is just a zero-duration tween that utilizes an o=
nComplete, so technically=20
		 this callback is just like any other, and it is considered a child of th=
e timeline.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">position</span>:*</code> (default =3D <code>=
+=3D0</code>)<code></code> =E2=80=94 Controls the placement of the pause in=
 the timeline (by default, it's the end of the timeline, like "+=3D0"). Use=
 a number to indicate an absolute time in terms of seconds (or frames for f=
rames-based timelines), or you can use a string with a "+=3D" or "-=3D" pre=
fix to offset the insertion point relative to the END of the timeline. For =
example, <code>"+=3D2"</code> would place the tween 2 seconds after the end=
, leaving a 2-second gap. <code>"-=3D2"</code> would create a 2-second over=
lap. You may also use a label like <code>"myLabel"</code> to have the tween=
 inserted exactly at the label or combine a label and a relative offset lik=
e <code>"myLabel+=3D2"</code> to insert the tween 2 seconds after "myLabel"=
 or <code>"myLabel-=3D3"</code> to insert it 3 seconds before "myLabel". If=
 you define a label that doesn't exist yet, it will <b>automatically be add=
ed to the end of the timeline</b> before inserting the tween there which ca=
n be quite convenient.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">callback</span>:Function</code>=
 (default =3D <code>null</code>)<code></code> =E2=80=94 An optional callbac=
k that should be called immediately after the timeline is paused.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">params</span>:Array</code> (def=
ault =3D <code>null</code>)<code></code> =E2=80=94 An optional array of par=
ameters to pass the callback.=20
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#call()" target=3D"">call()</a></div></div><a name=3D"call=
()"></a><a name=3D"call(Function,Array,any)"></a><table class=3D"detailHead=
er" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeade=
rName">call</td><td class=3D"detailHeaderParens">()</td><td class=3D"detail=
HeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbo=
dy></table><div class=3D"detailBody"><code> public function call(callback:F=
unction, params:Array =3D null, position:* =3D +=3D0):*</code><p></p><p></p=
><p>
		 Adds a callback to the end of the timeline (or elsewhere using the "posi=
tion" parameter)
		  - this is a convenience method that accomplishes exactly the same thing=
 as=20
		 <code>add( TweenLite.delayedCall(...) )</code> but with less code. In ot=
her=20
		 words, the following two lines produce identical results:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>myTimeline.add( TweenLit=
e.delayedCall(0, myFunction, ["param1", "param2"]) );
myTimeline.call(myFunction, ["param1", "param2"]);
</pre></div>
		 <p>This is different than using the <code>onComplete</code> special prop=
erty
		 on the TimelineLite itself because once you append the callback, it stay=
s in=20
		 place whereas an <code>onComplete</code> is always called at the very en=
d of=20
		 the timeline. For example, if a timeline is populated with a 1-second tw=
een and=20
		 then you <code>call(myFunction)</code>, it is placed at the 1-second spo=
t. Then=20
		 if you append another 1-second tween, the timeline's duration will now b=
e 2 seconds=20
		 but the myFunction callback will still be called at the 1-second spot. A=
n=20
		 <code>onComplete</code> would be called at the end (2 seconds).</p>
		=20
		 <p>Keep in mind that you can chain these calls together and use other co=
nvenience=20
		 methods like <code>to(), fromTo(), set(), staggerTo()</code>, etc. to bu=
ild out=20
		 sequences very quickly:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//create a timeline that cal=
ls myFunction() when it completes
var tl:TimelineLite =3D new TimelineLite({onComplete:myFunction});
//now we'll use chaining, but break each step onto a different line for rea=
dability...
tl.to(mc, 1, {x:100})    //tween mc.x to 100
  .call(myCallback)        //then call myCallback()
  .set(mc, {alpha:0})    //then set mc.alpha to 0.5 immediately
  .call(otherFunction, ["param1", "param2"])    //then call otherFunction("=
param1", "param2")
  .staggerTo([mc1, mc2, mc3], 1.5, {rotation:45}, 0.25); //finally tween th=
e rotation of mc1, mc2, and mc3 to 45 and stagger the start times by 0.25 s=
econds
</pre></div>
		=20
		 <p>The 3rd parameter is the <code>position</code> which controls the pla=
cement of the
		 tween in the timeline (by default, it's at the end of the timeline). Use=
 a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the tween 2 seconds after =
the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the tween inserted exactly at the label or combine a label and a=
 relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the tween 2 seconds after "myLabel=
" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tween=20
		 which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>tl.call(func, ["param1"]);  =
//appends to the end of the timeline
tl.call(func, ["param1"], 2);  //appends it at exactly 2 seconds into the t=
imeline (absolute position)
tl.call(func, ["param1"], "+=3D2");  //appends it 2 seconds after the end (=
with a gap of 2 seconds)
tl.call(func, ["param1"], "myLabel");  //places it at "myLabel" (and if "my=
Label" doesn't exist yet, it's added to the end and then the tween is inser=
ted there)
tl.call(func, ["param1"], "myLabel+=3D2");  //places it 2 seconds after "my=
Label"
</pre></div>
		=20
		 <p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 d=
on't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions the 3rd parameter is <code>scope</code>, but that parameter is =
omitted in the AS3 version.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">callback</span>:Function</code> =E2=80=94 Fu=
nction to call
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">params</span>:Array</code> (def=
ault =3D <code>null</code>)<code></code> =E2=80=94 An Array of parameters t=
o pass the function.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the callback in the timeline (by default, it's the end of the timeline, li=
ke "+=3D0"). Use a number to indicate an absolute time in terms of seconds =
(or frames for frames-based timelines), or you can use a string with a "+=
=3D" or "-=3D" prefix to offset the insertion point relative to the END of =
the timeline. For example, <code>"+=3D2"</code> would place the callback 2 =
seconds after the end, leaving a 2-second gap. <code>"-=3D2"</code> would c=
reate a 2-second overlap. You may also use a label like <code>"myLabel"</co=
de> to have the callback inserted exactly at the label or combine a label a=
nd a relative offset like <code>"myLabel+=3D2"</code> to insert the callbac=
k 2 seconds after "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 s=
econds before "myLabel". If you define a label that doesn't exist yet, it w=
ill <b>automatically be added to the end of the timeline</b> before inserti=
ng the callback there which can be quite convenient.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#add()" target=3D"">add()</a><br><a href=3D"https://greens=
ock.com/asdocs/com/greensock/TimelineLite.html#remove()" target=3D"">remove=
()</a></div></div><a name=3D"clear()"></a><a name=3D"clear(Boolean)"></a><t=
able class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr>=
<td class=3D"detailHeaderName">clear</td><td class=3D"detailHeaderParens">(=
)</td><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRu=
le">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> public=
 function clear(labels:Boolean =3D true):*</code><p></p><p></p><p>
		 Empties the timeline of all tweens, timelines, and callbacks (and option=
ally labels too).
		 Event callbacks (like onComplete, onUpdate, onStart, etc.) are not remov=
ed. If you need=20
		 to remove event callbacks, use the <code>eventCallback()</code> method a=
nd set them to null
		 like <code>myTimeline.eventCallback("onComplete", null);</code>
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">labels</span>:Boolean</code> (default =3D <co=
de>true</code>)<code></code> =E2=80=94 If <code>true</code> (the default), =
labels will be cleared too.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table></div><a name=3D"duration()"></a><a name=3D"du=
ration(Number)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspa=
cing=3D"0"><tbody><tr><td class=3D"detailHeaderName">duration</td><td class=
=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><t=
d class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"=
detailBody"><code>override public function duration(value:Number):*</code><=
p></p><p></p><p>
		 Gets the timeline's <code>duration</code> or, if used as a setter, adjus=
ts the timeline's=20
		 <code>timeScale</code> to fit it within the specified duration. <code>du=
ration()</code> is identical
		 to <code>totalDuration()</code> except for TimelineMax instances that ha=
ve a non-zero <code>repeat</code>=20
		 in which case <code>totalDuration</code> includes repeats and repeatDela=
ys whereas <code>duration</code> doesn't.=20
		 For example, if a TimelineMax instance has a <code>duration</code> of 2 =
and a <code>repeat</code> of 3,=20
		 its <code>totalDuration</code> would be 8 (one standard play plus 3 repe=
ats equals 4 total cycles).=20
		=20
		 </p><p>Due to the fact that a timeline's <code>duration</code> is dictat=
ed by its contents,=20
		 using this method as a setter will simply cause the <code>timeScale</cod=
e> to be adjusted
		 to fit the current contents into the specified <code>duration</code>, bu=
t the <code>duration</code>=20
		 value itself will remain unchanged. For example, if there are 20-seconds=
 worth of tweens in the timeline=20
		 and you do <code>myTimeline.duration(10)</code>, the <code>timeScale</co=
de> would be changed to 2.=20
		 If you checked the <code>duration</code> again immediately after that, i=
t would still return 20 because=20
		 technically that is how long all the child tweens/timelines are but upon=
 playback the speed would=20
		 be doubled because of the <code>timeScale</code>.</p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myAnimation.duration(2).play(1);<=
/code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre> var currentDuration =3D myA=
nimation.duration(); //gets current duration
 myAnimation.duration( 10 ); //adjusts the timeScale of myAnimation so that=
 it fits into exactly 10 seconds on its parent timeline
         </pre></div>
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#totalDuration()" target=3D"">totalDuration()</a><br><a hr=
ef=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#timeScal=
e()" target=3D"">timeScale()</a></div></div><a name=3D"exportRoot()"></a><a=
 name=3D"exportRoot(Object,Boolean)"></a><table class=3D"detailHeader" cell=
padding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">e=
xportRoot</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHe=
aderType">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody=
></table><div class=3D"detailBody"><code> public static function exportRoot=
(vars:Object =3D null, omitDelayedCalls:Boolean =3D true):<a href=3D"https:=
//greensock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></c=
ode><p></p><p></p><p>
		 Seamlessly transfers all tweens, timelines, and [optionally] delayed cal=
ls from the root=20
		 timeline into a new TimelineLite so that you can perform advanced tasks =
on a seemingly global=20
		 basis without affecting tweens/timelines that you create after the expor=
t. For example, imagine
		 a game that uses the GreenSock Animation Platform for all of its animati=
ons and at some point
		 during the game, you want to slow everything down to a stop (tweening th=
e=20
		 <code>timeScale</code>) while at the same time animating a new popup win=
dow into place:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var tl =3D TimelineLite.=
exportRoot();
TweenLite.to(tl, 0.5, {timeScale:0});
//this tween isn't affected because it's created after the export.
TweenLite.fromTo(myWindow, 1, {scaleX:0, scaleY:0}, {scaleX:1, scaleY:1});
</pre></div>
		 <p>You could then re-animate things when you're ready by tweening the <c=
ode>timeScale</code>
		 back to 1. Or you could use <code>exportRoot()</code> to collect all the=
 animations and=20
		 <code>pause()</code> them and then animate the popup screen (or whatever=
). Then <code>resume()</code>
		 that instance or even <code>reverse()</code>.</p>
		=20
		 <p>You can <code>exportRoot()</code> as many times as you want; all it d=
oes is wrap all the=20
		 loose tweens/timelines/delayedCalls into a TimelineLite which itself get=
s placed onto the root,=20
		 so if you <code>exportRoot()</code> again, that TimelineLite would get w=
rapped into another one,
		 etc. Things can be nested as deeply as you want.</p>
		=20
		 <p>Keep in mind, however, that completed tweens/timelines are removed fr=
om the root (for automatic=20
		 garbage collection), so if you <code>exportRoot()</code> after a tween c=
ompletes, it won't be=20
		 included in the export. The only way around that is to set <code>autoRem=
oveChildren</code>
		 property of the <code>Animation._rootTimeline</code> and <code>Animation=
._rootFramesTimeline</code>
		 to <code>false</code>, but that is <b>NOT</b> recommended because you'd =
need to
		 manually <code>kill()</code> your tweens/timelines manually to make them=
 eligible for=20
		 garbage collection.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">vars</span>:Object</code> (default =3D <code=
>null</code>)<code></code> =E2=80=94 The <code>vars</code> parameter that's=
 passed to the TimelineLite's constructor which allows you to define things=
 like onUpdate, onComplete, etc. The <code>useFrames</code> special propert=
y determines which root timeline gets exported. There are two distinct root=
 timelines - one for frames-based animations (<code>useFrames:true</code>) =
and one for time-based ones. By default, the time-based timeline is exporte=
d.=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">omitDelayedCalls</span>:Boolean=
</code> (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>tru=
e</code> (the default), delayed calls will be left on the root rather than =
wrapped into the new TimelineLite. That way, if you <code>pause()</code> or=
 alter the <code>timeScale</code>, or <code>reverse()</code>, they won't be=
 affected. However, in some situations it might be very useful to have them=
 included.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TimelineLite.html">TimelineLite</a></code> =E2=80=94 A new TimelineL=
ite instance containing the root tweens/timelines
		 </td></tr></tbody></table></div><a name=3D"from()"></a><a name=3D"from(O=
bject,Number,Object,any)"></a><table class=3D"detailHeader" cellpadding=3D"=
0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">from</td><td=
 class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method<=
/td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div cla=
ss=3D"detailBody"><code> public function from(target:Object, duration:Numbe=
r, vars:Object, position:* =3D +=3D0):*</code><p></p><p></p><p>
		 Adds a <code>TweenLite.from()</code> tween to the end of the timeline (o=
r elsewhere using the "position" parameter)
		 - this is a convenience method that accomplishes exactly the same thing =
as=20
		 <code>add( TweenLite.from(...) )</code> but with less code. In other=20
		 words, the following two lines produce identical results:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>myTimeline.add( TweenLit=
e.from(mc, 1, {x:100, alpha:0.5}) );
myTimeline.from(mc, 1, {x:100, alpha:0.5});
</pre></div>
		 <p>Keep in mind that you can chain these calls together and use other co=
nvenience=20
		 methods like <code>to(), call(), set(), staggerTo()</code>, etc. to buil=
d out=20
		 sequences very quickly:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//create a timeline that cal=
ls myFunction() when it completes
var tl:TimelineLite =3D new TimelineLite({onComplete:myFunction});
//now we'll use chaining, but break each step onto a different line for rea=
dability...
tl.from(mc, 1, {x:-100})    //tween mc.x from -100
  .to(mc, 1, {y:50})    //then tween mc.y to 50
  .set(mc, {alpha:0})    //then set mc.alpha to 0.5 immediately
  .call(otherFunction)    //then call otherFunction()
  .staggerTo([mc1, mc2, mc3], 1.5, {rotation:45}, 0.25); //finally tween th=
e rotation of mc1, mc2, and mc3 to 45 and stagger the start times by 0.25 s=
econds
</pre></div>
		 <p>If you don't want to append the tween and would rather have precise c=
ontrol
		 of the insertion point, you can use the additional <code>position</code>=
 parameter.=20
		 Or use a regular <code>add()</code> like=20
		 <code>myTimeline.add( TweenLite.from(mc, 1, {x:100}), 2.75)</code>.</p>
		=20
		 <p>The 4th parameter is the <code>position</code> which controls the pla=
cement of the
		 tween in the timeline (by default, it's at the end of the timeline). Use=
 a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the tween 2 seconds after =
the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the tween inserted exactly at the label or combine a label and a=
 relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the tween 2 seconds after "myLabel=
" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tween=20
		 there which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>tl.from(mc, 1, {x:100});  //=
appends to the end of the timeline
tl.from(mc, 1, {x:100}, 2);  //appends it at exactly 2 seconds into the tim=
eline (absolute position)
tl.from(mc, 1, {x:100}, "+=3D2");  //appends it 2 seconds after the end (wi=
th a gap of 2 seconds)
tl.from(mc, 1, {x:100}, "myLabel");  //places it at "myLabel" (and if "myLa=
bel" doesn't exist yet, it's added to the end and then the tween is inserte=
d there)
tl.from(mc, 1, {x:100}, "myLabel+=3D2");  //places it 2 seconds after "myLa=
bel"
</pre></div>
		=20
		 <p><b>NOTE:</b> By default, <code>immediateRender</code> is <code>true</=
code> in=20
		 <code>from()</code> tweens, meaning that they immediately render their s=
tarting state=20
		 regardless of any delay that is specified. You can override this behavio=
r by passing=20
		 <code>immediateRender:false</code> in the <code>vars</code> parameter so=
 that it will=20
		 wait to render until the tween actually begins.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target=
 object (or array of objects) whose properties the tween affects=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if the timeline is frames-based)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the starting value for each property that should =
be tweened as well as any special properties like <code>onComplete</code>, =
<code>ease</code>, etc. For example, to tween <code>mc.x</code> from 100 an=
d <code>mc.y</code> from 200 and then call <code>myFunction</code>, do this=
: <code>myTimeline.from(mc, 1, {x:100, y:200, onComplete:myFunction});</cod=
e>
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the tween in the timeline (by default, it's the end of the timeline, like =
"+=3D0"). Use a number to indicate an absolute time in terms of seconds (or=
 frames for frames-based timelines), or you can use a string with a "+=3D" =
or "-=3D" prefix to offset the insertion point relative to the END of the t=
imeline. For example, <code>"+=3D2"</code> would place the tween 2 seconds =
after the end, leaving a 2-second gap. <code>"-=3D2"</code> would create a =
2-second overlap. You may also use a label like <code>"myLabel"</code> to h=
ave the tween inserted exactly at the label or combine a label and a relati=
ve offset like <code>"myLabel+=3D2"</code> to insert the tween 2 seconds af=
ter "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 seconds before =
"myLabel". If you define a label that doesn't exist yet, it will <b>automat=
ically be added to the end of the timeline</b> before inserting the tween t=
here which can be quite convenient.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#to()" target=3D"">to()</a><br><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TimelineLite.html#fromTo()" target=3D"">fromTo()=
</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.=
html#add()" target=3D"">add()</a><br><a href=3D"https://greensock.com/asdoc=
s/com/greensock/TimelineLite.html#remove()" target=3D"">remove()</a></div><=
/div><a name=3D"fromTo()"></a><a name=3D"fromTo(Object,Number,Object,Object=
,any)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0=
"><tbody><tr><td class=3D"detailHeaderName">fromTo</td><td class=3D"detailH=
eaderParens">()</td><td class=3D"detailHeaderType">method</td><td class=3D"=
detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"=
><code> public function fromTo(target:Object, duration:Number, fromVars:Obj=
ect, toVars:Object, position:* =3D +=3D0):*</code><p></p><p></p><p>
		 Adds a <code>TweenLite.fromTo()</code> tween to the end of the timeline =
- this is=20
		 a convenience method that accomplishes exactly the same thing as=20
		 <code>add( TweenLite.fromTo(...) )</code> but with less code. In other=
=20
		 words, the following two lines produce identical results:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>myTimeline.add( TweenLit=
e.fromTo(mc, 1, {x:0, alpha:1}, {x:100, alpha:0.5}) );
myTimeline.fromTo(mc, 1, {x:0, alpha:1}, {x:100, alpha:0.5});
</pre></div>
		 <p>Keep in mind that you can chain these calls together and use other co=
nvenience=20
		 methods like <code>to(), call(), set(), staggerTo()</code>, etc. to buil=
d out=20
		 sequences very quickly:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//create a timeline that cal=
ls myFunction() when it completes
var tl:TimelineLite =3D new TimelineLite({onComplete:myFunction});
//now we'll use chaining, but break each step onto a different line for rea=
dability...
tl.fromTo(mc, 1, {x:0}, {x:-100})    //tween mc.x from 0 to -100
  .to(mc, 1, {y:50}, "-=3D0.25")        //then tween mc.y to 50, starting i=
t 0.25 seconds before the previous tween ends
  .set(mc, {alpha:0})            //then set mc.alpha to 0.5 immediately
  .call(otherFunction)            //then call otherFunction()
  .staggerTo([mc1, mc2, mc3], 1.5, {rotation:45}, 0.25); //finally tween th=
e rotation of mc1, mc2, and mc3 to 45 and stagger the start times by 0.25 s=
econds
</pre></div>
		 <p>If you don't want to append the tween and would rather have precise c=
ontrol
		 of the insertion point, you can use the additional <code>position</code>=
 parameter.=20
		 Or use a regular <code>add()</code> like=20
		 <code>myTimeline.add( TweenLite.fromTo(mc, 1, {x:0}, {x:100}), 2.75)</co=
de>.</p>
		=20
		 <p>The 4th parameter is the <code>position</code> which controls the pla=
cement of the
		 tween in the timeline (by default, it's at the end of the timeline). Use=
 a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the tween 2 seconds after =
the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the tween inserted exactly at the label or combine a label and a=
 relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the tween 2 seconds after "myLabel=
" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tween=20
		 there which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>tl.fromTo(mc, 1, {x:0}, {x:1=
00});  //appends to the end of the timeline
tl.fromTo(mc, 1, {x:0}, {x:100}, 2);  //appends it at exactly 2 seconds int=
o the timeline (absolute position)
tl.fromTo(mc, 1, {x:0}, {x:100}, "+=3D2");  //appends it 2 seconds after th=
e end (with a gap of 2 seconds)
tl.fromTo(mc, 1, {x:0}, {x:100}, "myLabel");  //places it at "myLabel" (and=
 if "myLabel" doesn't exist yet, it's added to the end and then the tween i=
s inserted there)
tl.fromTo(mc, 1, {x:0}, {x:100}, "myLabel+=3D2");  //places it 2 seconds af=
ter "myLabel"
</pre></div>
		 <p><b>NOTE:</b> by default, <code>immediateRender</code> is <code>true</=
code> in=20
		 <code>fromTo()</code> tweens, meaning that they immediately render their=
 starting state=20
		 regardless of any delay that is specified. This is done for convenience =
because it is=20
		 often the preferred behavior when setting things up on the screen to ani=
mate into place, but=20
		 you can override this behavior by passing <code>immediateRender:false</c=
ode> in the=20
		 <code>fromVars</code> or <code>toVars</code> parameter so that it will w=
ait to render=20
		 the starting values until the tweens actually begin.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target=
 object (or array of objects) whose properties the tween affects
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if the timeline is frames-based)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">fromVars</span>:Object</code> =
=E2=80=94 An object defining the starting value for each property that shou=
ld be tweened. For example, to tween <code>mc.x</code> from 100 and <code>m=
c.y</code> from 200, <code>fromVars</code> would look like this: <code>{x:1=
00, y:200}</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">toVars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>onComplete</code>, <code=
>ease</code>, etc. For example, to tween <code>mc.x</code> from 0 to 100 an=
d <code>mc.y</code> from 0 to 200 and then call <code>myFunction</code>, do=
 this: <code>myTimeline.fromTo(mc, 1, {x:0, y:0}, {x:100, y:200, onComplete=
:myFunction});</code>
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the tween in the timeline (by default, it's the end of the timeline, like =
"+=3D0"). Use a number to indicate an absolute time in terms of seconds (or=
 frames for frames-based timelines), or you can use a string with a "+=3D" =
or "-=3D" prefix to offset the insertion point relative to the END of the t=
imeline. For example, <code>"+=3D2"</code> would place the tween 2 seconds =
after the end, leaving a 2-second gap. <code>"-=3D2"</code> would create a =
2-second overlap. You may also use a label like <code>"myLabel"</code> to h=
ave the tween inserted exactly at the label or combine a label and a relati=
ve offset like <code>"myLabel+=3D2"</code> to insert the tween 2 seconds af=
ter "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 seconds before =
"myLabel". If you define a label that doesn't exist yet, it will <b>automat=
ically be added to the end of the timeline</b> before inserting the tween t=
here which can be quite convenient.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#to()" target=3D"">to()</a><br><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TimelineLite.html#from()" target=3D"">from()</a>=
<br><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html=
#add()" target=3D"">add()</a><br><a href=3D"https://greensock.com/asdocs/co=
m/greensock/TimelineLite.html#remove()" target=3D"">remove()</a></div></div=
><a name=3D"getChildren()"></a><a name=3D"getChildren(Boolean,Boolean,Boole=
an,Number)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"detailHeaderName">getChildren</td><td class=
=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><t=
d class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"=
detailBody"><code> public function getChildren(nested:Boolean =3D true, twe=
ens:Boolean =3D true, timelines:Boolean =3D true, ignoreBeforeTime:Number =
=3D -9999999999):Array</code><p></p><p></p><p>
		 Returns an array containing all the tweens and/or timelines nested in th=
is timeline.
		 Callbacks (delayed calls) are considered zero-duration tweens.
		 =20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">nested</span>:Boolean</code> (default =3D <co=
de>true</code>)<code></code> =E2=80=94 Determines whether or not tweens and=
/or timelines that are inside nested timelines should be returned. If you o=
nly want the "top level" tweens/timelines, set this to <code>false</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">tweens</span>:Boolean</code> (d=
efault =3D <code>true</code>)<code></code> =E2=80=94 Determines whether or =
not tweens (TweenLite and TweenMax instances) should be included in the res=
ults
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">timelines</span>:Boolean</code>=
 (default =3D <code>true</code>)<code></code> =E2=80=94 Determines whether =
or not timelines (TimelineLite and TimelineMax instances) should be include=
d in the results
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">ignoreBeforeTime</span>:Number<=
/code> (default =3D <code>-9999999999</code>)<code></code> =E2=80=94 All ch=
ildren with start times that are less than this value will be ignored.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Array</code> =E2=80=94 an Array containing the =
child tweens/timelines.
		 </td></tr></tbody></table></div><a name=3D"getLabelTime()"></a><a name=
=3D"getLabelTime(String)"></a><table class=3D"detailHeader" cellpadding=3D"=
0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">getLabelTime=
</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType"=
>method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table>=
<div class=3D"detailBody"><code> public function getLabelTime(label:String)=
:Number</code><p></p><p></p><p>
		 Returns the time associated with a particular label. If the label isn't =
found, -1 is returned.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">label</span>:String</code> =E2=80=94 Label na=
me
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Number</code> =E2=80=94 Time associated with th=
e label (or -1 if there is no such label)
		 </td></tr></tbody></table></div><a name=3D"getTweensOf()"></a><a name=3D=
"getTweensOf(Object,Boolean)"></a><table class=3D"detailHeader" cellpadding=
=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">getTween=
sOf</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderTy=
pe">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></tab=
le><div class=3D"detailBody"><code> public function getTweensOf(target:Obje=
ct, nested:Boolean =3D true):Array</code><p></p><p></p><p>
		 Returns the tweens of a particular object that are inside this timeline.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">target</span>:Object</code> =E2=80=94 The tar=
get object of the tweens
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">nested</span>:Boolean</code> (d=
efault =3D <code>true</code>)<code></code> =E2=80=94 Determines whether or =
not tweens that are inside nested timelines should be returned. If you only=
 want the "top level" tweens/timelines, set this to false.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Array</code> =E2=80=94 an Array of TweenLite an=
d/or TweenMax instances
		 </td></tr></tbody></table></div><a name=3D"invalidate()"></a><table clas=
s=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=
=3D"detailHeaderName">invalidate</td><td class=3D"detailHeaderParens">()</t=
d><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">=
&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code>override pu=
blic function invalidate():*</code><p></p><p></p><p> =20
		 Clears any initialization data (like starting/ending values in tweens) w=
hich can be useful if, for example,=20
		 you want to restart a tween without reverting to any previously recorded=
 starting values. When you <code>invalidate()</code>=20
		 an animation, it will be re-initialized the next time it renders and its=
 <code>vars</code> object will be re-parsed.=20
		 The timing of the animation (duration, startTime, delay) will not be aff=
ected.
		=20
		 </p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:1=
00, y:100})</code> that ran when mc.x and mc.y=20
		 were initially at 0, but now mc.x and mc.y are 200 and you want them twe=
en to 100 again, you could simply=20
		 <code>invalidate()</code> the tween and <code>restart()</code> it. Witho=
ut invalidating first, restarting it=20
		 would cause the values jump back to 0 immediately (where they started wh=
en the tween originally began).=20
		 When you invalidate a TimelineLite/TimelineMax, it automatically invalid=
ates all of its children.</p>
		 <p></p><p></p><span class=3D"label">Returns</span><table cellpadding=3D"=
0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20"></td><td><cod=
e>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table></div><a name=3D"remove()"></a><a name=3D"remo=
ve(any)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"detailHeaderName">remove</td><td class=3D"detai=
lHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td class=
=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailB=
ody"><code> public function remove(value:*):*</code><p></p><p></p><p>
		 Removes a tween, timeline, callback, or label (or array of them) from th=
e timeline.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">value</span>:*</code> =E2=80=94 The tween, ti=
meline, callback, or label that should be removed from the timeline (or an =
array of them)
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table></div><a name=3D"removeLabel()"></a><a name=3D=
"removeLabel(String)"></a><table class=3D"detailHeader" cellpadding=3D"0" c=
ellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">removeLabel</td>=
<td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">meth=
od</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div =
class=3D"detailBody"><code> public function removeLabel(label:String):*</co=
de><p></p><p></p><p>
		=20
		 Removes a label from the timeline and returns the time of that label. Yo=
u could=20
		 also use the <code>remove()</code> method to accomplish the same task.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">label</span>:String</code> =E2=80=94 The name=
 of the label to remove
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Time associated with the lab=
el that was removed
		 </td></tr></tbody></table></div><a name=3D"seek()"></a><a name=3D"seek(a=
ny,Boolean)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacin=
g=3D"0"><tbody><tr><td class=3D"detailHeaderName">seek</td><td class=3D"det=
ailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td class=
=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailB=
ody"><code>override public function seek(position:*, suppressEvents:Boolean=
 =3D true):*</code><p></p><p></p><p>
		 Jumps to a specific time (or label) without affecting whether or not the=
 instance=20
		 is paused or reversed.
		=20
		 </p><p>If there are any events/callbacks inbetween where the playhead wa=
s and the new time,=20
		 they will not be triggered because by default <code>suppressEvents</code=
> (the 2nd parameter)=20
		 is <code>true</code>. Think of it like picking the needle up on a record=
 player and moving it=20
		 to a new position before placing it back on the record. If, however, you=
 do not want the=20
		 events/callbacks suppressed during that initial move, simply set the <co=
de>suppressEvents</code>=20
		 parameter to <code>false</code>.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//jumps to exactly 2 seconds
myAnimation.seek(2);
=20
//jumps to exactly 2 seconds but doesn't suppress events during the initial=
 move:
myAnimation.seek(2, false);
//jumps to the "myLabel" label
myAnimation.seek("myLabel");
         </pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">position</span>:*</code> =E2=80=94 The posit=
ion to go to, described in any of the following ways: a numeric value indic=
ates an absolute position, like 3 would be exactly 3 seconds from the begin=
ning of the timeline. A string value can be either a label (i.e. "myLabel")=
 or a relative value using the "+=3D" or "-=3D" prefixes like "-=3D2" (2 se=
conds before the end of the timeline) or a combination like "myLabel+=3D2" =
to indicate 2 seconds after "myLabel".
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">suppressEvents</span>:Boolean</=
code> (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>true<=
/code> (the default), no events or callbacks will be triggered when the pla=
yhead moves to the new position defined in the <code>time</code> parameter.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#time()" target=3D"">time()</a><br><a href=3D"https://gree=
nsock.com/asdocs/com/greensock/TimelineLite.html#totalTime()" target=3D"">t=
otalTime()</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/Tim=
elineLite.html#play()" target=3D"">play()</a><br><a href=3D"https://greenso=
ck.com/asdocs/com/greensock/TimelineLite.html#reverse()" target=3D"">revers=
e()</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLi=
te.html#pause()" target=3D"">pause()</a></div></div><a name=3D"set()"></a><=
a name=3D"set(Object,Object,any)"></a><table class=3D"detailHeader" cellpad=
ding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">set<=
/td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">=
method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><=
div class=3D"detailBody"><code> public function set(target:Object, vars:Obj=
ect, position:* =3D +=3D0):*</code><p></p><p></p><p>
		 Adds a zero-duration tween to the end of the timeline (or elsewhere usin=
g the "position" parameter)
		 that sets values immediately (when the virtual playhead reaches that pos=
ition
		 on the timeline) - this is a convenience method that accomplishes exactl=
y=20
		 the same thing as <code>add( TweenLite.to(target, 0, {...}) )</code> but=
=20
		 with less code. In other words, the following two lines produce identica=
l results:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>myTimeline.add( TweenLit=
e.to(mc, 0, {x:100, alpha:0.5, immediateRender:false}) );
myTimeline.set(mc, {x:100, alpha:0.5});
</pre></div>
		 <p>Keep in mind that you can chain these calls together and use other co=
nvenience=20
		 methods like <code>to(), call(), fromTo(), staggerTo()</code>, etc. to b=
uild out=20
		 sequences very quickly:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//create a timeline that cal=
ls myFunction() when it completes
var tl:TimelineLite =3D new TimelineLite({onComplete:myFunction});
//now we'll use chaining, but break each step onto a different line for rea=
dability...
tl.to(mc, 1, {x:100})    //tween mc.x to 100
  .set(mc, {alpha:0})    //then set mc.alpha to 0.5 immediately
  .to(mc, 1, {y:50})    //then tween mc.y to 50
  .call(otherFunction)    //then call otherFunction()
  .staggerTo([mc1, mc2, mc3], 1.5, {rotation:45}, 0.25); //finally tween th=
e rotation of mc1, mc2, and mc3 to 45 and stagger the start times by 0.25 s=
econds
</pre></div>
		 <p>The 3rd parameter is the <code>position</code> which controls the pla=
cement of the
		 tween in the timeline (by default, it's at the end of the timeline). Use=
 a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the tween 2 seconds after =
the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the tween inserted exactly at the label or combine a label and a=
 relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the tween 2 seconds after "myLabel=
" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tween=20
		 there which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>tl.set(mc, {x:100});  //appe=
nds to the end of the timeline
tl.set(mc, {x:100}, 2);  //appends it at exactly 2 seconds into the timelin=
e (absolute position)
tl.set(mc, {x:100}, "+=3D2");  //appends it 2 seconds after the end (with a=
 gap of 2 seconds)
tl.set(mc, {x:100}, "myLabel");  //places it at "myLabel" (and if "myLabel"=
 doesn't exist yet, it's added to the end and then the tween is inserted th=
ere)
tl.set(mc, {x:100}, "myLabel+=3D2");  //places it 2 seconds after "myLabel"
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target=
 object (or array of objects) whose properties will be set.=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the value to which each property should be set. F=
or example, to set <code>mc.x</code> to 100 and <code>mc.y</code> to 200, d=
o this: <code>myTimeline.set(mc, {x:100, y:200});</code>
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the zero-duration tween in the timeline (by default, it's the end of the t=
imeline, like "+=3D0"). Use a number to indicate an absolute time in terms =
of seconds (or frames for frames-based timelines), or you can use a string =
with a "+=3D" or "-=3D" prefix to offset the insertion point relative to th=
e END of the timeline. For example, <code>"+=3D2"</code> would place the tw=
een 2 seconds after the end, leaving a 2-second gap. <code>"-=3D2"</code> w=
ould create a 2-second overlap. You may also use a label like <code>"myLabe=
l"</code> to have the tween inserted exactly at the label or combine a labe=
l and a relative offset like <code>"myLabel+=3D2"</code> to insert the twee=
n 2 seconds after "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 s=
econds before "myLabel". If you define a label that doesn't exist yet, it w=
ill <b>automatically be added to the end of the timeline</b> before inserti=
ng the tween there which can be quite convenient.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#to()" target=3D"">to()</a><br><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TimelineLite.html#add()" target=3D"">add()</a><b=
r><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#r=
emove()" target=3D"">remove()</a></div></div><a name=3D"shiftChildren()"></=
a><a name=3D"shiftChildren(Number,Boolean,Number)"></a><table class=3D"deta=
ilHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detai=
lHeaderName">shiftChildren</td><td class=3D"detailHeaderParens">()</td><td =
class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;=
</td></tr></tbody></table><div class=3D"detailBody"><code> public function =
shiftChildren(amount:Number, adjustLabels:Boolean =3D false, ignoreBeforeTi=
me:Number =3D 0):*</code><p></p><p></p><p>
		 Shifts the startTime of the timeline's children by a certain amount and =
optionally adjusts labels too.=20
		 This can be useful when you want to prepend children or splice them into=
 a certain spot, moving existing=20
		 ones back to make room for the new ones.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">amount</span>:Number</code> =E2=80=94 Number =
of seconds (or frames for frames-based timelines) to move each child.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">adjustLabels</span>:Boolean</co=
de> (default =3D <code>false</code>)<code></code> =E2=80=94 If <code>true</=
code>, the timing of all labels will be adjusted as well.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">ignoreBeforeTime</span>:Number<=
/code> (default =3D <code>0</code>)<code></code> =E2=80=94 All children tha=
t begin at or after the <code>startAtTime</code> will be affected by the sh=
ift (the default is 0, causing all children to be affected). This provides =
an easy way to splice children into a certain spot on the timeline, pushing=
 only the children after that point back to make room.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table></div><a name=3D"staggerFrom()"></a><a name=3D=
"staggerFrom(Array,Number,Object,Number,any,Function,Array)"></a><table cla=
ss=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td clas=
s=3D"detailHeaderName">staggerFrom</td><td class=3D"detailHeaderParens">()<=
/td><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule=
">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> public f=
unction staggerFrom(targets:Array, duration:Number, vars:Object, stagger:Nu=
mber =3D 0, position:* =3D +=3D0, onCompleteAll:Function =3D null, onComple=
teAllParams:Array =3D null):*</code><p></p><p></p><p>
		 Tweens an array of targets from a common set of destination values (usin=
g the current
		 values as the destination), but staggers their start times by a specifie=
d amount of time,=20
		 creating an evenly-spaced sequence with a surprisingly small amount of c=
ode. For example,=20
		 let's say you have an array containing references to a bunch of text fie=
lds that you'd=20
		 like to drop into place while fading in, all in a staggered fashion with=
 0.2 seconds=20
		 between each tween's start time:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var textFields =3D [tf1,=
 tf2, tf3, tf4, tf5];
myTimeline.staggerFrom(textFields, 1, {y:"+=3D150"}, 0.2);
</pre></div>
		 <p><code>staggerFrom()</code> simply loops through the <code>targets</co=
de> array and creates=20
		 a <code>from()</code> tween for each object and then inserts it at the a=
ppropriate place on a=20
		 new TimelineLite instance whose onComplete corresponds to the <code>onCo=
mpleteAll</code>=20
		 (if you define one) and then appends that TimelineLite to the timeline (=
as a nested child).</p>
		=20
		 <p>Note that if you define an <code>onComplete</code> (or any callback f=
or that matter)
		 in the <code>vars</code> parameter, it will be called for each tween rat=
her than the whole=20
		 sequence. This can be very useful, but if you want to call a function af=
ter the entire
		 sequence of tweens has completed, use the <code>onCompleteAll</code> par=
ameter (the 6th parameter).</p>
		=20
		 <p>The 5th parameter is the <code>position</code> which controls the pla=
cement of the
		 tweens in the timeline (by default, it's at the end of the timeline). Us=
e a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the first tween 2 seconds =
after the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the first tween inserted exactly at the label or combine a label=
 and a relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the first tween 2 seconds after "m=
yLabel" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tweens=20
		 there which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>tl.staggerFrom(myArray, 1, {=
x:100}, 0.25);  //appends to the end of the timeline
tl.staggerFrom(myArray, 1, {x:100}, 0.25, 2);  //appends at exactly 2 secon=
ds into the timeline (absolute position)
tl.staggerFrom(myArray, 1, {x:100}, 0.25, "+=3D2");  //appends 2 seconds af=
ter the end (with a gap of 2 seconds)
tl.staggerFrom(myArray, 1, {x:100}, 0.25, "myLabel");  //places at "myLabel=
" (and if "myLabel" doesn't exist yet, it's added to the end and then the t=
weens are inserted there)
tl.staggerFrom(myArray, 1, {x:100}, 0.25, "myLabel+=3D2");  //places 2 seco=
nds after "myLabel"
</pre></div>
		=20
		 <p>By default, <code>immediateRender</code> is <code>true</code> in=20
		 <code>from()</code> tweens, meaning that they immediately render their s=
tarting state=20
		 regardless of any delay that is specified. You can override this behavio=
r by passing=20
		 <code>immediateRender:false</code> in the <code>vars</code> parameter so=
 that it will=20
		 wait to render until the tween actually begins.</p>
		=20
		 <p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 d=
on't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions accept an extra (8th) parameter for <code>onCompleteAllScope</c=
ode>.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">targets</span>:Array</code> =E2=80=94 An arr=
ay of target objects whose properties should be affected
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if the timeline is frames-based)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the beginning value for each property that should=
 be tweened as well as any special properties like <code>ease</code>. For e=
xample, to tween <code>x</code> from 100 and <code>y</code> from 200 for mc=
1, mc2, and mc3, staggering their start time by 0.25 seconds and then call =
<code>myFunction</code> when they last one has finished, do this: <code>myT=
imeline.staggerFrom([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, 0, null, myFu=
nction})</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">stagger</span>:Number</code> (d=
efault =3D <code>0</code>)<code></code> =E2=80=94 Amount of time in seconds=
 (or frames if the timeline is frames-based) to stagger the start time of e=
ach tween. For example, you might want to have 5 objects move down 100 pixe=
ls while fading out, and stagger the start times by 0.2 seconds - you could=
 do: <code>myTimeline.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:"+=3D100",=
 alpha:0}, 0.2)</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the first tween in the timeline (by default, it's the end of the timeline,=
 like "+=3D0"). Use a number to indicate an absolute time in terms of secon=
ds (or frames for frames-based timelines), or you can use a string with a "=
+=3D" or "-=3D" prefix to offset the insertion point relative to the END of=
 the timeline. For example, <code>"+=3D2"</code> would place the tween 2 se=
conds after the end, leaving a 2-second gap. <code>"-=3D2"</code> would cre=
ate a 2-second overlap. You may also use a label like <code>"myLabel"</code=
> to have the tween inserted exactly at the label or combine a label and a =
relative offset like <code>"myLabel+=3D2"</code> to insert the tween 2 seco=
nds after "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 seconds b=
efore "myLabel". If you define a label that doesn't exist yet, it will <b>a=
utomatically be added to the end of the timeline</b> before inserting the t=
ween there which can be quite convenient.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAll</span>:Function</=
code> (default =3D <code>null</code>)<code></code> =E2=80=94 A function to =
call as soon as the entire sequence of tweens has completed
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAllParams</span>:Arra=
y</code> (default =3D <code>null</code>)<code></code> =E2=80=94 An array of=
 parameters to pass the <code>onCompleteAll</code> method.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)=
=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#staggerTo()" target=3D"">staggerTo()</a><br><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineLite.html#staggerFromTo()"=
 target=3D"">staggerFromTo()</a></div></div><a name=3D"staggerFromTo()"></a=
><a name=3D"staggerFromTo(Array,Number,Object,Object,Number,any,Function,Ar=
ray)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"=
><tbody><tr><td class=3D"detailHeaderName">staggerFromTo</td><td class=3D"d=
etailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td cla=
ss=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detai=
lBody"><code> public function staggerFromTo(targets:Array, duration:Number,=
 fromVars:Object, toVars:Object, stagger:Number =3D 0, position:* =3D +=3D0=
, onCompleteAll:Function =3D null, onCompleteAllParams:Array =3D null):*</c=
ode><p></p><p></p><p>
		 Tweens an array of targets from and to a common set of values, but stagg=
ers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code. For example, let's say you have an ar=
ray containing
		 references to a bunch of text fields that you'd like to fade from alpha:=
1 to alpha:0 in a
		 staggered fashion with 0.2 seconds between each tween's start time:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var textFields =3D [tf1,=
 tf2, tf3, tf4, tf5];
myTimeline.staggerFromTo(textFields, 1, {alpha:1}, {alpha:0}, 0.2);
</pre></div>
		 <p><code>staggerFromTo()</code> simply loops through the <code>targets</=
code> array and creates=20
		 a <code>fromTo()</code> tween for each object and then inserts it at the=
 appropriate place on=20
		 a new TimelineLite instance whose onComplete corresponds to the <code>on=
CompleteAll</code>=20
		 (if you define one) and then appends that TimelineLite to the timeline (=
as a nested child).</p>
		=20
		 <p>Note that if you define an <code>onComplete</code> (or any callback f=
or that matter)
		 in the <code>vars</code> parameter, it will be called for each tween rat=
her than the whole=20
		 sequence. This can be very useful, but if you want to call a function af=
ter the entire
		 sequence of tweens has completed, use the <code>onCompleteAll</code> par=
ameter (the 7th parameter).</p>
		=20
		 <p>The 6th parameter is the <code>position</code> which controls the pla=
cement of the
		 tweens in the timeline (by default, it's at the end of the timeline). Us=
e a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the first tween 2 seconds =
after the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the first tween inserted exactly at the label or combine a label=
 and a relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the first tween 2 seconds after "m=
yLabel" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tweens=20
		 there which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>tl.staggerFromTo(myArray, 1,=
 {x:0}, {x:100}, 0.25);  //appends to the end of the timeline
tl.staggerFromTo(myArray, 1, {x:0}, {x:100}, 0.25, 2);  //appends at exactl=
y 2 seconds into the timeline (absolute position)
tl.staggerFromTo(myArray, 1, {x:0}, {x:100}, 0.25, "+=3D2");  //appends 2 s=
econds after the end (with a gap of 2 seconds)
tl.staggerFromTo(myArray, 1, {x:0}, {x:100}, 0.25, "myLabel");  //places at=
 "myLabel" (and if "myLabel" doesn't exist yet, it's added to the end and t=
hen the tweens are inserted there)
tl.staggerFromTo(myArray, 1, {x:0}, {x:100}, 0.25, "myLabel+=3D2");  //plac=
es 2 seconds after "myLabel"
</pre></div>
		=20
		 <p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 d=
on't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions accept an extra (9th) parameter for <code>onCompleteAllScope</c=
ode>.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">targets</span>:Array</code> =E2=80=94 An arr=
ay of target objects whose properties should be affected
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if the timeline is frames-based)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">fromVars</span>:Object</code> =
=E2=80=94 An object defining the starting value for each property that shou=
ld be tweened. For example, to tween <code>x</code> from 100 and <code>y</c=
ode> from 200, <code>fromVars</code> would look like this: <code>{x:100, y:=
200}</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">toVars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>ease</code>. For example=
, to tween <code>x</code> from 0 to 100 and <code>y</code> from 0 to 200, s=
taggering the start times by 0.2 seconds and then call <code>myFunction</co=
de> when they all complete, do this: <code>myTimeline.staggerFromTo([mc1, m=
c2, mc3], 1, {x:0, y:0}, {x:100, y:200}, 0.2, 0, null, myFunction});</code>
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">stagger</span>:Number</code> (d=
efault =3D <code>0</code>)<code></code> =E2=80=94 Amount of time in seconds=
 (or frames if the timeline is frames-based) to stagger the start time of e=
ach tween. For example, you might want to have 5 objects move down 100 pixe=
ls while fading out, and stagger the start times by 0.2 seconds - you could=
 do: <code>myTimeline.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:"+=3D100",=
 alpha:0}, 0.2)</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the first tween in the timeline (by default, it's the end of the timeline,=
 like "+=3D0"). Use a number to indicate an absolute time in terms of secon=
ds (or frames for frames-based timelines), or you can use a string with a "=
+=3D" or "-=3D" prefix to offset the insertion point relative to the END of=
 the timeline. For example, <code>"+=3D2"</code> would place the tween 2 se=
conds after the end, leaving a 2-second gap. <code>"-=3D2"</code> would cre=
ate a 2-second overlap. You may also use a label like <code>"myLabel"</code=
> to have the tween inserted exactly at the label or combine a label and a =
relative offset like <code>"myLabel+=3D2"</code> to insert the tween 2 seco=
nds after "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 seconds b=
efore "myLabel". If you define a label that doesn't exist yet, it will <b>a=
utomatically be added to the end of the timeline</b> before inserting the t=
ween there which can be quite convenient.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAll</span>:Function</=
code> (default =3D <code>null</code>)<code></code> =E2=80=94 A function to =
call as soon as the entire sequence of tweens has completed
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAllParams</span>:Arra=
y</code> (default =3D <code>null</code>)<code></code> =E2=80=94 An array of=
 parameters to pass the <code>onCompleteAll</code> method.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)=
=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#staggerTo()" target=3D"">staggerTo()</a><br><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineLite.html#staggerFrom()" t=
arget=3D"">staggerFrom()</a></div></div><a name=3D"staggerTo()"></a><a name=
=3D"staggerTo(Array,Number,Object,Number,any,Function,Array)"></a><table cl=
ass=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td cla=
ss=3D"detailHeaderName">staggerTo</td><td class=3D"detailHeaderParens">()</=
td><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule"=
>&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> public fu=
nction staggerTo(targets:Array, duration:Number, vars:Object, stagger:Numbe=
r, position:* =3D +=3D0, onCompleteAll:Function =3D null, onCompleteAllPara=
ms:Array =3D null):*</code><p></p><p></p><p>
		 Tweens an array of targets to a common set of destination values, but st=
aggers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code. For example, let's say you have an ar=
ray containing
		 references to a bunch of text fields that you'd like to fall away and fa=
de out in a
		 staggered fashion with 0.2 seconds between each tween's start time:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var textFields =3D [tf1,=
 tf2, tf3, tf4, tf5];
myTimeline.staggerTo(textFields, 1, {y:"+=3D150", ease:Cubic.easeIn}, 0.2);
</pre></div>
		 <p><code>staggerTo()</code> simply loops through the <code>targets</code=
> array and creates=20
		 a <code>to()</code> tween for each object and then inserts it at the app=
ropriate place on a=20
		 new TimelineLite instance whose onComplete corresponds to the <code>onCo=
mpleteAll</code>=20
		 (if you define one) and then appends that TimelineLite to the timeline (=
as a nested child).</p>
		=20
		 <p>Note that if you define an <code>onComplete</code> (or any callback f=
or that matter)
		 in the <code>vars</code> parameter, it will be called for each tween rat=
her than the whole=20
		 sequence. This can be very useful, but if you want to call a function af=
ter the entire
		 sequence of tweens has completed, use the <code>onCompleteAll</code> par=
ameter (the 6th parameter).</p>
		=20
		 <p>The 5th parameter is the <code>position</code> which controls the pla=
cement of the
		 tweens in the timeline (by default, it's at the end of the timeline). Us=
e a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the first tween 2 seconds =
after the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the first tween inserted exactly at the label or combine a label=
 and a relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the first tween 2 seconds after "m=
yLabel" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tweens=20
		 there which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>tl.staggerTo(myArray, 1, {x:=
100}, 0.25);  //appends to the end of the timeline
tl.staggerTo(myArray, 1, {x:100}, 0.25, 2);  //appends at exactly 2 seconds=
 into the timeline (absolute position)
tl.staggerTo(myArray, 1, {x:100}, 0.25, "+=3D2");  //appends 2 seconds afte=
r the end (with a gap of 2 seconds)
tl.staggerTo(myArray, 1, {x:100}, 0.25, "myLabel");  //places at "myLabel" =
(and if "myLabel" doesn't exist yet, it's added to the end and then the twe=
ens are inserted there)
tl.staggerTo(myArray, 1, {x:100}, 0.25, "myLabel+=3D2");  //places 2 second=
s after "myLabel"
</pre></div>
		=20
		 <p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 d=
on't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions accept an extra (8th) parameter for <code>onCompleteAllScope</c=
ode>.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">targets</span>:Array</code> =E2=80=94 An arr=
ay of target objects whose properties should be affected
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if the timeline is frames-based)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>ease</code>. For example=
, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, an=
d mc3, staggering their start time by 0.25 seconds and then call <code>myFu=
nction</code> when they last one has finished, do this: <code>myTimeline.st=
aggerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, 0, null, myFunction})</co=
de>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">stagger</span>:Number</code> =
=E2=80=94 Amount of time in seconds (or frames if the timeline is frames-ba=
sed) to stagger the start time of each tween. For example, you might want t=
o have 5 objects move down 100 pixels while fading out, and stagger the sta=
rt times by 0.2 seconds - you could do: <code>myTimeline.staggerTo([mc1, mc=
2, mc3, mc4, mc5], 1, {y:"+=3D100", alpha:0}, 0.2)</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the first tween in the timeline (by default, it's the end of the timeline,=
 like "+=3D0"). Use a number to indicate an absolute time in terms of secon=
ds (or frames for frames-based timelines), or you can use a string with a "=
+=3D" or "-=3D" prefix to offset the insertion point relative to the END of=
 the timeline. For example, <code>"+=3D2"</code> would place the tween 2 se=
conds after the end, leaving a 2-second gap. <code>"-=3D2"</code> would cre=
ate a 2-second overlap. You may also use a label like <code>"myLabel"</code=
> to have the tween inserted exactly at the label or combine a label and a =
relative offset like <code>"myLabel+=3D2"</code> to insert the tween 2 seco=
nds after "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 seconds b=
efore "myLabel". If you define a label that doesn't exist yet, it will <b>a=
utomatically be added to the end of the timeline</b> before inserting the t=
ween there which can be quite convenient.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAll</span>:Function</=
code> (default =3D <code>null</code>)<code></code> =E2=80=94 A function to =
call as soon as the entire sequence of tweens has completed
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAllParams</span>:Arra=
y</code> (default =3D <code>null</code>)<code></code> =E2=80=94 An array of=
 parameters to pass the <code>onCompleteAll</code> method.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)=
=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#staggerFrom()" target=3D"">staggerFrom()</a><br><a href=
=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#staggerFro=
mTo()" target=3D"">staggerFromTo()</a></div></div><a name=3D"stop()"></a><t=
able class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr>=
<td class=3D"detailHeaderName">stop</td><td class=3D"detailHeaderParens">()=
</td><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRul=
e">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> public =
function stop():*</code><p></p><p></p><p> [deprecated] Pauses the timeline =
(used for consistency with Flash's MovieClip.stop() functionality, but esse=
ntially accomplishes the same thing as <code>pause()</code> without the par=
ameter) </p><p></p><span class=3D"label">Returns</span><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20"></td><td>=
<code>*</code> =E2=80=94 self (makes chaining easier) </td></tr></tbody></t=
able></div><a name=3D"to()"></a><a name=3D"to(Object,Number,Object,any)"></=
a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody>=
<tr><td class=3D"detailHeaderName">to</td><td class=3D"detailHeaderParens">=
()</td><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderR=
ule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> publi=
c function to(target:Object, duration:Number, vars:Object, position:* =3D +=
=3D0):*</code><p></p><p></p><p>
		 Adds a <code>TweenLite.to()</code> tween to the end of the timeline (or =
elsewhere using the "position" parameter)
		  - this is a convenience method that accomplishes exactly the same thing=
 as=20
		 <code>add( TweenLite.to(...) )</code> but with less code. In other=20
		 words, the following two lines produce identical results:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>myTimeline.add( TweenLit=
e.to(mc, 1, {x:100, alpha:0.5}) );
myTimeline.to(mc, 1, {x:100, alpha:0.5});
</pre></div>
		 <p>Keep in mind that you can chain these calls together and use other co=
nvenience=20
		 methods like <code>fromTo(), call(), set(), staggerTo()</code>, etc. to =
build out=20
		 sequences very quickly:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//create a timeline that cal=
ls myFunction() when it completes
var tl:TimelineLite =3D new TimelineLite({onComplete:myFunction});
//now we'll use chaining, but break each step onto a different line for rea=
dability...
tl.to(mc, 1, {x:100})        //tween mc.x to 100
  .to(mc, 1, {y:50}, "-=3D0.25")    //then tween mc.y to 50, starting the t=
ween 0.25 seconds before the previous one ends
  .set(mc, {alpha:0})        //then set mc.alpha to 0.5 immediately
  .call(otherFunction)        //then call otherFunction()
  .staggerTo([mc1, mc2, mc3], 1.5, {rotation:45}, 0.25); //finally tween th=
e rotation of mc1, mc2, and mc3 to 45 and stagger the start times by 0.25 s=
econds
</pre></div>
		 <p>If you don't want to append the tween and would rather have precise c=
ontrol
		 of the insertion point, you can use the additional <code>position</code>=
 parameter.=20
		 Or use a regular <code>add()</code> like=20
		 <code>myTimeline.add( TweenLite.to(mc, 1, {x:100}), 2.75)</code>.</p>
		=20
		 <p>The 4th parameter is the <code>position</code> which controls the pla=
cement of the
		 tween in the timeline (by default, it's at the end of the timeline). Use=
 a number to indicate=20
		 an absolute time in terms of seconds (or frames for frames-based timelin=
es), or you can use a string
		 with a "+=3D" or "-=3D" prefix to offset the insertion point relative to=
 the END of the timeline.=20
		 For example, <code>"+=3D2"</code> would place the tween 2 seconds after =
the end, leaving a 2-second gap.=20
		 <code>"-=3D2"</code> would create a 2-second overlap. You may also use a=
 label like <code>"myLabel"</code>
		 to have the tween inserted exactly at the label or combine a label and a=
 relative offset like=20
		 <code>"myLabel+=3D2"</code> to insert the tween 2 seconds after "myLabel=
" or <code>"myLabel-=3D3"</code>=20
		 to insert it 3 seconds before "myLabel". If you define a label that does=
n't exist yet, it=20
		 will <b>automatically be added to the end of the timeline</b> before ins=
erting the tween=20
		 which can be quite convenient.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>tl.to(mc, 1, {x:100});  //ap=
pends to the end of the timeline
tl.to(mc, 1, {x:100}, 2);  //appends it at exactly 2 seconds into the timel=
ine (absolute position)
tl.to(mc, 1, {x:100}, "+=3D2");  //appends it 2 seconds after the end (with=
 a gap of 2 seconds)
tl.to(mc, 1, {x:100}, "myLabel");  //places it at "myLabel" (and if "myLabe=
l" doesn't exist yet, it's added to the end and then the tween is inserted =
there)
tl.to(mc, 1, {x:100}, "myLabel+=3D2");  //places it 2 seconds after "myLabe=
l"
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target=
 object (or array of objects) whose properties the tween affects=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if the timeline is frames-based)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>onComplete</code>, <code=
>ease</code>, etc. For example, to tween <code>mc.x</code> to 100 and <code=
>mc.y</code> to 200 and then call <code>myFunction</code>, do this: <code>m=
yTimeline.to(mc, 1, {x:100, y:200, onComplete:myFunction})</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>+=3D0</code>)<code></code> =E2=80=94 Controls the placement of=
 the tween in the timeline (by default, it's the end of the timeline, like =
"+=3D0"). Use a number to indicate an absolute time in terms of seconds (or=
 frames for frames-based timelines), or you can use a string with a "+=3D" =
or "-=3D" prefix to offset the insertion point relative to the END of the t=
imeline. For example, <code>"+=3D2"</code> would place the tween 2 seconds =
after the end, leaving a 2-second gap. <code>"-=3D2"</code> would create a =
2-second overlap. You may also use a label like <code>"myLabel"</code> to h=
ave the tween inserted exactly at the label or combine a label and a relati=
ve offset like <code>"myLabel+=3D2"</code> to insert the tween 2 seconds af=
ter "myLabel" or <code>"myLabel-=3D3"</code> to insert it 3 seconds before =
"myLabel". If you define a label that doesn't exist yet, it will <b>automat=
ically be added to the end of the timeline</b> before inserting the tween t=
here which can be quite convenient.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#from()" target=3D"">from()</a><br><a href=3D"https://gree=
nsock.com/asdocs/com/greensock/TimelineLite.html#fromTo()" target=3D"">from=
To()</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineL=
ite.html#add()" target=3D"">add()</a><br><a href=3D"https://greensock.com/a=
sdocs/com/greensock/TimelineLite.html#remove()" target=3D"">remove()</a></d=
iv></div><a name=3D"totalDuration()"></a><a name=3D"totalDuration(Number)">=
</a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbod=
y><tr><td class=3D"detailHeaderName">totalDuration</td><td class=3D"detailH=
eaderParens">()</td><td class=3D"detailHeaderType">method</td><td class=3D"=
detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"=
><code>override public function totalDuration(value:Number):*</code><p></p>=
<p></p><p>
		 Gets the timeline's <b>total</b> duration or, if used as a setter, adjus=
ts the timeline's=20
		 <code>timeScale</code> to fit it within the specified duration. For exam=
ple, if a TimelineMax instance has=20
		 a <code>duration</code> of 2 and a <code>repeat</code> of 3, its <code>t=
otalDuration</code>=20
		 would be 8 (one standard play plus 3 repeats equals 4 total cycles).=20
		=20
		 </p><p>Due to the fact that a timeline's <code>totalDuration</code> is d=
ictated by its contents,=20
		 using this method as a setter will simply cause the <code>timeScale</cod=
e> to be adjusted
		 to fit the current contents into the specified <code>totalDuration</code=
>. For example,=20
		 if there are 20-seconds worth of tweens in the timeline and you do <code=
>myTimeline.totalDuration(10)</code>,
		 the <code>timeScale</code> would be changed to 2. If you checked the <co=
de>totalDuration</code> again
		 immediately after that, it would still return 20 because technically tha=
t is how long all the=20
		 child tweens/timelines are but upon playback the speed would be doubled =
because of the=20
		 <code>timeScale</code>.</p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myAnimation.totalDuration(2).play=
(1);</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var ctd =3D myAnimation.tota=
lDuration(); //gets current total duration
myAnimation.totalDuration( 20 ); //adjusts the timeScale so that myAnimatio=
n fits into exactly 20 seconds on its parent timeline
</pre></div>
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#timeScale()" target=3D"">timeScale()</a><br><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineLite.html#duration()" targ=
et=3D"">duration()</a></div></div><a name=3D"usesFrames()"></a><table class=
=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=
=3D"detailHeaderName">usesFrames</td><td class=3D"detailHeaderParens">()</t=
d><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">=
&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> public fun=
ction usesFrames():Boolean</code><p></p><p></p><p>=20
		 [READ-ONLY] If <code>true</code>, the timeline's timing mode is frames-b=
ased instead of
		 seconds. This can only be set to <code>true</code> by passing <code>useF=
rames:true</code> in=20
		 the vars parameter of the constructor, or by nesting this timeline in an=
other whose=20
		 timing mode is frames-based. An animation's timing mode is always determ=
ined by its parent timeline).
		 </p><p></p><span class=3D"label">Returns</span><table cellpadding=3D"0" =
cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20"></td><td><code>B=
oolean</code></td></tr></tbody></table></div><br><br><hr><br><p></p><center=
 class=3D"copyright"><footer></footer><br>Thu Oct 24 2013, 01:43 PM -05:00 =
 </center></div></body></html><!--<br/>Thu Oct 24 2013, 01:43 PM -05:00  -->
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/inherit-arrow.gif

R0lGODlhDwAJAKIAAEZGRjExMSUlJSEhIQAAAP///wAAAAAAACH5BAEHAAUALAAAAAAPAAkAAAMa
WLoM/I8ESAkZNFpsu/9TVnSCqFilOYaqsyQAOw==

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/expanded.gif

R0lGODlhCQAJAKIAAERERDMzMyIiIgAAAP///wAAAAAAAAAAACH5BAEHAAQALAAAAAAJAAkAAAMU
SLrcCyPKAUiYIywhReOeozlkmQAAOw==

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/collapsed.gif

R0lGODlhCQAJAKIAAERERDMzMyIiIgAAAP///wAAAAAAAAAAACH5BAEHAAQALAAAAAAJAAkAAAMU
SATaPcG9ISQZuDqM46RSZkHWYiUAOw==

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/inheritedSummary.gif

R0lGODlhDgAOALMAAElJSYKCgpmZmWtra9jY2GZmZqSkpFNTU4+Pj8HBwXNzc+Xl5VtbW////wAA
AAAAACH5BAEHAA0ALAAAAAAOAA4AAAQ9sMlJKyWAWLrAAMvWLEOgFEVYLYpgFkzKBYnxMrjauIjy
HoOBwBJ4KUSN4ukoUhaYGyeUaERKkQrGwVOJAAA7

------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/html
Content-ID: <frame-0D8FE997E0DC7555A36E072C5878B4E5@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/package-list.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><title>Package List - GreenSock Documentation</title><base target=
=3D"classFrame"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdo=
cs/style.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" h=
ref=3D"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"p=
rint"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/overrid=
e.css" type=3D"text/css"></head><body class=3D"classFrameContent vsc-initia=
lized"><h3><a href=3D"https://greensock.com/asdocs/package-summary.html" st=
yle=3D"color:black">Packages</a></h3><table cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock=
/package-detail.html">com.greensock</a></td></tr><tr><td><a href=3D"https:/=
/greensock.com/asdocs/com/greensock/core/package-detail.html">com.greensock=
.core</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/gree=
nsock/data/package-detail.html">com.greensock.data</a></td></tr><tr><td><a =
href=3D"https://greensock.com/asdocs/com/greensock/easing/package-detail.ht=
ml">com.greensock.easing</a></td></tr><tr><td><a href=3D"https://greensock.=
com/asdocs/com/greensock/events/package-detail.html">com.greensock.events</=
a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/l=
ayout/package-detail.html">com.greensock.layout</a></td></tr><tr><td><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/loading/package-detail.html=
">com.greensock.loading</a></td></tr><tr><td><a href=3D"https://greensock.c=
om/asdocs/com/greensock/loading/core/package-detail.html">com.greensock.loa=
ding.core</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/=
greensock/loading/data/package-detail.html">com.greensock.loading.data</a><=
/td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/load=
ing/display/package-detail.html">com.greensock.loading.display</a></td></tr=
><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/motionPaths/=
package-detail.html">com.greensock.motionPaths</a></td></tr><tr><td><a href=
=3D"https://greensock.com/asdocs/com/greensock/plugins/package-detail.html"=
>com.greensock.plugins</a></td></tr><tr><td><a href=3D"https://greensock.co=
m/asdocs/com/greensock/text/package-detail.html">com.greensock.text</a></td=
></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/utils/p=
ackage-detail.html">com.greensock.utils</a></td></tr></tbody></table></body=
></html><!--<br/>Thu Jul 4 2013, 12:48 AM -05:00  -->
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW----
Content-Type: text/html
Content-ID: <frame-456D421651605C2A3401E63107EB6DA9@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/com/greensock/class-list.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><title>com.greensock - GreenSock Documentation</title><base targe=
t=3D"classFrame"><link rel=3D"stylesheet" href=3D"https://greensock.com/asd=
ocs/style.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" =
href=3D"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"=
print"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/overri=
de.css" type=3D"text/css"></head><body class=3D"classFrameContent vsc-initi=
alized"><h3><a href=3D"https://greensock.com/asdocs/com/greensock/package-d=
etail.html" target=3D"classFrame" style=3D"color:black">Package com.greenso=
ck</a></h3><table cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/package-detail.html#classSu=
mmary" style=3D"color:black"><b>Classes</b></a></td></tr><tr><td><a href=3D=
"https://greensock.com/asdocs/com/greensock/BlitMask.html">BlitMask</a></td=
></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/FlexBli=
tMask.html">FlexBlitMask</a></td></tr><tr><td><a href=3D"https://greensock.=
com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td></tr><tr><=
td><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html">=
TimelineMax</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/co=
m/greensock/TweenLite.html">TweenLite</a></td></tr><tr><td><a href=3D"https=
://greensock.com/asdocs/com/greensock/TweenMax.html">TweenMax</a></td></tr>=
<tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/TweenNano.htm=
l">TweenNano</a></td></tr></tbody></table></body></html><!--<br/>Thu Oct 24=
 2013, 01:43 PM -05:00  -->
------MultipartBoundary--vMvzWaYvsS9Ff9AYfJSu13Yf9QwyIw2HwlwThD7caW------
