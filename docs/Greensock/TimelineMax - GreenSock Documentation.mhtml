From: <Saved by Blink>
Snapshot-Content-Location: https://greensock.com/asdocs/index.html?com/greensock/package-detail.html&com/greensock/class-list.html
Subject: TimelineMax - GreenSock Documentation
Date: Mon, 1 Mar 2021 20:47:45 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----"


------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/html
Content-ID: <frame-1312FFEB6037E394294EB36BFD0FA88F@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/index.html?com/greensock/package-detail.html&com/greensock/class-list.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.o=
rg/TR/html4/frameset.dtd"><html><head><meta http-equiv=3D"Content-Type" con=
tent=3D"text/html; charset=3DUTF-8">

   =20
<title>TimelineMax - GreenSock Documentation</title>
   =20


</head>

<frameset cols=3D"210,*" border=3D"2" bordercolor=3D"#AAAAAA" framespacing=
=3D"0" class=3D"vsc-initialized">
      =20
<frame src=3D"cid:frame-8E2F44989CD45DEB7F97D82B64DEAF58@mhtml.blink" name=
=3D"packageFrame" scrolling=3D"no">
      =20
<frameset rows=3D"80,*" border=3D"0" bordercolor=3D"#AAAAAA">
       	=09
<frame src=3D"cid:frame-501211C38104CA3BA94F42327462FD6B@mhtml.blink" name=
=3D"titlebar" scrolling=3D"no" frameborder=3D"0">
       	=09
<frame src=3D"cid:frame-D8597E5C10C52654623AE90471FD0F47@mhtml.blink" name=
=3D"classFrame" frameborder=3D"0">
    =09
</frameset>
   =20
<noframes>
=09
<body>
       =20
<h2>Frame Alert</h2>
       =20
<p>
        This document is designed to be viewed using the frames feature. If=
 you see this message, you are using a non-frame-capable web client.
        <br>
        Link to <a href=3D"package-summary.html">Non-frame version.</a>
       =20
</p>
       =20
</body>
   =20
</noframes>

</frameset>
<!-- -->


</html>
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/html
Content-ID: <frame-8E2F44989CD45DEB7F97D82B64DEAF58@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/package-frame.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.o=
rg/TR/html4/frameset.dtd"><html><head><meta http-equiv=3D"Content-Type" con=
tent=3D"text/html; charset=3DUTF-8">

   =20
<title>GreenSock Tweening Platform Language Reference</title>

</head>

<frameset rows=3D"40%,60%" border=3D"2" framespacing=3D"1" bordercolor=3D"#=
AAAAAA" class=3D"vsc-initialized">
   =20
<frame src=3D"cid:frame-D2E701FDCAF0C8C47A47EC9156DD1075@mhtml.blink" name=
=3D"packageListFrame">
   =20
<frame src=3D"cid:frame-2DB230D84C1A4EA07B8DF7B65FB1CBC6@mhtml.blink" name=
=3D"classListFrame">
   =20
<noframes>
       =20
<body>
           =20
<h2>Frame Alert</h2>
           =20
<p>This document is designed to be viewed using the frames feature. If you =
see this message, you are using a non-frame-capable web client.
                <br>
                Link to<a href=3D"package-summary.html">Non-frame version.<=
/a>
           =20
</p>
       =20
</body>
   =20
</noframes>

</frameset>
<!-- -->


</html>
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/html
Content-ID: <frame-501211C38104CA3BA94F42327462FD6B@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/title-bar.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><!=
-- saved from url=3D(0014)about:internet --><html><head><meta http-equiv=3D=
"Content-Type" content=3D"text/html; charset=3DUTF-8">
		<title>GreenSock ActionScript API Docs</title><link rel=3D"stylesheet" hr=
ef=3D"https://greensock.com/asdocs/style.css" type=3D"text/css" media=3D"sc=
reen"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/print.c=
ss" type=3D"text/css" media=3D"print"><link rel=3D"stylesheet" href=3D"http=
s://greensock.com/asdocs/override.css" type=3D"text/css">
	=09
	=09
	=09
	</head>
	<body class=3D"vsc-initialized">
		<a name=3D"top"></a>
	=09
		<div style=3D"width:300px; height:60px;position:absolute;background-image=
:url('images/02geek-as3-js.gif'); left:240px; top:7px; border:1px solid #77=
7;">
			<a href=3D"http://02skills.com/course/javascript-animation-bundle/?affco=
de=3Dic6i&amp;couponCode=3DBEST" target=3D"_blank"><div style=3D"width:174p=
x;height:61px;position:relative;left:0px;top:0px;"></div></a>
			<a href=3D"http://02skills.com/course/gsap-flash-animation/?affcode=3Dic=
6i&amp;couponCode=3DBEST" target=3D"_blank"><div style=3D"width:33px;height=
:61px;position:relative;left:174px;top:-61px;"></div></a>
			<a name=3D"02geek" href=3D"http://02skills.com/course/animation-bundle/?=
affcode=3Dic6i&amp;couponCode=3DBEST" target=3D"_blank">
					<div style=3D"width:93px;height:61px;position:relative;left:207px;top:=
-122px;"></div>
			</a>
		</div>
		<table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
		  <tbody><tr>
			<td>
			  <table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
				<tbody><tr>
				  <td class=3D"titleTableTitle" align=3D"left">GreenSock ActionScript A=
PI Docs</td><td class=3D"titleTableSearch" align=3D"center">&nbsp;</td>
				  <td class=3D"titleTableTopNav" align=3D"right">
					<a target=3D"classFrame" href=3D"https://greensock.com/asdocs/package-=
summary.html"> All Packages </a>&nbsp;|&nbsp;<a target=3D"classFrame" href=
=3D"https://greensock.com/asdocs/class-summary.html"> All Classes </a>&nbsp=
;|&nbsp;<a target=3D"classFrame" href=3D"https://greensock.com/asdocs/all-i=
ndex-A.html"> Index </a>&nbsp;|&nbsp;<a href=3D"https://greensock.com/asdoc=
s/title-bar.html"> No Frames </a>
				  </td>
				</tr>
			  </tbody></table>
			</td>
			<td class=3D"titleTableLogo" align=3D"right" rowspan=3D"3"><img src=3D"h=
ttps://greensock.com/asdocs/images/logo.jpg" class=3D"logoImage" title=3D"A=
dobe Logo" alt=3D"Adobe Logo"></td>
		  </tr>
		  <tr>
			<td>
			  <table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
				<tbody><tr class=3D"titleTableRow2">
				  <td class=3D"titleTableSubTitle" id=3D"subTitle" align=3D"left" colsp=
an=3D"2">TimelineMax</td>
				  <td class=3D"titleTableSubNav" id=3D"subNav" align=3D"right">
					<a id=3D"propertiesLink" href=3D"https://greensock.com/asdocs/title-ba=
r.html#top" style=3D"display: inline;"> Properties </a><span id=3D"properti=
esBar" style=3D"display: inline;"> | </span><a id=3D"packagePropertiesLink"=
 href=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display:=
none"> Properties </a><span id=3D"packagePropertiesBar" style=3D"display:no=
ne"> | </span><a id=3D"constructorLink" href=3D"https://greensock.com/asdoc=
s/title-bar.html#top" style=3D"display:none"> Constructor </a><span id=3D"c=
onstructorBar" style=3D"display:none"> | </span><a id=3D"methodsLink" href=
=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display: inli=
ne;"> Methods </a><span id=3D"methodsBar" style=3D"display: inline;"> | </s=
pan><a id=3D"packageFunctionsLink" href=3D"https://greensock.com/asdocs/tit=
le-bar.html#top" style=3D"display:none"> Functions </a><span id=3D"packageF=
unctionsBar" style=3D"display:none"> | </span><a id=3D"eventsLink" href=3D"=
https://greensock.com/asdocs/title-bar.html#top" style=3D"display:none"> Ev=
ents </a><span id=3D"eventsBar" style=3D"display:none"> | </span><a id=3D"s=
tylesLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" style=
=3D"display:none"> Styles </a><span id=3D"stylesBar" style=3D"display:none"=
> | </span><a id=3D"SkinPartLink" href=3D"https://greensock.com/asdocs/titl=
e-bar.html#top" style=3D"display:none"> Skin Parts </a><span id=3D"SkinPart=
Bar" style=3D"display:none"> | </span><a id=3D"SkinStateLink" href=3D"https=
://greensock.com/asdocs/title-bar.html#top" style=3D"display:none"> Skin St=
ates </a><span id=3D"SkinStateBar" style=3D"display:none"> | </span><a id=
=3D"effectsLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" s=
tyle=3D"display:none"> Effects </a><span id=3D"effectsBar" style=3D"display=
:none"> | </span><a id=3D"constantsLink" href=3D"https://greensock.com/asdo=
cs/title-bar.html#top" style=3D"display:none"> Constants </a><span id=3D"co=
nstantsBar" style=3D"display:none"> | </span><a id=3D"packageConstantsLink"=
 href=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display:=
none"> Constants </a><span id=3D"packageConstantsBar" style=3D"display:none=
"> | </span><a id=3D"interfacesLink" href=3D"https://greensock.com/asdocs/t=
itle-bar.html#top" style=3D"display:none"> Interfaces </a><span id=3D"inter=
facesBar" style=3D"display:none"> | </span><a id=3D"classesLink" href=3D"ht=
tps://greensock.com/asdocs/title-bar.html#top" style=3D"display: none;"> Cl=
asses </a><span id=3D"classesBar" style=3D"display:none"> | </span><a id=3D=
"packageUseLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" s=
tyle=3D"display:none">Use</a><span id=3D"packageUseBar" style=3D"display:no=
ne"> | </span><a id=3D"examplesLink" href=3D"https://greensock.com/asdocs/t=
itle-bar.html#top" style=3D"display: inline;"> Examples </a>
				  </td>
				</tr>
				<tr class=3D"titleTableRow3">
				  <td colspan=3D"3">&nbsp;</td>
				</tr>
			  </tbody></table>
			</td>
		  </tr>
		</tbody></table>
=09
<!--<br/>Thu Mar 28 2013, 04:38 PM -05:00  --></body></html>
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/style.css

@charset "utf-8";

.titleTable { width: 100%; }

.titleTableTitle { white-space: nowrap; padding-left: 15px; padding-right: =
5px; font-size: 13px; height: 44px; background-image: url("images/titleTabl=
eTop.jpg"); background-repeat: repeat-x; }

.titleTableSearch { white-space: nowrap; background-image: url("images/titl=
eTableTop.jpg"); background-repeat: repeat-x; padding-right: 10px; }

.searchForm { margin-top: 0px; margin-bottom: 0px; }

.titleTableTopNav { font-size: 12px; background-image: url("images/titleTab=
leTop.jpg"); background-repeat: repeat-x; }

.titleTableLogo { width: 76px; height: 80px; vertical-align: top; }

.titleTableRow2 { color: rgb(0, 0, 0); height: 31px; background-image: url(=
"images/titleTableMiddle.jpg"); background-repeat: repeat-x; }

.titleTableSubTitle { font-size: 20px; padding-left: 15px; padding-right: 5=
px; }

.titleTableSubNav { font-size: 12px; }

.titleTableRow3 { height: 5px; background-image: url("images/titleTableBott=
om.jpg"); background-repeat: repeat-x; }

.logoImage { width: 76px; height: 80px; }

.classHeaderTable { margin-top: 20px; }

.classHeaderTable td { vertical-align: top; padding-bottom: 4px; }

.classHeaderTableLabel { font-weight: bold; padding-right: 15px; }

.classSignature { text-indent: -20px; padding-left: 20px; }

.inheritanceList { text-indent: -20px; padding-left: 20px; }

.inheritArrow { width: 15px; height: 9px; }

.mxmlSyntax { margin-bottom: -13px; }

.collapsedImage { width: 9px; height: 9px; border: 0px; }

.expandedImage { width: 9px; height: 9px; border: 0px; }

.classFrameContent { margin: 10px 5px 10px 10px; }

.classFrameContent td { white-space: nowrap; padding-right: 5px; }

.eclipseBody { display: none; }

img { border: 0px; }

.annotation { font-size: 20px; margin-top: 20px; }

.label { color: rgb(68, 68, 68); font-weight: bold; }

strong { color: rgb(68, 68, 68); }

.summarySection { margin-left: 20px; margin-right: 10px; }

.summaryTableTitle { font-weight: bold; font-size: 18px; padding-top: 20px;=
 padding-bottom: 5px; }

* .summaryTable { margin-top: 10px; border: 1px solid rgb(153, 153, 153); w=
idth: 100%; margin-bottom: 20px; }

html > body .summaryTable { margin-top: 10px; border: 1px solid rgb(153, 15=
3, 153); width: 100%; margin-bottom: 20px; margin-right: 10px; }

.summaryTable th { color: rgb(255, 255, 255); background-color: rgb(98, 124=
, 157); white-space: nowrap; }

.summaryTable td { border-top: 1px solid rgb(153, 153, 153); vertical-align=
: top; }

.summaryTablePaddingCol { width: 5px; }

.summaryTableInheritanceCol { width: 14px; }

.summaryTableSignatureCol { padding-right: 10px; }

.summaryTableOperatorCol { padding-left: 10px; padding-right: 10px; font-we=
ight: bold; }

.summaryTableStatementCol { padding-left: 10px; padding-right: 10px; font-w=
eight: bold; white-space: nowrap; }

.summarySignature { text-indent: -20px; padding-left: 20px; }

.summaryTableOwnerCol { padding-right: 10px; width: 10px; }

.summaryTableCol, .summaryTableSecondCol { }

.signatureLink { font-weight: bold; }

.summaryTableDescription { color: rgb(51, 51, 51); }

.summaryTableLastCol { padding-right: 10px; }

.inheritedSummaryImage { width: 14px; height: 14px; }

.showHideLink { }

.showHideLinkImage { width: 9px; height: 9px; }

.hideInheritedConstant { display: none; }

.showInheritedConstant { display: inline; }

.hideInheritedProtectedConstant { display: none; }

.showInheritedProtectedConstant { display: inline; }

.hideInheritedProperty { display: none; }

.showInheritedProperty { display: inline; }

.hideInheritedProtectedProperty { display: none; }

.showInheritedProtectedProperty { display: inline; }

.hideInheritedMethod { display: none; }

.showInheritedMethod { display: inline; }

.hideInheritedProtectedMethod { display: none; }

.showInheritedProtectedMethod { display: inline; }

.hideInheritedEvent { display: none; }

.showInheritedEvent { display: inline; }

.hideInheritedStyle { display: none; }

.showInheritedStyle { display: inline; }

.hideInheritedEffect { display: none; }

.showInheritedEffect { display: inline; }

.detailSectionHeader { color: rgb(67, 67, 67); font-size: 18px; padding-lef=
t: 10px; padding-top: 4px; padding-bottom: 4px; margin-top: 40px; margin-bo=
ttom: 3px; background-image: url("images/detailSectionHeader.jpg"); backgro=
und-repeat: repeat-x; }

.detailHeader { margin-left: 20px; margin-top: 10px; margin-bottom: 3px; }

.detailHeaderName { font-weight: bold; font-size: 16px; vertical-align: bas=
eline; white-space: nowrap; }

.detailHeaderType { font-size: 12px; vertical-align: baseline; padding-righ=
t: 10px; padding-left: 7px; white-space: nowrap; }

.detailHeaderParens { font-size: 14px; font-weight: bold; padding-left: 1px=
; padding-bottom: 2px; }

.detailHeaderRule { background-image: url("images/detailHeaderRule.jpg"); b=
ackground-repeat: repeat-x; width: 100%; background-position: 50% center; }

.detailBody { margin-left: 20px; margin-right: 15px; margin-bottom: 20px; }

.exampleHeader { background-color: rgb(200, 209, 223); padding-left: 10px; =
padding-top: 3px; padding-bottom: 3px; }

.seeAlso { margin-top: -13px; padding-left: 20px; }

body { font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; color: r=
gb(0, 0, 0); background-color: rgb(255, 255, 255); margin: 0px; padding: 0p=
x; }

body, td, th { font-size: 13px; }

.MainContent { margin-left: 20px; margin-right: 10px; margin-bottom: 10px; =
}

code { font-family: "Lucida Console", "Courier New", Courier, monospace; fo=
nt-size: 12px; }

pre { font-family: "Lucida Console", "Courier New", Courier, monospace; fon=
t-size: 12px; }

th { text-align: left; font-weight: bold; vertical-align: bottom; }

table { background-color: white; }

table.withBorder { border-color: rgb(187, 187, 187); border-width: 1px; bor=
der-style: solid; }

.innertable { border-collapse: collapse; }

.innertable th { border: 1px solid rgb(0, 0, 0); background: rgb(221, 221, =
221); padding: 2px 3px; }

.innertable td { border: 1px solid rgb(0, 0, 0); padding: 2px 3px; }

.paramSpacer { font-size: 5px; }

.row0 { background-color: rgb(242, 242, 242); }

.row1 { background-color: rgb(255, 255, 255); }

.prow0 { background-color: rgb(242, 242, 242); }

.prow1 { background-color: rgb(255, 255, 255); }

.idxrow { padding-top: 5px; }

.SummaryTableHeader { background-color: rgb(204, 204, 204); }

.InheritedTableHeader { background-color: rgb(238, 238, 238); }

.PackageTableHeader { background-color: rgb(238, 238, 238); }

a:link { color: rgb(0, 0, 204); text-decoration: none; }

a:visited { color: rgb(0, 0, 204); text-decoration: none; }

a:hover { text-decoration: underline; color: rgb(0, 0, 204); }

a:active { text-decoration: none; color: rgb(204, 0, 0); }

h1, h2, h3, h4, h5, h6 { font-family: "Trebuchet MS", "Bitstream Vera Sans"=
, verdana, lucida, arial, helvetica, sans-serif; font-weight: bold; margin-=
top: 3px; margin-bottom: 3px; letter-spacing: 1px; width: 90%; }

h1 { font-size: 18px; }

h2 { font-size: 16px; }

h3 { font-size: 14px; }

h4 { font-size: 12px; color: rgb(102, 102, 102); }

h5 { font-size: 11px; }

.copyright { margin-top: 30px; color: rgb(119, 119, 119); font-size: 10px; =
padding-bottom: 5px; }

.inheritanceList { line-height: 19px; }

.private { color: rgb(153, 153, 153); }

.flashonly { color: rgb(0, 0, 0); }

.flexonly { display: none; color: rgb(0, 0, 0); }

.hide { display: none; }

.feedbackLink { }

* html .listing { width: 93%; padding: 5px 5px 5px 6%; overflow-x: auto; ba=
ckground-color: rgb(242, 242, 242); margin-bottom: 10px; margin-top: 10px; =
font-family: "Lucida Console", "Courier New", Courier, monospace; font-size=
: 12px; }

html > body .listing pre { overflow: auto; padding: 5px 5px 5px 40px; backg=
round-color: rgb(242, 242, 242); margin-top: 10px; margin-bottom: 10px; fon=
t-family: "Lucida Console", "Courier New", Courier, monospace; font-size: 1=
2px; }

.listingIcons { padding: 0px; margin-top: 10px; height: 15px; }

.pageTop { height: 10px; }

.hideInheritedSkinState { display: none; }

.showInheritedSkinState { display: inline; }

.hideInheritedSkinPart { display: none; }

.showInheritedSkinPart { display: inline; }
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableTop.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAsAAEDAREA
AhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABAcJ/8QAHRAAAgEEAwAAAAAAAAAAAAAAABMFAQMS
F1WS0//EABgBAQEAAwAAAAAAAAAAAAAAAAEAAgQF/8QAFhEBAQEAAAAAAAAAAAAAAAAAABES/9oA
DAMBAAIRAxEAPwDRnCh0mhDVhTS1hSeokYsElWzJbiIvrf8Aczwn/9k=

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableMiddle.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAfAAEDAREA
AhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABQQJ/8QAGBABAQADAAAAAAAAAAAAAAAAABMBEmH/
xAAXAQADAQAAAAAAAAAAAAAAAAABAgQA/8QAFhEBAQEAAAAAAAAAAAAAAAAAABEB/9oADAMBAAIR
AxEAPwDWaPF1SlIgy7QIYhPBLgx//9k=

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableBottom.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAFAAEDAREA
AhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/EABoQAAAHAAAAAAAAAAAAAAAAAAABAwYYU5H/
xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFREBAQAAAAAAAAAAAAAAAAAAABH/2gAMAwEAAhEDEQA/
AFEjYx7V8ICP/9k=

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/print.css

@charset "utf-8";

body { color: rgb(0, 0, 0); background: rgb(255, 255, 255); font-family: "T=
imes New Roman", Times, serif; font-size: 12pt; }

a { text-decoration: none; color: rgb(0, 0, 0); }

pre { overflow-wrap: break-word; }

.titleTableTopNav, .titleTableSubNav, .logoImage { display: none; }

.packageFrame { display: none; }

.titleTableSubTitle { font-weight: bold; }

.classHeaderTableLabel { padding-right: 10px; vertical-align: top; }

.showHideLinks { display: none; }

html > body code { font-size: 10pt; }

.summaryTableTitle, .detailSectionHeader { font-size: 14pt; font-weight: bo=
ld; padding-top: 15px; padding-bottom: 5px; }

.summaryTable { border: 1px solid rgb(0, 0, 0); border-collapse: collapse; =
width: 100%; }

.summaryTableDescription { padding-bottom: 20px; }

.summaryTableSignatureCol, .summaryTableOwnerCol, .summaryTableLastCol, .su=
mmaryTableCol { border: 1px solid rgb(0, 0, 0); }

.summaryTablePaddingCol { border-width: 1px 0px 1px 1px; border-top-style: =
solid; border-bottom-style: solid; border-left-style: solid; border-top-col=
or: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb=
(0, 0, 0); border-image: initial; border-right-style: initial; border-right=
-color: initial; }

.summaryTableInheritanceCol, .summaryTableOperatorCol, .summaryTableStateme=
ntCol, .summaryTableSecondCol { border-width: 1px 1px 1px 0px; border-top-s=
tyle: solid; border-right-style: solid; border-bottom-style: solid; border-=
top-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-bottom-co=
lor: rgb(0, 0, 0); border-image: initial; border-left-style: initial; borde=
r-left-color: initial; }

.summaryTableLastCol { vertical-align: top; }

.detailHeader { font-size: 13pt; padding-top: 100px; }

.detailHeaderName { font-weight: bold; }

.detailHeaderType { padding-left: 5px; }

.detailHeaderRule { background: rgb(255, 0, 0); }

.seeAlso { padding-bottom: 20px; margin-top: -20px; }

.innertable { border-collapse: collapse; }

.innertable td, .innertable th { border: 1px solid rgb(0, 0, 0); padding-le=
ft: 5px; padding-right: 5px; }

.listing { font-size: 10pt; }

.feedbackLink { display: none; }

.copyright { font-size: 10pt; }
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/override.css

@charset "utf-8";
=0A
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/02geek-as3-js.gif

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

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/logo.jpg

/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABGAAD/7gAOQWRvYmUA
ZMAAAAAB/9sAhAAEAwMDAwMEAwMEBgQDBAYHBQQEBQcIBgYHBgYICggJCQkJCAoKDAwMDAwKDAwN
DQwMEREREREUFBQUFBQUFBQUAQQFBQgHCA8KCg8UDg4OFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABQAEwDAREAAhEBAxEB/8QAYwABAAIDAAAA
AAAAAAAAAAAAAAMEAQYIAQEBAAMAAAAAAAAAAAAAAAAAAQIDBBAAAgADCQAAAAAAAAAAAAAAABIB
AwRhUpKT0xTUVQcRAQEBAQAAAAAAAAAAAAAAAAAREgH/2gAMAwEAAhEDEQA/AOjVgdrkgsAQWAIL
AEFgCCwBBYAgsAQWAILAETICiAogKICiAogKICiAogKICpkJVEFBBQQUEFBBQQUEFBBQQUWEAIAQ
AgBACAEAIAQAgEygFAKAUAoBQCgFAKAUDKV96lyJvIEUSvvUuRN5AgJX3qXIm8gQEr71LkTeQICV
96lyJvIEBK+9S5E3kCAlfepcibyBASvvUuRN5AgJX3qXIm8gQEr71LkTeQIL6GKiAEAIAQAgBACA
EAIBaWwAtgBbAC2AFsALYAWwAtgBbAC2ATpElWCRFIJEUgkRSCRFIJEUgkRSCRFIJEUgkRSNP3Xq
XWUGCbrGnfW3JuvUusoME3WG+mTdepdZQYJusN9Mm69S6ygwTdYb6ZN16l1lBgm6w30ybr1LrKDB
N1hvpk3XqXWUGCbrDfTJuvUusoME3WG+mTdepdZQYJusN9Mm69S6ygwTdYb6Zf/Z

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/html
Content-ID: <frame-D8597E5C10C52654623AE90471FD0F47@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/com/greensock/TimelineMax.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/sty=
le.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" href=3D=
"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"print">=
<link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/override.css"=
 type=3D"text/css"><meta name=3D"keywords" content=3D"TimelineMax,com.green=
sock.TimelineMax,add,addCallback,addEventListener,addEventListener,addLabel=
,addPause,call,clear,currentLabel,delayedCall,delayedCall,delayedCall,disab=
leBitmapMode,disableBitmapMode,dispose,dispose,duration,duration,enableBitm=
apMode,enableBitmapMode,exportRoot,from,from,from,from,fromTo,fromTo,fromTo=
,getActive,getAllTweens,getChildren,getLabelAfter,getLabelBefore,getLabelTi=
me,getLabelsArray,getTweensOf,getTweensOf,getTweensOf,invalidate,invalidate=
,invalidate,invalidate,isTweening,kill,killAll,killChildTweensOf,killDelaye=
dCallsTo,killDelayedCallsTo,killTweensOf,killTweensOf,killTweensOf,normaliz=
ePosition,normalizePosition,pauseAll,progress,progress,remove,removeCallbac=
k,removeEventListener,removeEventListener,removeLabel,repeat,repeat,repeatD=
elay,repeatDelay,resumeAll,seek,set,set,set,setActualSize,setSize,setSize,s=
hiftChildren,staggerFrom,staggerFrom,staggerFromTo,staggerFromTo,staggerTo,=
staggerTo,stop,time,time,to,to,to,to,totalDuration,totalDuration,totalDurat=
ion,totalProgress,totalProgress,tweenFromTo,tweenTo,update,update,updateTo,=
usesFrames,yoyo,yoyo"><title>com.greensock.TimelineMax</title></head><body =
class=3D"vsc-initialized">
<table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0" id=3D"title=
Table" style=3D"display:none"><tbody><tr><td class=3D"titleTableTitle" alig=
n=3D"left">GreenSock ActionScript API Docs</td><td class=3D"titleTableTopNa=
v" align=3D"right"><a href=3D"https://greensock.com/asdocs/package-summary.=
html">All Packages</a>&nbsp;|&nbsp;<a href=3D"https://greensock.com/asdocs/=
class-summary.html">All Classes</a>&nbsp;|&nbsp;<a href=3D"https://greensoc=
k.com/asdocs/all-index-A.html">Index</a>&nbsp;|&nbsp;<a id=3D"framesLink1" =
href=3D"https://greensock.com/asdocs/index.html?com/greensock/TimelineMax.h=
tml&amp;com/greensock/class-list.html">Frames</a><a id=3D"noFramesLink1" st=
yle=3D"display:none" href=3D"https://greensock.com/asdocs/com/greensock/Tim=
elineMax.html"> No Frames </a></td><td class=3D"titleTableLogo" align=3D"ri=
ght" rowspan=3D"3"><img src=3D"https://greensock.com/asdocs/images/logo.jpg=
" class=3D"logoImage" alt=3D" Adobe Logo " title=3D" Adobe Logo "></td></tr=
><tr class=3D"titleTableRow2"><td class=3D"titleTableSubTitle" id=3D"subTit=
le" align=3D"left">TimelineMax</td><td class=3D"titleTableSubNav" id=3D"sub=
Nav" align=3D"right"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#propertySummary">Properties</a>&nbsp;| <a href=3D"https://=
greensock.com/asdocs/com/greensock/TimelineMax.html#methodSummary">Methods<=
/a>&nbsp;| <a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMa=
x.html#includeExamplesSummary">Examples</a></td></tr><tr class=3D"titleTabl=
eRow3"><td colspan=3D"3">&nbsp;</td></tr></tbody></table><div xmlns:fn=3D"h=
ttp://www.w3.org/2005/xpath-functions" class=3D"MainContent"><table class=
=3D"classHeaderTable" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td cl=
ass=3D"classHeaderTableLabel">Package</td><td><a href=3D"https://greensock.=
com/asdocs/com/greensock/package-detail.html">com.greensock</a></td></tr><t=
r><td class=3D"classHeaderTableLabel">Class</td><td class=3D"classSignature=
">public  class  TimelineMax</td></tr><tr><td class=3D"classHeaderTableLabe=
l">Inheritance</td><td class=3D"inheritanceList">TimelineMax  <img src=3D"h=
ttps://greensock.com/asdocs/images/inherit-arrow.gif" title=3D"Inheritance"=
 alt=3D"Inheritance" class=3D"inheritArrow"> <a href=3D"https://greensock.c=
om/asdocs/com/greensock/TimelineLite.html">TimelineLite</a> <img src=3D"htt=
ps://greensock.com/asdocs/images/inherit-arrow.gif" title=3D"Inheritance" a=
lt=3D"Inheritance" class=3D"inheritArrow"> <a href=3D"https://greensock.com=
/asdocs/com/greensock/core/SimpleTimeline.html">SimpleTimeline</a> <img src=
=3D"https://greensock.com/asdocs/images/inherit-arrow.gif" title=3D"Inherit=
ance" alt=3D"Inheritance" class=3D"inheritArrow"> <a href=3D"https://greens=
ock.com/asdocs/com/greensock/core/Animation.html">Animation</a> <img src=3D=
"https://greensock.com/asdocs/images/inherit-arrow.gif" title=3D"Inheritanc=
e" alt=3D"Inheritance" class=3D"inheritArrow"> Object</td></tr><tr><td clas=
s=3D"classHeaderTableLabel">Implements</td><td> flash.events.IEventDispatch=
er</td></tr></tbody></table><p></p><p></p><p></p>
 TimelineMax extends TimelineLite, offering exactly the same functionality =
plus useful=20
 (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(=
), addCallback(),=20
 removeCallback(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefor=
e(),
 getActive(), AS3 event dispatching (and probably more in the future). It i=
s the ultimate=20
 sequencing tool that acts like a container for tweens and other timelines,=
 making it=20
 simple to control them as a whole and precisely manage their timing. Witho=
ut TimelineMax=20
 (or its little brother TimelineLite), building complex sequences would be =
far more cumbersome=20
 because you'd need to use the <code>delay</code> special property for ever=
ything which would=20
 make future edits far more tedius. Here is a basic example:=20
 <div class=3D"listing" version=3D"3.0"><pre>TweenLite.to(mc, 1, {x:100});
TweenLite.to(mc, 1, {y:50, delay:1});
TweenLite.to(mc, 1, {alpha:0, delay:2});
</pre></div>
 The above code animates <code>mc.x</code> to 100, then <code>mc.y</code> t=
o 50, and finally=20
 <code>mc.alpha</code> to 0 (notice the <code>delay</code> in all but the f=
irst tween). But=20
 imagine if you wanted to increase the duration of the first tween to 1.5 -=
 you'd need to
 adjust every delay thereafter. And what if you want to <code>pause()</code=
> the whole=20
 sequence or <code>restart()</code> it or <code>reverse()</code> it on-the-=
fly or repeat
 it twice? This becomes quite messy (or flat-out impossible), but TimelineM=
ax makes it=20
 incredibly simple:
=20
 <div class=3D"listing" version=3D"3.0"><pre>var tl =3D new TimelineMax({re=
peat:2, repeatDelay:1});
tl.add( TweenLite.to(mc, 1, {x:100}) );
tl.add( TweenLite.to(mc, 1, {y:50}) );
tl.add( TweenLite.to(mc, 1, {alpha:0}) );
=20
//then later, control the whole thing...
tl.pause();
tl.resume();
tl.seek(1.5);
tl.reverse();
...
</pre></div>
 Or use the convenient <code>to()</code> method and chaining to make it eve=
n shorter:
 <div class=3D"listing" version=3D"3.0"><pre>var tl =3D new TimelineMax();
tl.to(mc, 1, {x:100}).to(mc, 1, {y:50}).to(mc, 1, {alpha:0});
</pre></div>
=20
               <p>Now you can feel free to adjust any of the tweens without=
 worrying about trickle-down
 changes to delays. Increase the duration of that first tween and everythin=
g automatically
 adjusts.</p>
=20
               <p>Here are some other benefits and features of TimelineMax:=
</p>
=20
 	             <ul>
 		               <li> Things can overlap on the timeline as much as you wa=
nt. You have complete control=20
 			over where tweens/timelines are placed. Most other animation tools can =
only do basic=20
 			one-after-the-other sequencing but can't allow things to overlap. Imagi=
ne appending
 			a tween that moves an object and you want it to start fading out 0.5 se=
conds before the=20
 			end of that tween? With TimelineMax it's easy.</li>
=20
 		               <li> Add labels, callbacks, play(), stop(), seek(), resta=
rt(), and even reverse() smoothly anytime.</li>
 	=09
 		               <li> Nest timelines within timelines as deeply as you wan=
t. This means you can modularize
 			your code and make it far more efficient. Imagine building your app wit=
h common animateIn()=20
 			and animateOut() methods that return a tween or timeline instance, then=
 you can string=20
 			things together like=20
 			<code>myTimeline.add( myObject.animateIn() ).add( myObject.animateOut()=
, "+=3D4").add( myObject2.animateIn(), "-=3D0.5")...</code>
                  </li>
 	=09
 		               <li> Speed up or slow down the entire timeline with its <=
code>timeScale()</code> method.=20
 			You can even tween it to gradually speed up or slow down the animation =
smoothly.</li>
 	=09
 		               <li> Get or set the progress of the timeline using its <c=
ode>progress()</code> or=20
 			<code>totalProgress()</code> methods. For example, to skip to the halfw=
ay point,=20
 			set <code>myTimeline.progress(0.5);</code>
                  </li>
 		 =20
 		               <li> Tween the <code>time, totalTime, progress,</code> or=
 <code>totalProgress</code> to=20
 			fastforward/rewind the timeline. You could even attach a slider to one =
of these to give the=20
 			user the ability to drag forward/backward through the timeline.</li>
 		 =20
 		               <li> Add <code>onComplete, onStart, onUpdate, onRepeat</c=
ode> and/or <code>onReverseComplete</code>=20
 			callbacks using the constructor's <code>vars</code> object like
 			<code>var tl =3D new TimelineMax({onComplete:myFunction});</code>
                  </li>
=20
 		               <li> Kill the tweens of a particular object inside the ti=
meline with <code>kill(null, target)</code>=20
 			or get the tweens of an object with <code>getTweensOf()</code> or get a=
ll the tweens/timelines=20
 			in the timeline with <code>getChildren()</code>
                  </li>
 		 =20
 		               <li> Set the timeline to repeat any number of times or in=
definitely. You can even set a delay
 		  	between each repeat cycle and/or cause the repeat cycles to yoyo, app=
earing to reverse direction
 		  	every other cycle. </li>
 	=09
 		               <li> listen for START, UPDATE, REPEAT, REVERSE_COMPLETE, =
and COMPLETE events.</li>
 	=09
 		               <li> get the active tweens in the timeline with getActive=
().</li>
 		 =20
 		               <li> By passing <code>useFrames:true</code> in the <code>=
vars</code> parameter, you can
 			base the timing on frames instead of seconds. Please note, however, tha=
t
 		  	the timeline's timing mode dictates its childrens' timing mode as wel=
l. </li>
 	=09
 		               <li> Get the <code>currentLabel()</code> or find labels a=
t various positions in the timeline
 			using <code>getLabelAfter()</code> and <code>getLabelBefore()</code>
                  </li>
 	=09
 		               <li> You can export all the tween/timelines from the root=
 (master) timeline anytime into=20
 			a TimelineLite instance using <code>TimelineLite.exportRoot()</code> so=
 that
 			you can <code>pause()</code> them all or <code>reverse()</code> or alte=
r their=20
 			<code>timeScale</code>, etc. without affecting tweens/timelines that yo=
u create in
 			the future. Imagine a game that has all its animation driven by the Gre=
enSock=20
 			Animation Platform and it needs to pause or slow down while a status sc=
reen pops up.=20
 			Very easy.</li>
 		 =20
 	             </ul>
=20
=20
               <p>
                  <b>SPECIAL PROPERTIES:</b>
               </p>
               <p>You can optionally use the constructor's <code>vars</code=
> parameter to define any of
 the special properties below (syntax example: <code>new TimelineMax({onCom=
plete:myFunction, repeat:2, repeatDelay:1, yoyo:true});</code>
               </p>
=20
               <ul>
 	                <li>
                     <b> delay </b>:<i> Number</i> -
 				 Amount of delay in seconds (or frames for frames-based tweens) before=
 the timeline should begin.</li>
=20
                  <li>
                     <b> paused </b>:<i> Boolean</i> -
 				 If <code>true</code>, the timeline will pause itself immediately upon=
 creation (by default,=20
 				 timelines automatically begin playing immediately). If you plan to cr=
eate a TimelineMax and=20
 				 then populate it later (after one or more frames elapse), it is typic=
ally best to set=20
 				 <code>paused:true</code> and then <code>play()</code> after you popul=
ate it.</li>
 =09
 	                <li>
                     <b> onComplete </b>:<i> Function</i> -
 				 A function that should be called when the timeline has completed</li>
 =09
 	                <li>
                     <b> onCompleteParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onComplete</code> function. =
For example,
 				 <code>new TimelineMax({onComplete:myFunction, onCompleteParams:["para=
m1", "param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onCompleteParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> useFrames </b>:<i> Boolean</i> -
 				 If <code>useFrames</code> is <code>true</code>, the timelines's timin=
g will be=20
 				 based on frames instead of seconds because it is intially added to th=
e root
 				 frames-based timeline. This causes both its <code>duration</code>
 				 and <code>delay</code> to be based on frames. An animations's timing =
mode is=20
 				 always determined by its parent <code>timeline</code>.</li>
=20
                  <li>
                     <b> tweens </b>:<i> Array</i> -
 				 To immediately insert several tweens into the timeline, use the <code=
>tweens</code>=20
 				 special property to pass in an Array of TweenLite/TweenMax/TimelineLi=
te/TimelineMax=20
 				 instances. You can use this in conjunction with the <code>align</code=
> and=20
 				 <code>stagger</code> special properties to set up complex sequences w=
ith minimal code.
 				 These values simply get passed to the <code>add()</code> method.</li>
 =09
 	                <li>
                     <b> align </b>:<i> String</i> -
 				 Only used in conjunction with the <code>tweens</code> special propert=
y when multiple=20
 				 tweens are	to be inserted immediately. The value simply gets passed t=
o the=20
 				 <code>add()</code> method. The default is <code>"normal"</code>.=20
 				 Options are:
 					<ul>
 						                 <li>
                           <b>
                              <code>"sequence"</code>
                           </b>: aligns the tweens one-after-the-other in a=
 sequence</li>
 						                 <li>
                           <b>
                              <code>"start"</code>
                           </b>: aligns the start times of all of the tween=
s (ignores delays)</li>
 						                 <li>
                           <b>
                              <code>"normal"</code>
                           </b>: aligns the start times of all the tweens (=
honors delays)</li>
 					               </ul>
 				The <code>align</code> special property does <b>not</b> force all chil=
d=20
 				tweens/timelines to maintain relative positioning, so for example, if =
you use=20
 				<code>"sequence"</code> and then later change the duration of one of t=
he nested tweens,=20
 				it does <b>not</b> force all subsequent timelines to change their posi=
tion.
 				The <code>align</code> special property only affects the alignment of =
the tweens that are
 				initially placed into the timeline through the <code>tweens</code> spe=
cial property of=20
 				the <code>vars</code> object.</li>
 									=09
 	                <li>
                     <b> stagger </b>:<i> Number</i> -
 				 Only used in conjunction with the <code>tweens</code> special propert=
y when multiple=20
 				 tweens are	to be inserted immediately. It staggers the tweens by a se=
t amount of time=20
 				 in seconds (or in frames if <code>useFrames</code> is true). For exam=
ple, if the=20
 				 stagger value is 0.5 and the "align" property is set to <code>"start"=
</code>, the=20
 				 second tween will start 0.5 seconds after the first one starts, then =
0.5 seconds=20
 				 later the third one will start, etc. If the align property is <code>"=
sequence"</code>,
 				 there would be 0.5 seconds added between each tween. This value simpl=
y gets=20
 				 passed to the <code>add()</code> method. Default is 0.</li>
=20
                  <li>
                     <b> onStart </b>:<i> Function</i> -
 				 A function that should be called when the timeline begins (when its <=
code>time</code>
 				 changes from 0 to some other value which can happen more than once if=
 the=20
 				 timeline is restarted multiple times).</li>
 =09
 	                <li>
                     <b> onStartParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onStart</code> function. For=
 example,=20
 				 <code>new TimelineMax({onStart:myFunction, onStartParams:["param1", "=
param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onStartParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> onUpdate </b>:<i> Function</i> -
 				 A function that should be called every time the timeline updates =20
 				 (on every frame while the timeline is active)</li>
 =09
 	                <li>
                     <b> onUpdateParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onUpdate</code> function. Fo=
r example,
 				 <code>new TimelineMax({onUpdate:myFunction, onUpdateParams:["param1",=
 "param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onUpdateParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> onReverseComplete </b>:<i> Function</i> -
 				 A function that should be called when the timeline has reached its be=
ginning again from the=20
 				 reverse direction. For example, if <code>reverse()</code> is called, =
the timeline will move
 				 back towards its beginning and when its <code>time</code> reaches 0, =
<code>onReverseComplete</code>
 				 will be called. This can also happen if the timeline is placed in a T=
imelineLite or TimelineMax=20
 				 instance that gets reversed and plays the timeline backwards to (or p=
ast) the beginning.</li>
 =09
 	                <li>
                     <b> onReverseCompleteParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onReverseComplete</code> fun=
ction. For example,=20
 				 <code>new TimelineMax({onReverseComplete:myFunction, onReverseComplet=
eParams:["param1", "param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onReverseCompleteParams:["{self}", "param2"]</code>
                  </li>
=20
                  <li>
                     <b> autoRemoveChildren </b>:<i> Boolean</i> -
 				If <code>autoRemoveChildren</code> is set to <code>true</code>, as soo=
n as child=20
 				tweens/timelines complete, they will automatically get killed/removed.=
 This is normally=20
 				undesireable because it prevents going backwards in time (like if you =
want to=20
 				<code>reverse()</code> or set the <code>progress</code> lower, etc.). =
It can, however,=20
 				improve speed and memory management. The root timelines use <code>auto=
RemoveChildren:true</code>.</li>
=20
                  <li>
                     <b> smoothChildTiming </b>:<i> Boolean</i> -
 				Controls whether or not child tweens/timelines are repositioned automa=
tically=20
 				(changing their <code>startTime</code>) in order to maintain smooth pl=
ayback when=20
 				properties are changed on-the-fly. For example, imagine that the timel=
ine's playhead is=20
 				on a child tween that is 75% complete, moving mc.x from 0 to 100 and t=
hen that tween's=20
 				<code>reverse()</code> method is called. If <code>smoothChildTiming</c=
ode> is <code>false</code>=20
 				(the default except for the root timelines), the tween would flip in p=
lace, keeping its=20
 				<code>startTime</code> consistent. Therefore the playhead of the timel=
ine would now be=20
 				at the tween's 25% completion point instead of 75%. Remember, the time=
line's playhead=20
 				position and direction are unaffected by child tween/timeline changes.=
 mc.x would jump=20
 				from 75 to 25, but the tween's position in the timeline would remain c=
onsistent. However,=20
 				if <code>smoothChildTiming</code> is <code>true</code>, that child twe=
en's=20
 				<code>startTime</code> would be adjusted so that the timeline's playhe=
ad intersects=20
 				with the same spot on the tween (75% complete) as it had immediately b=
efore=20
 				<code>reverse()</code> was called, thus playback appears perfectly smo=
oth. mc.x=20
 				would still be 75 and it would continue from there as the playhead mov=
es on, but=20
 				since the tween is reversed now mc.x will travel back towards 0 instea=
d of 100.=20
 				Ultimately it's a decision between prioritizing smooth on-the-fly play=
back=20
 				(<code>true</code>) or consistent position(s) of child tweens/timeline=
s=20
 				(<code>false</code>).=20
=20
 				Some examples of on-the-fly changes to child tweens/timelines that cou=
ld cause their=20
 				<code>startTime</code> to change when <code>smoothChildTiming</code> i=
s <code>true</code>=20
 				are: <code>reversed, timeScale, progress, totalProgress, time, totalTi=
me, delay, pause,=20
 				resume, duration,</code> and <code>totalDuration</code>.</li>
 =09
                  <li>
                     <b> repeat </b>:<i> Number</i> -
 				 Number of times that the timeline should repeat after its first itera=
tion. For example,=20
 				 if <code>repeat</code> is 1, the timeline will play a total of twice =
(the initial play
 				 plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> s=
hould always be an integer.</li>
 =09
 	                <li>
                     <b> repeatDelay </b>:<i> Number</i> -
 				 Amount of time in seconds (or frames for frames-based timelines) betw=
een repeats. For example,
 				 if <code>repeat</code> is 2 and <code>repeatDelay</code> is 1, the ti=
meline will play initially,
 				 then wait for 1 second before it repeats, then play again, then wait =
1 second again before=20
 				 doing its final repeat.</li>
 =09
 	                <li>
                     <b> yoyo </b>:<i> Boolean</i> -
 				 If <code>true</code>, every other <code>repeat</code> cycle will run =
in the opposite
 				 direction so that the timeline appears to go back and forth (forward =
then backward).
 				 This has no affect on the "<code>reversed</code>" property though. So=
 if <code>repeat</code>=20
 				 is 2 and <code>yoyo</code> is <code>false</code>, it will look like:=
=20
 				 start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</c=
ode> is <code>true</code>,=20
 				 it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.</=
li>
 =20
 	                <li>
                     <b> onRepeat </b>:<i> Function</i> -
 				 A function that should be called each time the timeline repeats</li>
 =09
 	                <li>
                     <b> onRepeatParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the onRepeat function. For example,=20
 				 <code>new TimelineMax({repeat:3, onRepeat:myFunction, onRepeatParams:=
[mc, "param2"]});</code>
 				 To self-reference the timeline instance itself in one of the paramete=
rs, use <code>"{self}"</code>,
 				 like: <code>onRepeatParams:["{self}", "param2"]</code>
                  </li>
 								=09
 	                <li>
                     <b> onStartListener </b>:<i> Function</i> (AS3 only) -
 				 A function that should be called (and passed an event parameter) when=
 the timeline begins=20
 				 (when its <code>totalTime</code> changes from 0 to some other value w=
hich can happen more=20
 				 than once if the timeline is restarted multiple times). Identical to =
<code>onStart</code> except
 				 that the function will always be passed an event parameter whose <cod=
e>target</code> property points
 				 to the timeline. It's the same as doing <code>myTimeline.addEventList=
ener("start", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onStart</code>.</li>
 =09
 	                <li>
                     <b> onUpdateListener </b>:<i> Function</i> (AS3 only) =
-
 				 A function that should be called (and passed an event parameter) each=
 time the timeline updates=20
 				 (on every frame while the timeline is active). Identical to <code>onU=
pdate</code> except
 				 that the function will always be passed an event parameter whose <cod=
e>target</code> property points
 				 to the timeline. It's the same as doing <code>myTimeline.addEventList=
ener("update", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onUpdate</code>.</li>
 	 =20
 	                <li>
                     <b> onCompleteListener </b>:<i> Function</i> (AS3 only=
) -=20
 				 A function that should be called (and passed an event parameter) each=
 time the timeline completes.=20
 				 Identical to <code>onComplete</code> except that the function will al=
ways be passed an event=20
 				 parameter whose <code>target</code> property points to the timeline. =
It's the same as doing=20
 				 <code>myTimeline.addEventListener("complete", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onComplete</code>.</li>
=20
                  <li>
                     <b> onReverseCompleteListener </b>:<i> Function</i> (A=
S3 only) -
 				 A function that should be called (and passed an event parameter) each=
 time the timeline has reached=20
 				 its beginning again from the reverse direction. For example, if <code=
>reverse()</code> is called=20
 				 the timeline will move back towards its beginning and when its <code>=
totalTime</code> reaches 0,=20
 				 <code>onReverseCompleteListener</code> will be called. This can also =
happen if the timeline is placed=20
 				 in another TimelineLite or TimelineMax instance that gets reversed an=
d plays the timeline backwards to=20
 				 (or past) the beginning. Identical to <code>onReverseComplete</code> =
except that the function=20
 				 will always be passed an event parameter whose <code>target</code> pr=
operty points to the timeline.=20
 				 It's the same as doing <code>myTimeline.addEventListener("reverseComp=
lete", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onReverseComplete</code>.</li>
=20
                  <li>
                     <b> onRepeatListener </b>:<i> Function</i> (AS3 only) =
-
 				 A function that should be called (and passed an event parameter) each=
 time the timeline repeats.=20
 				 Identical to <code>onRepeat</code> except that the function will alwa=
ys be passed an event=20
 				 parameter whose <code>target</code> property points to the timeline. =
It's the same as doing=20
 				 <code>myTimeline.addEventListener("repeat", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onRepeat</code>.</li>
 =09
 	             </ul>
=20
            <p></p><p><a href=3D"https://greensock.com/asdocs/com/greensock=
/TimelineMax.html#includeExamplesSummary">View the examples</a></p><br><hr>=
</div><a name=3D"propertySummary"></a><div class=3D"summarySection"><div cl=
ass=3D"summaryTableTitle">Public Properties</div><div class=3D"showHideLink=
s"><div id=3D"hideInheritedProperty" class=3D"hideInheritedProperty"><a cla=
ss=3D"showHideLink" href=3D"https://greensock.com/asdocs/com/greensock/Time=
lineMax.html#propertySummary"><img class=3D"showHideLinkImage" src=3D"https=
://greensock.com/asdocs/images/expanded.gif"> Hide Inherited Public Propert=
ies</a></div><div id=3D"showInheritedProperty" class=3D"showInheritedProper=
ty"><a class=3D"showHideLink" href=3D"https://greensock.com/asdocs/com/gree=
nsock/TimelineMax.html#propertySummary"><img class=3D"showHideLinkImage" sr=
c=3D"https://greensock.com/asdocs/images/collapsed.gif"> Show Inherited Pub=
lic Properties</a></div></div><table cellspacing=3D"0" cellpadding=3D"3" cl=
ass=3D"summaryTable hideInheritedProperty" id=3D"summaryTableProperty"><tbo=
dy><tr><th>&nbsp;</th><th colspan=3D"2">Property</th><th class=3D"summaryTa=
bleOwnerCol">Defined By</th></tr><tr class=3D"hideInheritedProperty" bgcolo=
r=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"=
summaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images=
/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inher=
itedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/core/SimpleTimeline.html#autoRemov=
eChildren" class=3D"signatureLink">autoRemoveChildren</a> : Boolean<div cla=
ss=3D"summaryTableDescription"> If true, child tweens/timelines will be rem=
oved as soon as they complete.</div></td><td class=3D"summaryTableOwnerCol"=
><a href=3D"https://greensock.com/asdocs/com/greensock/core/SimpleTimeline.=
html">SimpleTimeline</a></td></tr><tr class=3D"hideInheritedProperty" bgcol=
or=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D=
"summaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/image=
s/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inhe=
ritedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><a href=3D"h=
ttps://greensock.com/asdocs/com/greensock/core/Animation.html#data" class=
=3D"signatureLink">data</a> : *<div class=3D"summaryTableDescription"> A pl=
ace to store any data you want (initially populated with vars.data if it ex=
ists).</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://gree=
nsock.com/asdocs/com/greensock/core/Animation.html">Animation</a></td></tr>=
<tr class=3D"hideInheritedProperty" bgcolor=3D"#FFFFFF"><td class=3D"summar=
yTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img =
src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inh=
erited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=
=3D"summaryTableSignatureCol"><a href=3D"https://greensock.com/asdocs/com/g=
reensock/core/SimpleTimeline.html#smoothChildTiming" class=3D"signatureLink=
">smoothChildTiming</a> : Boolean<div class=3D"summaryTableDescription">=20
		 Controls whether or not child tweens/timelines are repositioned automati=
cally (changing their startTime)=20
		 in order to maintain smooth playback when properties are changed on-the-=
fly.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greens=
ock.com/asdocs/com/greensock/core/SimpleTimeline.html">SimpleTimeline</a></=
td></tr><tr class=3D"hideInheritedProperty" bgcolor=3D"#F2F2F2"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><a href=3D"https://greensock.com/asd=
ocs/com/greensock/core/Animation.html#ticker" class=3D"signatureLink">ticke=
r</a> : Shape<div class=3D"summaryTableDescription">[static]=20
		 The object that dispatches a "tick" event each time the engine updates, =
making it easy for=20
		 you to add your own listener(s) to run custom logic after each update (g=
reat for game developers).</div></td><td class=3D"summaryTableOwnerCol"><a =
href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Ani=
mation</a></td></tr><tr class=3D"hideInheritedProperty" bgcolor=3D"#FFFFFF"=
><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableI=
nheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSum=
mary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryIm=
age"></td><td class=3D"summaryTableSignatureCol"><a href=3D"https://greenso=
ck.com/asdocs/com/greensock/core/Animation.html#timeline" class=3D"signatur=
eLink">timeline</a> : <a href=3D"https://greensock.com/asdocs/com/greensock=
/core/SimpleTimeline.html">SimpleTimeline</a><div class=3D"summaryTableDesc=
ription"> [Read-only] Parent timeline.</div></td><td class=3D"summaryTableO=
wnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animati=
on.html">Animation</a></td></tr><tr class=3D"hideInheritedProperty" bgcolor=
=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><a href=3D"htt=
ps://greensock.com/asdocs/com/greensock/core/Animation.html#vars" class=3D"=
signatureLink">vars</a> : Object<div class=3D"summaryTableDescription"> The=
 vars object passed into the constructor which stores configuration variabl=
es like onComplete, onUpdate, etc.</div></td><td class=3D"summaryTableOwner=
Col"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.h=
tml">Animation</a></td></tr></tbody></table></div><a name=3D"methodSummary"=
></a><div class=3D"summarySection"><div class=3D"summaryTableTitle">Public =
Methods </div><div class=3D"showHideLinks"><div id=3D"hideInheritedMethod" =
class=3D"hideInheritedMethod"><a class=3D"showHideLink" href=3D"https://gre=
ensock.com/asdocs/com/greensock/TimelineMax.html#methodSummary"><img class=
=3D"showHideLinkImage" src=3D"https://greensock.com/asdocs/images/expanded.=
gif"> Hide Inherited Public Methods</a></div><div id=3D"showInheritedMethod=
" class=3D"showInheritedMethod"><a class=3D"showHideLink" href=3D"https://g=
reensock.com/asdocs/com/greensock/TimelineMax.html#methodSummary"><img clas=
s=3D"showHideLinkImage" src=3D"https://greensock.com/asdocs/images/collapse=
d.gif"> Show Inherited Public Methods</a></div></div><table cellspacing=3D"=
0" cellpadding=3D"3" class=3D"summaryTable " id=3D"summaryTableMethod"><tbo=
dy><tr><th>&nbsp;</th><th colspan=3D"2">Method</th><th class=3D"summaryTabl=
eOwnerCol">Defined By</th></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summar=
ySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineM=
ax.html#TimelineMax()" class=3D"signatureLink">TimelineMax</a>(vars:Object =
=3D null)</div><div class=3D"summaryTableDescription">
		 Constructor.</div></td><td class=3D"summaryTableOwnerCol">TimelineMax</t=
d></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"s=
ummaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">=
<img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=
=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td=
 class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#add()" cla=
ss=3D"signatureLink">add</a>(value:*, position:* =3D +=3D0, align:String =
=3D normal, stagger:Number =3D 0):*</div><div class=3D"summaryTableDescript=
ion">[override]=20
		 Adds a tween, timeline, callback, or label (or an array of them) to the =
timeline.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://g=
reensock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td><=
/tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol"=
>&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=
=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineMax.html#addCallback()" cl=
ass=3D"signatureLink">addCallback</a>(callback:Function, position:*, params=
:Array =3D null):<a href=3D"https://greensock.com/asdocs/com/greensock/Time=
lineMax.html">TimelineMax</a></div><div class=3D"summaryTableDescription">
		 Inserts a callback at a particular position.</div></td><td class=3D"summ=
aryTableOwnerCol">TimelineMax</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><=
td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInh=
eritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=
=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock=
/TimelineMax.html#addEventListener()" class=3D"signatureLink">addEventListe=
ner</a>(type:String, listener:Function, useCapture:Boolean =3D false, prior=
ity:int =3D 0, useWeakReference:Boolean =3D false):void</div><div class=3D"=
summaryTableDescription">
		 (AS3 only)
		 Registers a function that should be called each time a particular type o=
f event occurs, like=20
		 "complete" or "update".</div></td><td class=3D"summaryTableOwnerCol">Tim=
elineMax</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td=
 class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInher=
itanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary=
.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"=
></td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature=
"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#a=
ddLabel()" class=3D"signatureLink">addLabel</a>(label:String, position:* =
=3D +=3D0):*</div><div class=3D"summaryTableDescription">
		 Adds a label to the timeline, making it easy to mark important positions=
/times.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://gre=
ensock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td></t=
r><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summar=
yTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img =
src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inh=
erited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=
=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineLite.html#addPause()" clas=
s=3D"signatureLink">addPause</a>(position:* =3D +=3D0, callback:Function =
=3D null, params:Array =3D null):*</div><div class=3D"summaryTableDescripti=
on">
		 Inserts a special callback that pauses playback of the timeline at a
		 particular time or label.</div></td><td class=3D"summaryTableOwnerCol"><=
a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html">Tim=
elineLite</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF=
"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTable=
InheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSu=
mmary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryI=
mage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySign=
ature"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.h=
tml#call()" class=3D"signatureLink">call</a>(callback:Function, params:Arra=
y =3D null, position:* =3D +=3D0):*</div><div class=3D"summaryTableDescript=
ion">
		 Adds a callback to the end of the timeline (or elsewhere using the "posi=
tion" parameter)
		  - this is a convenience method that accomplishes exactly the same thing=
 as=20
		 add( TweenLite.delayedCall(...) ) but with less code.</div></td><td clas=
s=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/gree=
nsock/TimelineLite.html">TimelineLite</a></td></tr><tr class=3D"hideInherit=
edMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</=
td><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.c=
om/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited=
" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCo=
l"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/=
com/greensock/TimelineLite.html#clear()" class=3D"signatureLink">clear</a>(=
labels:Boolean =3D true):*</div><div class=3D"summaryTableDescription">
		 Empties the timeline of all tweens, timelines, and callbacks (and option=
ally labels too).</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"h=
ttps://greensock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</=
a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePad=
dingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td=
 class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#currentLabe=
l()" class=3D"signatureLink">currentLabel</a>(value:String =3D null):*</div=
><div class=3D"summaryTableDescription">=20
		 Gets the closest label that is at or before the current time, or jumps t=
o a provided label=20
		 (behavior depends on whether or not you pass a parameter to the method).=
</div></td><td class=3D"summaryTableOwnerCol">TimelineMax</td></tr><tr clas=
s=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePadd=
ingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"htt=
ps://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" ti=
tle=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summary=
TableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://green=
sock.com/asdocs/com/greensock/core/Animation.html#delay()" class=3D"signatu=
reLink">delay</a>(value:Number):*</div><div class=3D"summaryTableDescriptio=
n">=20
		 Gets or sets the animation's initial delay which is the length of time i=
n seconds=20
		 (or frames for frames-based tweens) before the animation should begin.</=
div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.co=
m/asdocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr clas=
s=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePadd=
ingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"htt=
ps://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" ti=
tle=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summary=
TableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://green=
sock.com/asdocs/com/greensock/TimelineLite.html#duration()" class=3D"signat=
ureLink">duration</a>(value:Number):*</div><div class=3D"summaryTableDescri=
ption">[override]=20
		 Gets the timeline's duration or, if used as a setter, adjusts the timeli=
ne's=20
		 timeScale to fit it within the specified duration.</div></td><td class=
=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/green=
sock/TimelineLite.html">TimelineLite</a></td></tr><tr class=3D"hideInherite=
dMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</t=
d><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.co=
m/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited"=
 class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol=
"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/c=
om/greensock/core/Animation.html#eventCallback()" class=3D"signatureLink">e=
ventCallback</a>(type:String, callback:Function =3D null, params:Array =3D =
null):*</div><div class=3D"summaryTableDescription">
		 Gets or sets an event callback like "onComplete", "onUpdate", "onStart",=
 "onReverseComplete"
		 or "onRepeat" (onRepeat only applies to TweenMax or TimelineMax instance=
s)
		 along with any parameters that should be passed to that callback.</div><=
/td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asd=
ocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr class=3D"=
hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCo=
l">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"https://=
greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=
=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTab=
leSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TimelineLite.html#exportRoot()" class=3D"signatu=
reLink">exportRoot</a>(vars:Object =3D null, omitDelayedCalls:Boolean =3D t=
rue):<a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.htm=
l">TimelineLite</a></div><div class=3D"summaryTableDescription">[static]=20
		 Seamlessly transfers all tweens, timelines, and [optionally] delayed cal=
ls from the root=20
		 timeline into a new TimelineLite so that you can perform advanced tasks =
on a seemingly global=20
		 basis without affecting tweens/timelines that you create after the expor=
t.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td></tr><tr=
 class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTabl=
ePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=
=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inheri=
ted" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"=
summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"https:=
//greensock.com/asdocs/com/greensock/TimelineLite.html#from()" class=3D"sig=
natureLink">from</a>(target:Object, duration:Number, vars:Object, position:=
* =3D +=3D0):*</div><div class=3D"summaryTableDescription">
		 Adds a TweenLite.from() tween to the end of the timeline (or elsewhere u=
sing the "position" parameter)
		 - this is a convenience method that accomplishes exactly the same thing =
as=20
		 add( TweenLite.from(...) ) but with less code.</div></td><td class=3D"su=
mmaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/T=
imelineLite.html">TimelineLite</a></td></tr><tr class=3D"hideInheritedMetho=
d" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td =
class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.com/asdo=
cs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=
=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div=
 class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TimelineLite.html#fromTo()" class=3D"signatureLink">fromTo</a>(targe=
t:Object, duration:Number, fromVars:Object, toVars:Object, position:* =3D +=
=3D0):*</div><div class=3D"summaryTableDescription">
		 Adds a TweenLite.fromTo() tween to the end of the timeline - this is=20
		 a convenience method that accomplishes exactly the same thing as=20
		 add( TweenLite.fromTo(...) ) but with less code.</div></td><td class=3D"=
summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock=
/TimelineLite.html">TimelineLite</a></td></tr><tr class=3D"" bgcolor=3D"#FF=
FFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryT=
ableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div =
class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/gree=
nsock/TimelineMax.html#getActive()" class=3D"signatureLink">getActive</a>(n=
ested:Boolean =3D true, tweens:Boolean =3D true, timelines:Boolean =3D fals=
e):Array</div><div class=3D"summaryTableDescription">
		 Returns the tweens/timelines that are currently active in the timeline, =
meaning the timeline's
		 playhead is positioned on the child tween/timeline and the child isn't p=
aused.</div></td><td class=3D"summaryTableOwnerCol">TimelineMax</td></tr><t=
r class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTab=
lePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=
=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inheri=
ted" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"=
summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"https:=
//greensock.com/asdocs/com/greensock/TimelineLite.html#getChildren()" class=
=3D"signatureLink">getChildren</a>(nested:Boolean =3D true, tweens:Boolean =
=3D true, timelines:Boolean =3D true, ignoreBeforeTime:Number =3D -99999999=
99):Array</div><div class=3D"summaryTableDescription">
		 Returns an array containing all the tweens and/or timelines nested in th=
is timeline.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https:=
//greensock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></t=
d></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingC=
ol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td clas=
s=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"h=
ttps://greensock.com/asdocs/com/greensock/TimelineMax.html#getLabelAfter()"=
 class=3D"signatureLink">getLabelAfter</a>(time:Number):String</div><div cl=
ass=3D"summaryTableDescription">
		 Returns the next label (if any) that occurs after the time parameter.</d=
iv></td><td class=3D"summaryTableOwnerCol">TimelineMax</td></tr><tr class=
=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><=
td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTabl=
eSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greensock=
.com/asdocs/com/greensock/TimelineMax.html#getLabelBefore()" class=3D"signa=
tureLink">getLabelBefore</a>(time:Number):String</div><div class=3D"summary=
TableDescription">
		 Returns the previous label (if any) that occurs before the time paramete=
r.</div></td><td class=3D"summaryTableOwnerCol">TimelineMax</td></tr><tr cl=
ass=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</t=
d><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryT=
ableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greens=
ock.com/asdocs/com/greensock/TimelineMax.html#getLabelsArray()" class=3D"si=
gnatureLink">getLabelsArray</a>():Array</div><div class=3D"summaryTableDesc=
ription">=20
		 Returns an Array of label objects, each with a "time" and "name" propert=
y, in the order that they occur in the timeline.</div></td><td class=3D"sum=
maryTableOwnerCol">TimelineMax</td></tr><tr class=3D"hideInheritedMethod" b=
gcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td clas=
s=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/i=
mages/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"=
inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div cla=
ss=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greenso=
ck/TimelineLite.html#getLabelTime()" class=3D"signatureLink">getLabelTime</=
a>(label:String):Number</div><div class=3D"summaryTableDescription">
		 Returns the time associated with a particular label.</div></td><td class=
=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/green=
sock/TimelineLite.html">TimelineLite</a></td></tr><tr class=3D"hideInherite=
dMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</t=
d><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.co=
m/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited"=
 class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol=
"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/c=
om/greensock/TimelineLite.html#getTweensOf()" class=3D"signatureLink">getTw=
eensOf</a>(target:Object, nested:Boolean =3D true):Array</div><div class=3D=
"summaryTableDescription">
		 Returns the tweens of a particular object that are inside this timeline.=
</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.=
com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td></tr><tr c=
lass=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</=
td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summary=
TableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://green=
sock.com/asdocs/com/greensock/TimelineMax.html#invalidate()" class=3D"signa=
tureLink">invalidate</a>():*</div><div class=3D"summaryTableDescription">[o=
verride]   =20
		 Clears any initialization data (like starting/ending values in tweens) w=
hich can be useful if, for example,=20
		 you want to restart a tween without reverting to any previously recorded=
 starting values.</div></td><td class=3D"summaryTableOwnerCol">TimelineMax<=
/td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D=
"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol=
"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=
=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td=
 class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#isActive=
()" class=3D"signatureLink">isActive</a>():Boolean</div><div class=3D"summa=
ryTableDescription">=20
		 Indicates whether or not the animation is currently active (meaning the =
virtual playhead is actively moving across=20
		 this instance's time span and it is not paused, nor are any of its ances=
tor timelines).</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"htt=
ps://greensock.com/asdocs/com/greensock/core/Animation.html">Animation</a><=
/td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D=
"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol=
"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=
=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td=
 class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#kill()" =
class=3D"signatureLink">kill</a>(vars:Object =3D null, target:Object =3D nu=
ll):*</div><div class=3D"summaryTableDescription">
		 Kills the animation entirely or in part depending on the parameters.</di=
v></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/=
asdocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr class=
=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddi=
ngCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"http=
s://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" tit=
le=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryT=
ableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greens=
ock.com/asdocs/com/greensock/core/Animation.html#pause()" class=3D"signatur=
eLink">pause</a>(atTime:* =3D null, suppressEvents:Boolean =3D true):*</div=
><div class=3D"summaryTableDescription">
		 Pauses the instance, optionally jumping to a specific time.</div></td><t=
d class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/co=
m/greensock/core/Animation.html">Animation</a></td></tr><tr class=3D"hideIn=
heritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nb=
sp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greens=
ock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inhe=
rited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignat=
ureCol"><div class=3D"summarySignature"><a href=3D"https://greensock.com/as=
docs/com/greensock/core/Animation.html#paused()" class=3D"signatureLink">pa=
used</a>(value:Boolean =3D false):*</div><div class=3D"summaryTableDescript=
ion">=20
		 Gets or sets the animation's paused state which indicates whether or not=
 the animation=20
		 is currently paused.</div></td><td class=3D"summaryTableOwnerCol"><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Animat=
ion</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td =
class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheri=
tanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.=
gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage">=
</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"=
><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#=
play()" class=3D"signatureLink">play</a>(from:* =3D null, suppressEvents:Bo=
olean =3D true):*</div><div class=3D"summaryTableDescription">
		 Begins playing forward, optionally from a specific time (by default play=
back begins from
		 wherever the playhead currently is).</div></td><td class=3D"summaryTable=
OwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animat=
ion.html">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td cla=
ss=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritan=
ceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summ=
arySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/Timelin=
eMax.html#progress()" class=3D"signatureLink">progress</a>(value:Number, su=
ppressEvents:Boolean =3D false):*</div><div class=3D"summaryTableDescriptio=
n">[override] =20
		 Gets or sets the timeline's progress which is a value between 0 and 1 in=
dicating the position=20
		 of the virtual playhead (excluding repeats) where 0 is at the beginning,=
 0.5 is halfway complete,=20
		 and 1 is complete.</div></td><td class=3D"summaryTableOwnerCol">Timeline=
Max</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td clas=
s=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanc=
eCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif"=
 alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td=
><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a =
href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#remove=
()" class=3D"signatureLink">remove</a>(value:*):*</div><div class=3D"summar=
yTableDescription">
		 Removes a tween, timeline, callback, or label (or array of them) from th=
e timeline.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https:/=
/greensock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td=
></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCo=
l">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=
=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineMax.html#removeCallback()"=
 class=3D"signatureLink">removeCallback</a>(callback:Function, position:* =
=3D null):<a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMax=
.html">TimelineMax</a></div><div class=3D"summaryTableDescription">
		 Removes a callback.</div></td><td class=3D"summaryTableOwnerCol">Timelin=
eMax</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTableP=
addingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><=
td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a hr=
ef=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#removeEve=
ntListener()" class=3D"signatureLink">removeEventListener</a>(type:String, =
listener:Function, useCapture:Boolean =3D false):void</div><div class=3D"su=
mmaryTableDescription">=20
		 (AS3 only)
		 Removes a listener from the EventDispatcher object.</div></td><td class=
=3D"summaryTableOwnerCol">TimelineMax</td></tr><tr class=3D"hideInheritedMe=
thod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><=
td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.com/a=
sdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" cl=
ass=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><=
div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/=
greensock/TimelineLite.html#removeLabel()" class=3D"signatureLink">removeLa=
bel</a>(label:String):*</div><div class=3D"summaryTableDescription">
		=20
		 Removes a label from the timeline and returns the time of that label.</d=
iv></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com=
/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td></tr><tr clas=
s=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePadd=
ingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"htt=
ps://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" ti=
tle=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summary=
TableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://green=
sock.com/asdocs/com/greensock/core/SimpleTimeline.html#render()" class=3D"s=
ignatureLink">render</a>(time:Number, suppressEvents:Boolean =3D false, for=
ce:Boolean =3D false):void</div><div class=3D"summaryTableDescription">[ove=
rride]  </div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://gr=
eensock.com/asdocs/com/greensock/core/SimpleTimeline.html">SimpleTimeline</=
a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePad=
dingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td=
 class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#repeat()" c=
lass=3D"signatureLink">repeat</a>(value:Number =3D 0):*</div><div class=3D"=
summaryTableDescription">=20
		 Gets or sets the number of times that the timeline should repeat after i=
ts first iteration.</div></td><td class=3D"summaryTableOwnerCol">TimelineMa=
x</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePadd=
ingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td =
class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#repeatDelay=
()" class=3D"signatureLink">repeatDelay</a>(value:Number =3D 0):*</div><div=
 class=3D"summaryTableDescription">
		 Gets or sets the amount of time in seconds (or frames for frames-based t=
imelines) between repeats.</div></td><td class=3D"summaryTableOwnerCol">Tim=
elineMax</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td=
 class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInher=
itanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary=
.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"=
></td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature=
"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html=
#restart()" class=3D"signatureLink">restart</a>(includeDelay:Boolean =3D fa=
lse, suppressEvents:Boolean =3D true):*</div><div class=3D"summaryTableDesc=
ription">
		 Restarts and begins playing forward from the beginning.</div></td><td cl=
ass=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/gr=
eensock/core/Animation.html">Animation</a></td></tr><tr class=3D"hideInheri=
tedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;<=
/td><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.=
com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherite=
d" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureC=
ol"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs=
/com/greensock/core/Animation.html#resume()" class=3D"signatureLink">resume=
</a>(from:* =3D null, suppressEvents:Boolean =3D true):*</div><div class=3D=
"summaryTableDescription">
		 Resumes playing without altering direction (forward or reversed), option=
ally jumping to a specific time first.</div></td><td class=3D"summaryTableO=
wnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animati=
on.html">Animation</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=
=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"=
summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html#reverse()" class=3D"signatureLink">reverse</a>(from:* =3D =
null, suppressEvents:Boolean =3D true):*</div><div class=3D"summaryTableDes=
cription">
		 Reverses playback so that all aspects of the animation are oriented back=
wards including, for example,
		 a tween's ease.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"=
https://greensock.com/asdocs/com/greensock/core/Animation.html">Animation</=
a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#rever=
sed()" class=3D"signatureLink">reversed</a>(value:Boolean =3D false):*</div=
><div class=3D"summaryTableDescription">=20
		 Gets or sets the animation's reversed state which indicates whether or n=
ot the animation=20
		 should be played backwards.</div></td><td class=3D"summaryTableOwnerCol"=
><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html"=
>Animation</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFF=
F"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTabl=
eInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedS=
ummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummary=
Image"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySig=
nature"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.=
html#seek()" class=3D"signatureLink">seek</a>(position:*, suppressEvents:Bo=
olean =3D true):*</div><div class=3D"summaryTableDescription">[override]=20
		 Jumps to a specific time (or label) without affecting whether or not the=
 instance=20
		 is paused or reversed.</div></td><td class=3D"summaryTableOwnerCol"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html">Timeli=
neLite</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><=
td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInh=
eritanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSumma=
ry.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImag=
e"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignatu=
re"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html=
#set()" class=3D"signatureLink">set</a>(target:Object, vars:Object, positio=
n:* =3D +=3D0):*</div><div class=3D"summaryTableDescription">
		 Adds a zero-duration tween to the end of the timeline (or elsewhere usin=
g the "position" parameter)
		 that sets values immediately (when the virtual playhead reaches that pos=
ition
		 on the timeline) - this is a convenience method that accomplishes exactl=
y=20
		 the same thing as add( TweenLite.to(target, 0, {...}) ) but=20
		 with less code.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"=
https://greensock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite<=
/a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td clas=
s=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanc=
eCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif"=
 alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td=
><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a =
href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#shiftC=
hildren()" class=3D"signatureLink">shiftChildren</a>(amount:Number, adjustL=
abels:Boolean =3D false, ignoreBeforeTime:Number =3D 0):*</div><div class=
=3D"summaryTableDescription">
		 Shifts the startTime of the timeline's children by a certain amount and =
optionally adjusts labels too.</div></td><td class=3D"summaryTableOwnerCol"=
><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html">T=
imelineLite</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2=
F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTab=
leInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inherited=
Summary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummar=
yImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySi=
gnature"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite=
.html#staggerFrom()" class=3D"signatureLink">staggerFrom</a>(targets:Array,=
 duration:Number, vars:Object, stagger:Number =3D 0, position:* =3D +=3D0, =
onCompleteAll:Function =3D null, onCompleteAllParams:Array =3D null):*</div=
><div class=3D"summaryTableDescription">
		 Tweens an array of targets from a common set of destination values (usin=
g the current
		 values as the destination), but staggers their start times by a specifie=
d amount of time,=20
		 creating an evenly-spaced sequence with a surprisingly small amount of c=
ode.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greens=
ock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td></tr><=
tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTa=
blePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=
=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inheri=
ted" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"=
summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"https:=
//greensock.com/asdocs/com/greensock/TimelineLite.html#staggerFromTo()" cla=
ss=3D"signatureLink">staggerFromTo</a>(targets:Array, duration:Number, from=
Vars:Object, toVars:Object, stagger:Number =3D 0, position:* =3D +=3D0, onC=
ompleteAll:Function =3D null, onCompleteAllParams:Array =3D null):*</div><d=
iv class=3D"summaryTableDescription">
		 Tweens an array of targets from and to a common set of values, but stagg=
ers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code.</div></td><td class=3D"summaryTableOw=
nerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.=
html">TimelineLite</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=
=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"=
summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/Tim=
elineLite.html#staggerTo()" class=3D"signatureLink">staggerTo</a>(targets:A=
rray, duration:Number, vars:Object, stagger:Number, position:* =3D +=3D0, o=
nCompleteAll:Function =3D null, onCompleteAllParams:Array =3D null):*</div>=
<div class=3D"summaryTableDescription">
		 Tweens an array of targets to a common set of destination values, but st=
aggers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code.</div></td><td class=3D"summaryTableOw=
nerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.=
html">TimelineLite</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=
=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"=
summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html#startTime()" class=3D"signatureLink">startTime</a>(value:N=
umber):*</div><div class=3D"summaryTableDescription">=20
		 Gets or sets the time at which the animation begins on its parent timeli=
ne (after any delay
		 that was defined).</div></td><td class=3D"summaryTableOwnerCol"><a href=
=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Animati=
on</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td c=
lass=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInherit=
anceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.g=
if" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"><=
/td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature">=
<a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLite.html#sto=
p()" class=3D"signatureLink">stop</a>():*</div><div class=3D"summaryTableDe=
scription"> [deprecated] Pauses the timeline (used for consistency with Fla=
sh's MovieClip.stop() functionality, but essentially accomplishes the same =
thing as pause() without the parameter) </div></td><td class=3D"summaryTabl=
eOwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineLi=
te.html">TimelineLite</a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td c=
lass=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInherit=
anceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"su=
mmarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/Timel=
ineMax.html#time()" class=3D"signatureLink">time</a>(value:Number, suppress=
Events:Boolean =3D false):*</div><div class=3D"summaryTableDescription">[ov=
erride]=20
		 Gets or sets the local position of the playhead (essentially the current=
 time), not=20
		 including any repeats or repeatDelays.</div></td><td class=3D"summaryTab=
leOwnerCol">TimelineMax</td></tr><tr class=3D"hideInheritedMethod" bgcolor=
=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"=
summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html#timeScale()" class=3D"signatureLink">timeScale</a>(value:N=
umber):*</div><div class=3D"summaryTableDescription">=20
		 Factor that's used to scale time in the animation where 1 =3D normal spe=
ed (the default),
		 0.5 =3D half speed, 2 =3D double speed, etc.</div></td><td class=3D"summ=
aryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html">Animation</a></td></tr><tr class=3D"hideInheritedMethod" =
bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td cla=
ss=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/=
images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D=
"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div cl=
ass=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greens=
ock/TimelineLite.html#to()" class=3D"signatureLink">to</a>(target:Object, d=
uration:Number, vars:Object, position:* =3D +=3D0):*</div><div class=3D"sum=
maryTableDescription">
		 Adds a TweenLite.to() tween to the end of the timeline (or elsewhere usi=
ng the "position" parameter)
		  - this is a convenience method that accomplishes exactly the same thing=
 as=20
		 add( TweenLite.to(...) ) but with less code.</div></td><td class=3D"summ=
aryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/Tim=
elineLite.html">TimelineLite</a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2=
"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTable=
InheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div clas=
s=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensoc=
k/TimelineMax.html#totalDuration()" class=3D"signatureLink">totalDuration</=
a>(value:Number):*</div><div class=3D"summaryTableDescription">[override]=
=20
		 Gets or sets the total duration of the timeline in seconds (or frames fo=
r frames-based timelines)=20
		 including any repeats or repeatDelays.</div></td><td class=3D"summaryTab=
leOwnerCol">TimelineMax</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td cla=
ss=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritan=
ceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summ=
arySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/Timelin=
eMax.html#totalProgress()" class=3D"signatureLink">totalProgress</a>(value:=
Number, suppressEvents:Boolean =3D true):*</div><div class=3D"summaryTableD=
escription">[override] =20
		 Gets or sets the timeline's total progress which is a value between 0 an=
d 1 indicating the position=20
		 of the virtual playhead (including repeats) where 0 is at the beginning,=
 0.5 is=20
		 at the halfway point, and 1 is at the end (complete).</div></td><td clas=
s=3D"summaryTableOwnerCol">TimelineMax</td></tr><tr class=3D"hideInheritedM=
ethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td>=
<td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.com/=
asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" c=
lass=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol">=
<div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com=
/greensock/core/Animation.html#totalTime()" class=3D"signatureLink">totalTi=
me</a>(time:Number, suppressEvents:Boolean =3D false, uncapped:Boolean =3D =
false):*</div><div class=3D"summaryTableDescription">
		 Gets or sets the position of the playhead according to the totalDuration
		 which includes any repeats and repeatDelays (only available=20
		 in TweenMax and TimelineMax).</div></td><td class=3D"summaryTableOwnerCo=
l"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.htm=
l">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"s=
ummaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">=
&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySign=
ature"><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.ht=
ml#tweenFromTo()" class=3D"signatureLink">tweenFromTo</a>(fromPosition:*, t=
oPosition:*, vars:Object =3D null):<a href=3D"https://greensock.com/asdocs/=
com/greensock/TweenLite.html">TweenLite</a></div><div class=3D"summaryTable=
Description">
		 Creates a linear tween that essentially scrubs the playhead from a parti=
cular time or label=20
		 to another time or label and then stops.</div></td><td class=3D"summaryT=
ableOwnerCol">TimelineMax</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td c=
lass=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInherit=
anceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"su=
mmarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/Timel=
ineMax.html#tweenTo()" class=3D"signatureLink">tweenTo</a>(position:*, vars=
:Object =3D null):<a href=3D"https://greensock.com/asdocs/com/greensock/Twe=
enLite.html">TweenLite</a></div><div class=3D"summaryTableDescription">
		 Creates a linear tween that essentially scrubs the playhead to a particu=
lar time or label and=20
		 then stops.</div></td><td class=3D"summaryTableOwnerCol">TimelineMax</td=
></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"su=
mmaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><=
img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D=
"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td cl=
ass=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D=
"https://greensock.com/asdocs/com/greensock/TimelineLite.html#usesFrames()"=
 class=3D"signatureLink">usesFrames</a>():Boolean</div><div class=3D"summar=
yTableDescription">=20
		 [READ-ONLY] If true, the timeline's timing mode is frames-based instead =
of
		 seconds.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https:/=
/greensock.com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td=
></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCo=
l">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=
=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TimelineMax.html#yoyo()" class=3D"=
signatureLink">yoyo</a>(value:Boolean =3D false):*</div><div class=3D"summa=
ryTableDescription">
		 Gets or sets the timeline's yoyo state, where true causes
		 the timeline to go back and forth, alternating backward and forward on e=
ach=20
		 repeat.</div></td><td class=3D"summaryTableOwnerCol">TimelineMax</td></t=
r></tbody></table></div><div class=3D"MainContent"><a name=3D"constructorDe=
tail"></a><div class=3D"detailSectionHeader">Constructor Detail</div><a nam=
e=3D"TimelineMax()"></a><a name=3D"TimelineMax(Object)"></a><table class=3D=
"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"=
detailHeaderName">TimelineMax</td><td class=3D"detailHeaderParens">()</td><=
td class=3D"detailHeaderType">Constructor</td></tr></tbody></table><div cla=
ss=3D"detailBody"><code>public function TimelineMax(vars:Object =3D null)</=
code><p></p><p>
		 Constructor.=20
		=20
		 </p><p><b>SPECIAL PROPERTIES</b></p>
		 <p>The following special properties may be passed in via the constructor=
's vars parameter, like
		 <code>new TimelineMax({paused:true, onComplete:myFunction, repeat:2, yoy=
o:true})</code> </p>
		=20
		 <ul>
		 	<li><b> delay </b>:<i> Number</i> -
		 				 Amount of delay in seconds (or frames for frames-based tweens) befo=
re the timeline should begin.</li>
		=20
		  <li><b> paused </b>:<i> Boolean</i> -
		 				 If <code>true</code>, the timeline will pause itself immediately up=
on creation (by default,=20
		 				 timelines automatically begin playing immediately). If you plan to =
create a TimelineMax and=20
		 				 then populate it later (after one or more frames elapse), it is typ=
ically best to set=20
		 				 <code>paused:true</code> and then <code>play()</code> after you pop=
ulate it.</li>
		 =09
		 	<li><b> onComplete </b>:<i> Function</i> -
		 				 A function that should be called when the timeline has completed</l=
i>
		 =09
		 	<li><b> onCompleteParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the <code>onComplete</code> function=
. For example,
		 				 <code>new TimelineMax({onComplete:myFunction, onCompleteParams:["pa=
ram1", "param2"]});</code></li>
		 =09
		 	<li><b> useFrames </b>:<i> Boolean</i> -
		 				 If <code>useFrames</code> is <code>true</code>, the timelines's tim=
ing will be=20
		 				 based on frames instead of seconds because it is intially added to =
the root
		 				 frames-based timeline. This causes both its <code>duration</code>
		 				 and <code>delay</code> to be based on frames. An animations's timin=
g mode is=20
		 				 always determined by its parent <code>timeline</code>.</li>
		=20
		  <li><b> tweens </b>:<i> Array</i> -
		 				 To immediately insert several tweens into the timeline, use the <co=
de>tweens</code>=20
		 				 special property to pass in an Array of TweenLite/TweenMax/Timeline=
Lite/TimelineMax=20
		 				 instances. You can use this in conjunction with the <code>align</co=
de> and=20
		 				 <code>stagger</code> special properties to set up complex sequences=
 with minimal code.
		 				 These values simply get passed to the <code>add()</code> method.</l=
i>
		 =09
		 	<li><b> align </b>:<i> String</i> -
		 				 Only used in conjunction with the <code>tweens</code> special prope=
rty when multiple=20
		 				 tweens are	to be inserted immediately. The value simply gets passed=
 to the=20
		 				 <code>add()</code> method. The default is <code>"normal"</code>.=20
		 				 Options are:
		 					<ul>
		 						<li><b><code>"sequence"</code></b>: aligns the tweens one-after-th=
e-other in a sequence</li>
		 						<li><b><code>"start"</code></b>: aligns the start times of all of =
the tweens (ignores delays)</li>
		 						<li><b><code>"normal"</code></b>: aligns the start times of all th=
e tweens (honors delays)</li>
		 					</ul>
		 				The <code>align</code> special property does <b>not</b> force all ch=
ild=20
		 				tweens/timelines to maintain relative positioning, so for example, i=
f you use=20
		 				<code>"sequence"</code> and then later change the duration of one of=
 the nested tweens,=20
		 				it does <b>not</b> force all subsequent timelines to change their po=
sition.
		 				The <code>align</code> special property only affects the alignment o=
f the tweens that are
		 				initially placed into the timeline through the <code>tweens</code> s=
pecial property of=20
		 				the <code>vars</code> object.</li>
		 									=09
		 	<li><b> stagger </b>:<i> Number</i> -
		 				 Only used in conjunction with the <code>tweens</code> special prope=
rty when multiple=20
		 				 tweens are	to be inserted immediately. It staggers the tweens by a =
set amount of time=20
		 				 in seconds (or in frames if <code>useFrames</code> is true). For ex=
ample, if the=20
		 				 stagger value is 0.5 and the "align" property is set to <code>"star=
t"</code>, the=20
		 				 second tween will start 0.5 seconds after the first one starts, the=
n 0.5 seconds=20
		 				 later the third one will start, etc. If the align property is <code=
>"sequence"</code>,
		 				 there would be 0.5 seconds added between each tween. This value sim=
ply gets=20
		 				 passed to the <code>add()</code> method. Default is 0.</li>
		=20
		  <li><b> onStart </b>:<i> Function</i> -
		 				 A function that should be called when the timeline begins (when its=
 <code>time</code>
		 				 changes from 0 to some other value which can happen more than once =
if the=20
		 				 timeline is restarted multiple times).</li>
		 =09
		 	<li><b> onStartParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the <code>onStart</code> function. F=
or example,=20
		 				 <code>new TimelineMax({onStart:myFunction, onStartParams:["param1",=
 "param2"]});</code></li>
		 =09
		 	<li><b> onUpdate </b>:<i> Function</i> -
		 				 A function that should be called every time the timeline updates =
=20
		 				 (on every frame while the timeline is active)</li>
		 =09
		 	<li><b> onUpdateParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the <code>onUpdate</code> function. =
For example,
		 				 <code>new TimelineMax({onUpdate:myFunction, onUpdateParams:["param1=
", "param2"]});</code></li>
		 =09
		 	<li><b> onReverseComplete </b>:<i> Function</i> -
		 				 A function that should be called when the timeline has reached its =
beginning again from the=20
		 				 reverse direction. For example, if <code>reverse()</code> is called=
, the timeline will move
		 				 back towards its beginning and when its <code>time</code> reaches 0=
, <code>onReverseComplete</code>
		 				 will be called. This can also happen if the timeline is placed in a=
 TimelineLite or TimelineMax=20
		 				 instance that gets reversed and plays the timeline backwards to (or=
 past) the beginning.</li>
		 =09
		 	<li><b> onReverseCompleteParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the <code>onReverseComplete</code> f=
unction. For example,=20
		 				 <code>new TimelineMax({onReverseComplete:myFunction, onReverseCompl=
eteParams:["param1", "param2"]});</code></li>
		=20
		  <li><b> autoRemoveChildren </b>:<i> Boolean</i> -
		 				If <code>autoRemoveChildren</code> is set to <code>true</code>, as s=
oon as child=20
		 				tweens/timelines complete, they will automatically get killed/remove=
d. This is normally=20
		 				undesireable because it prevents going backwards in time (like if yo=
u want to=20
		 				<code>reverse()</code> or set the <code>progress</code> lower, etc.)=
. It can, however,=20
		 				improve speed and memory management. The root timelines use <code>au=
toRemoveChildren:true</code>.</li>
		=20
		  <li><b> smoothChildTiming </b>:<i> Boolean</i> -
		 				Controls whether or not child tweens/timelines are repositioned auto=
matically=20
		 				(changing their <code>startTime</code>) in order to maintain smooth =
playback when=20
		 				properties are changed on-the-fly. For example, imagine that the tim=
eline's playhead is=20
		 				on a child tween that is 75% complete, moving mc.x from 0 to 100 and=
 then that tween's=20
		 				<code>reverse()</code> method is called. If <code>smoothChildTiming<=
/code> is <code>false</code>=20
		 				(the default except for the root timelines), the tween would flip in=
 place, keeping its=20
		 				<code>startTime</code> consistent. Therefore the playhead of the tim=
eline would now be=20
		 				at the tween's 25% completion point instead of 75%. Remember, the ti=
meline's playhead=20
		 				position and direction are unaffected by child tween/timeline change=
s. mc.x would jump=20
		 				from 75 to 25, but the tween's position in the timeline would remain=
 consistent. However,=20
		 				if <code>smoothChildTiming</code> is <code>true</code>, that child t=
ween's=20
		 				<code>startTime</code> would be adjusted so that the timeline's play=
head intersects=20
		 				with the same spot on the tween (75% complete) as it had immediately=
 before=20
		 				<code>reverse()</code> was called, thus playback appears perfectly s=
mooth. mc.x=20
		 				would still be 75 and it would continue from there as the playhead m=
oves on, but=20
		 				since the tween is reversed now mc.x will travel back towards 0 inst=
ead of 100.=20
		 				Ultimately it's a decision between prioritizing smooth on-the-fly pl=
ayback=20
		 				(<code>true</code>) or consistent position(s) of child tweens/timeli=
nes=20
		 				(<code>false</code>).=20
		=20
		 				Some examples of on-the-fly changes to child tweens/timelines that c=
ould cause their=20
		 				<code>startTime</code> to change when <code>smoothChildTiming</code>=
 is <code>true</code>=20
		 				are: <code>reversed, timeScale, progress, totalProgress, time, total=
Time, delay, pause,=20
		 				resume, duration,</code> and <code>totalDuration</code>.</li>
		 =09
		  <li><b> repeat </b>:<i> Number</i> -
		 				 Number of times that the timeline should repeat after its first ite=
ration. For example,=20
		 				 if <code>repeat</code> is 1, the timeline will play a total of twic=
e (the initial play
		 				 plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code>=
 should always be an integer.</li>
		 =09
		 	<li><b> repeatDelay </b>:<i> Number</i> -
		 				 Amount of time in seconds (or frames for frames-based timelines) be=
tween repeats. For example,
		 				 if <code>repeat</code> is 2 and <code>repeatDelay</code> is 1, the =
timeline will play initially,
		 				 then wait for 1 second before it repeats, then play again, then wai=
t 1 second again before=20
		 				 doing its final repeat.</li>
		 =09
		 	<li><b> yoyo </b>:<i> Boolean</i> -
		 				 If <code>true</code>, every other <code>repeat</code> cycle will ru=
n in the opposite
		 				 direction so that the timeline appears to go back and forth (forwar=
d then backward).
		 				 This has no affect on the "<code>reversed</code>" property though. =
So if <code>repeat</code>=20
		 				 is 2 and <code>yoyo</code> is <code>false</code>, it will look like=
:=20
		 				 start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo<=
/code> is <code>true</code>,=20
		 				 it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.=
</li>
		 =20
		 	<li><b> onRepeat </b>:<i> Function</i> -
		 				 A function that should be called each time the timeline repeats</li=
>
		 =09
		 	<li><b> onRepeatParams </b>:<i> Array</i> -
		 				 An Array of parameters to pass the onRepeat function. For example,=
=20
		 				 <code>new TimelineMax({repeat:3, onRepeat:myFunction, onRepeatParam=
s:[mc, "param2"]});</code></li>
		 								=09
		 	<li><b> onStartListener </b>:<i> Function</i> -
		 				 A function that should be called (and passed an event parameter) wh=
en the timeline begins=20
		 				 (when its <code>totalTime</code> changes from 0 to some other value=
 which can happen more=20
		 				 than once if the timeline is restarted multiple times). Identical t=
o <code>onStart</code> except
		 				 that the function will always be passed an event parameter whose <c=
ode>target</code> property points
		 				 to the timeline. It's the same as doing <code>myTimeline.addEventLi=
stener("start", myFunction);</code>.=20
		 				 Unless you need the event parameter, it's better/faster to use <cod=
e>onStart</code>.</li>
		 =09
		 	<li><b> onUpdateListener </b>:<i> Function</i> -
		 				 A function that should be called (and passed an event parameter) ea=
ch time the timeline updates=20
		 				 (on every frame while the timeline is active). Identical to <code>o=
nUpdate</code> except
		 				 that the function will always be passed an event parameter whose <c=
ode>target</code> property points
		 				 to the timeline. It's the same as doing <code>myTimeline.addEventLi=
stener("update", myFunction);</code>.=20
		 				 Unless you need the event parameter, it's better/faster to use <cod=
e>onUpdate</code>.</li>
		 	 =20
		 	<li><b> onCompleteListener </b>:<i> Function</i> -=20
		 				 A function that should be called (and passed an event parameter) ea=
ch time the timeline completes.=20
		 				 Identical to <code>onComplete</code> except that the function will =
always be passed an event=20
		 				 parameter whose <code>target</code> property points to the timeline=
. It's the same as doing=20
		 				 <code>myTimeline.addEventListener("complete", myFunction);</code>.=
=20
		 				 Unless you need the event parameter, it's better/faster to use <cod=
e>onComplete</code>.</li>
		=20
		  <li><b> onReverseCompleteListener </b>:<i> Function</i> -
		 				 A function that should be called (and passed an event parameter) ea=
ch time the timeline has reached=20
		 				 its beginning again from the reverse direction. For example, if <co=
de>reverse()</code> is called=20
		 				 the timeline will move back towards its beginning and when its <cod=
e>totalTime</code> reaches 0,=20
		 				 <code>onReverseCompleteListener</code> will be called. This can als=
o happen if the timeline is placed=20
		 				 in another TimelineLite or TimelineMax instance that gets reversed =
and plays the timeline backwards to=20
		 				 (or past) the beginning. Identical to <code>onReverseComplete</code=
> except that the function=20
		 				 will always be passed an event parameter whose <code>target</code> =
property points to the timeline.=20
		 				 It's the same as doing <code>myTimeline.addEventListener("reverseCo=
mplete", myFunction);</code>.=20
		 				 Unless you need the event parameter, it's better/faster to use <cod=
e>onReverseComplete</code>.</li>
		=20
		  <li><b> onRepeatListener </b>:<i> Function</i> -
		 				 A function that should be called (and passed an event parameter) ea=
ch time the timeline repeats.=20
		 				 Identical to <code>onRepeat</code> except that the function will al=
ways be passed an event=20
		 				 parameter whose <code>target</code> property points to the timeline=
. It's the same as doing=20
		 				 <code>myTimeline.addEventListener("repeat", myFunction);</code>.=20
		 				 Unless you need the event parameter, it's better/faster to use <cod=
e>onRepeat</code>.</li>
		 =09
		 	</ul>
		=20
		 <p></p><span class=3D"label"> Parameters </span><table cellpadding=3D"0"=
 cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><td><cod=
e><span class=3D"label">vars</span>:Object</code> (default =3D <code>null</=
code>)<code></code> =E2=80=94 optionally pass in special properties like us=
eFrames, onComplete, onCompleteParams, onUpdate, onUpdateParams, onStart, o=
nStartParams, tweens, align, stagger, delay, autoRemoveChildren, onComplete=
Listener, onStartListener, onUpdateListener, repeat, repeatDelay, and/or yo=
yo.
		 </td></tr></tbody></table></div><a name=3D"methodDetail"></a><div class=
=3D"detailSectionHeader">Method Detail</div><a name=3D"addCallback()"></a><=
a name=3D"addCallback(Function,any,Array)"></a><table class=3D"detailHeader=
" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderN=
ame">addCallback</td><td class=3D"detailHeaderParens">()</td><td class=3D"d=
etailHeaderType">method</td></tr></tbody></table><div class=3D"detailBody">=
<code> public function addCallback(callback:Function, position:*, params:Ar=
ray =3D null):<a href=3D"https://greensock.com/asdocs/com/greensock/Timelin=
eMax.html">TimelineMax</a></code><p></p><p></p><p>
		 Inserts a callback at a particular position. The callback is technically=
 considered a=20
		 zero-duration tween, so if you <code>getChildren()</code> there will be =
a tween returned for each callback.=20
		 You can discern a callback from other tweens by the fact that its target=
 is a function matching
		 its <code>vars.onComplete</code> and its <code>duration</code> is zero.=
=20
		=20
		 </p><p>If your goal is to append the callback to the end of the timeline=
, it would be easier
		 (more concise) to use the <code>call()</code> method. Technically the <c=
ode>add()</code> method
		 can accommodate adding a callback too (like <code>myTimeline.add(myFunct=
ion, 2)</code>
		 or <code>myTimeline.add(myFunction, "+=3D2")</code>) but <code>add()</co=
de> doesn't accommodate parameters.</p>
		=20
		 <p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 d=
on't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions accept an extra (4th) parameter for <code>scope</code>.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">callback</span>:Function</code> =E2=80=94 Th=
e function to be called
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> =E2=80=
=94 The time in seconds (or frames for frames-based timelines) or label at =
which the callback should be inserted. For example, <code>myTimeline.addCal=
lback(myFunction, 3)</code> would call myFunction() 3 seconds into the time=
line, and <code>myTimeline.addCallback(myFunction, "myLabel")</code> would =
call it at the "myLabel" label. <code>myTimeline.addCallback(myFunction, "+=
=3D2")</code> would insert the callback 2 seconds after the end of the time=
line.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">params</span>:Array</code> (def=
ault =3D <code>null</code>)<code></code> =E2=80=94 An Array of parameters t=
o pass the callback
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TimelineMax.html">TimelineMax</a></code> =E2=80=94 self (makes chain=
ing easier)
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#call()" target=3D"">call()</a><br><a href=3D"https://green=
sock.com/asdocs/com/greensock/TimelineMax.html#add()" target=3D"">add()</a>=
<br><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#=
removeCallback()" target=3D"">removeCallback()</a></div></div><a name=3D"ad=
dEventListener()"></a><a name=3D"addEventListener(String,Function,Boolean,i=
nt,Boolean)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacin=
g=3D"0"><tbody><tr><td class=3D"detailHeaderName">addEventListener</td><td =
class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</=
td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div clas=
s=3D"detailBody"><code> public function addEventListener(type:String, liste=
ner:Function, useCapture:Boolean =3D false, priority:int =3D 0, useWeakRefe=
rence:Boolean =3D false):void</code><p></p><p></p><p>
		 (AS3 only)
		 Registers a function that should be called each time a particular type o=
f event occurs, like=20
		 <code>"complete"</code> or <code>"update"</code>. The function will be p=
assed a single "event"=20
		 parameter whose "<code>target</code>" property refers to the timeline. T=
ypically it is more efficient
		 to use callbacks like <code>onComplete, onUpdate, onStart, onReverseComp=
lete,</code> and <code>onRepeat</code>
		 unless you need the event parameter or if you need to register more than=
 one listener for the same=20
		 type of event.=20
		=20
		 If you no longer need an event listener, remove it by calling <code>remo=
veEventListener()</code>, or memory=20
		 problems could result. Event listeners are not automatically removed fro=
m memory because the garbage=20
		 collector does not remove the listener as long as the dispatching object=
 exists (unless the=20
		 useWeakReference parameter is set to true).
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">type</span>:String</code> =E2=80=94 The type =
of event
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">listener</span>:Function</code>=
 =E2=80=94 The listener function that processes the event. This function mu=
st accept an Event object as its only parameter
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">useCapture</span>:Boolean</code=
> (default =3D <code>false</code>)<code></code> =E2=80=94 (not typically us=
ed) Determines whether the listener works in the capture phase or the targe=
t and bubbling phases. If useCapture is set to true, the listener processes=
 the event only during the capture phase and not in the target or bubbling =
phase. If useCapture is false, the listener processes the event only during=
 the target or bubbling phase. To listen for the event in all three phases,=
 call addEventListener twice, once with useCapture set to true, then again =
with useCapture set to false.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">priority</span>:int</code> (def=
ault =3D <code>0</code>)<code></code> =E2=80=94 The priority level of the e=
vent listener. The priority is designated by a signed 32-bit integer. The h=
igher the number, the higher the priority. All listeners with priority n ar=
e processed before listeners of priority n-1. If two or more listeners shar=
e the same priority, they are processed in the order in which they were add=
ed. The default priority is 0.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">useWeakReference</span>:Boolean=
</code> (default =3D <code>false</code>)<code></code> =E2=80=94 Determines =
whether the reference to the listener is strong or weak. A strong reference=
 (the default) prevents your listener from being garbage-collected. A weak =
reference does not.=20
		 </td></tr></tbody></table><p></p><p><span class=3D"label">See also</span=
></p><div class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TimelineMax.html#removeEventListener()" target=3D"">removeEventListe=
ner()</a></div></div><a name=3D"currentLabel()"></a><a name=3D"currentLabel=
(String)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"detailHeaderName">currentLabel</td><td class=
=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><t=
d class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"=
detailBody"><code> public function currentLabel(value:String =3D null):*</c=
ode><p></p><p></p><p>=20
		 Gets the closest label that is at or before the current time, or jumps t=
o a provided label=20
		 (behavior depends on whether or not you pass a parameter to the method).=
=20
		=20
		 </p><p>This method serves as both a getter and setter. Omitting the para=
meter returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:String</code> (default =3D <cod=
e>null</code>)<code></code> =E2=80=94 Omitting the parameter returns the cu=
rrent value (getter), whereas defining the parameter sets the value (setter=
) and returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#getLabelAfter()" target=3D"">getLabelAfter()</a><br><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#getLabelBe=
fore()" target=3D"">getLabelBefore()</a></div></div><a name=3D"getActive()"=
></a><a name=3D"getActive(Boolean,Boolean,Boolean)"></a><table class=3D"det=
ailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"deta=
ilHeaderName">getActive</td><td class=3D"detailHeaderParens">()</td><td cla=
ss=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;</t=
d></tr></tbody></table><div class=3D"detailBody"><code> public function get=
Active(nested:Boolean =3D true, tweens:Boolean =3D true, timelines:Boolean =
=3D false):Array</code><p></p><p></p><p>
		 Returns the tweens/timelines that are currently active in the timeline, =
meaning the timeline's
		 playhead is positioned on the child tween/timeline and the child isn't p=
aused.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">nested</span>:Boolean</code> (default =3D <co=
de>true</code>)<code></code> =E2=80=94 Determines whether or not tweens and=
/or timelines that are inside nested timelines should be returned. If you o=
nly want the "top level" tweens/timelines, set this to <code>false</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">tweens</span>:Boolean</code> (d=
efault =3D <code>true</code>)<code></code> =E2=80=94 Determines whether or =
not tweens (TweenLite and TweenMax instances) should be included in the res=
ults
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">timelines</span>:Boolean</code>=
 (default =3D <code>false</code>)<code></code> =E2=80=94 Determines whether=
 or not child timelines (TimelineLite and TimelineMax instances) should be =
included in the results
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Array</code> =E2=80=94 an Array of active tween=
s/timelines
		 </td></tr></tbody></table></div><a name=3D"getLabelAfter()"></a><a name=
=3D"getLabelAfter(Number)"></a><table class=3D"detailHeader" cellpadding=3D=
"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">getLabelAft=
er</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderTyp=
e">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></tabl=
e><div class=3D"detailBody"><code> public function getLabelAfter(time:Numbe=
r):String</code><p></p><p></p><p>
		 Returns the next label (if any) that occurs <b>after</b> the <code>time<=
/code> parameter.=20
		 It makes no difference if the timeline is reversed ("after" means later =
in the timeline's local time zone).=20
		 A label that is positioned exactly at the same time as the <code>time</c=
ode> parameter will be ignored.=20
		=20
		 </p><p>You could use <code>getLabelAfter()</code> in conjunction with <c=
ode>tweenTo()</code> to make=20
		 the timeline tween to the next label like this:</p>
		=20
		 <p><code>
		 myTimeline.tweenTo( myTimeline.getLabelAfter() );
		 </code></p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">time</span>:Number</code> (default =3D <code=
>NaN</code>)<code></code> =E2=80=94 Time after which the label is searched =
for. If you do not pass a time in, the current time will be used.=20
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>String</code> =E2=80=94 Name of the label that =
is after the time passed to getLabelAfter()
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#getLabelBefore()" target=3D"">getLabelBefore()</a><br><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#currentL=
abel()" target=3D"">currentLabel()</a></div></div><a name=3D"getLabelBefore=
()"></a><a name=3D"getLabelBefore(Number)"></a><table class=3D"detailHeader=
" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderN=
ame">getLabelBefore</td><td class=3D"detailHeaderParens">()</td><td class=
=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;</td>=
</tr></tbody></table><div class=3D"detailBody"><code> public function getLa=
belBefore(time:Number):String</code><p></p><p></p><p>
		 Returns the previous label (if any) that occurs <b>before</b> the <code>=
time</code> parameter.=20
		 It makes no difference if the timeline is reversed ("before" means earli=
er in the timeline's local time zone).=20
		 A label that is positioned exactly at the same time as the <code>time</c=
ode> parameter will be ignored.=20
		=20
		 </p><p>You could use <code>getLabelBefore()</code> in conjunction with <=
code>tweenTo()</code> to make=20
		 the timeline tween back to the previous label like this:</p>
		=20
		 <p><code>
		 myTimeline.tweenTo( myTimeline.getLabelBefore() );
		 </code></p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">time</span>:Number</code> (default =3D <code=
>NaN</code>)<code></code> =E2=80=94 Time before which the label is searched=
 for. If you do not pass a time in, the current time will be used.=20
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>String</code> =E2=80=94 Name of the label that =
is before the time passed to getLabelBefore()
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#getLabelBefore()" target=3D"">getLabelBefore()</a><br><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#currentL=
abel()" target=3D"">currentLabel()</a></div></div><a name=3D"getLabelsArray=
()"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"detailHeaderName">getLabelsArray</td><td class=3D"de=
tailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td clas=
s=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detail=
Body"><code> public function getLabelsArray():Array</code><p></p><p></p><p>=
=20
		 Returns an Array of label objects, each with a "time" and "name" propert=
y, in the order that they occur in the timeline.
		 For example, to loop through all the labels in order and trace() them to=
 the screen (or console.log() in JavaScript):
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var labels =3D myTimelin=
e.getLabelsArray();
for (var i =3D 0; i &lt; labels.length; i++) {
    trace("label name: " + labels[i].name + ", time: " + labels[i].time); /=
/or in JS, console.log("label name: " + labels[i].name + ", time: " + label=
s[i].time);
}
</pre></div>
		 <p>Note: changing the values in this array will have no effect on the ac=
tual labels inside the TimelineMax. To add/remove labels,=20
		 use the corresponding methods (<code>addLabel(), removeLabel()</code>).<=
/p>
		=20
		 <p></p><p></p><span class=3D"label">Returns</span><table cellpadding=3D"=
0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20"></td><td><cod=
e>Array</code> =E2=80=94 An array of generic objects (one for each label) w=
ith a "name" property and a "time" property in the order they occur in the =
TimelineMax.
		 </td></tr></tbody></table></div><a name=3D"invalidate()"></a><table clas=
s=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=
=3D"detailHeaderName">invalidate</td><td class=3D"detailHeaderParens">()</t=
d><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">=
&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code>override pu=
blic function invalidate():*</code><p></p><p></p><p>  =20
		 Clears any initialization data (like starting/ending values in tweens) w=
hich can be useful if, for example,=20
		 you want to restart a tween without reverting to any previously recorded=
 starting values. When you <code>invalidate()</code>=20
		 an animation, it will be re-initialized the next time it renders and its=
 <code>vars</code> object will be re-parsed.=20
		 The timing of the animation (duration, startTime, delay) will not be aff=
ected.
		=20
		 </p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:1=
00, y:100})</code> that ran when mc.x and mc.y=20
		 were initially at 0, but now mc.x and mc.y are 200 and you want them twe=
en to 100 again, you could simply=20
		 <code>invalidate()</code> the tween and <code>restart()</code> it. Witho=
ut invalidating first, restarting it=20
		 would cause the values jump back to 0 immediately (where they started wh=
en the tween originally began).=20
		 When you invalidate a TimelineLite/TimelineMax, it automatically invalid=
ates all of its children.</p>
		 <p></p><p></p><span class=3D"label">Returns</span><table cellpadding=3D"=
0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20"></td><td><cod=
e>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table></div><a name=3D"progress()"></a><a name=3D"pr=
ogress(Number,Boolean)"></a><table class=3D"detailHeader" cellpadding=3D"0"=
 cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">progress</td><=
td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">metho=
d</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div c=
lass=3D"detailBody"><code>override public function progress(value:Number, s=
uppressEvents:Boolean =3D false):*</code><p></p><p></p><p>=20
		 Gets or sets the timeline's progress which is a value between 0 and 1 in=
dicating the position=20
		 of the virtual playhead (<b>excluding</b> repeats) where 0 is at the beg=
inning, 0.5 is halfway complete,=20
		 and 1 is complete. If the timeline has a non-zero <code>repeat</code> de=
fined, <code>progress</code>=20
		 and <code>totalProgress</code> will be different because <code>progress<=
/code> doesn't include any=20
		 repeats or repeatDelays whereas <code>totalProgress</code> does. For exa=
mple, if a TimelineMax instance=20
		 is set to repeat once, at the end of the first cycle <code>totalProgress=
</code> would only be 0.5=20
		 whereas <code>progress</code> would be 1. If you watched both properties=
 over the course of the entire=20
		 animation, you'd see <code>progress</code> go from 0 to 1 twice (once fo=
r each cycle) in the=20
		 same time it takes the <code>totalProgress</code> to go from 0 to 1 once=
.
		=20
		 </p><p>This method serves as both a getter and setter. Omitting the para=
meter returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myTimeline.progress(0.5).play();<=
/code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var progress =3D myTimeline.=
progress(); //gets current progress
myTimeline.progress( 0.25 ); //sets progress to one quarter finished
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">suppressEvents</span>:Boolean</=
code> (default =3D <code>false</code>)<code></code> =E2=80=94 If <code>true=
</code>, no events or callbacks will be triggered when the playhead moves t=
o the new position.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#totalProgress()" target=3D"">totalProgress()</a><br><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#seek()" ta=
rget=3D"">seek()</a><br><a href=3D"https://greensock.com/asdocs/com/greenso=
ck/TimelineMax.html#time()" target=3D"">time()</a><br><a href=3D"https://gr=
eensock.com/asdocs/com/greensock/TimelineMax.html#totalTime()" target=3D"">=
totalTime()</a></div></div><a name=3D"removeCallback()"></a><a name=3D"remo=
veCallback(Function,any)"></a><table class=3D"detailHeader" cellpadding=3D"=
0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">removeCallba=
ck</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderTyp=
e">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></tabl=
e><div class=3D"detailBody"><code> public function removeCallback(callback:=
Function, position:* =3D null):<a href=3D"https://greensock.com/asdocs/com/=
greensock/TimelineMax.html">TimelineMax</a></code><p></p><p></p><p>
		 Removes a callback. If the <code>position</code> parameter
		 is null, all callbacks of that function are removed from the timeline.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">callback</span>:Function</code> =E2=80=94 cal=
lback function to be removed
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">position</span>:*</code> (defau=
lt =3D <code>null</code>)<code></code> =E2=80=94 the time in seconds (or fr=
ames for frames-based timelines) or label from which the callback should be=
 removed. For example, <code>myTimeline.removeCallback(myFunction, 3)</code=
> would remove the callback from 3-seconds into the timeline, and <code>myT=
imeline.removeCallback(myFunction, "myLabel")</code> would remove it from t=
he "myLabel" label, and <code>myTimeline.removeCallback(myFunction, null)</=
code> would remove ALL callbacks of that function regardless of where they =
are on the timeline.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TimelineMax.html">TimelineMax</a></code> =E2=80=94 self (makes chain=
ing easier)
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#addCallback()" target=3D"">addCallback()</a><br><a href=3D=
"https://greensock.com/asdocs/com/greensock/TimelineMax.html#call()" target=
=3D"">call()</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/T=
imelineMax.html#kill()" target=3D"">kill()</a></div></div><a name=3D"remove=
EventListener()"></a><a name=3D"removeEventListener(String,Function,Boolean=
)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><t=
body><tr><td class=3D"detailHeaderName">removeEventListener</td><td class=
=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><t=
d class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"=
detailBody"><code> public function removeEventListener(type:String, listene=
r:Function, useCapture:Boolean =3D false):void</code><p></p><p></p><p>=20
		 (AS3 only)
		 Removes a listener from the EventDispatcher object. If there is no match=
ing listener registered=20
		 with the EventDispatcher object, a call to this method has no effect.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">type</span>:String</code> =E2=80=94 The type =
of event
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">listener</span>:Function</code>=
 =E2=80=94 The listener object to remove.=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">useCapture</span>:Boolean</code=
> (default =3D <code>false</code>)<code></code> =E2=80=94 Specifies whether=
 the listener was registered for the capture phase or the target and bubbli=
ng phases. If the listener was registered for both the capture phase and th=
e target and bubbling phases, two calls to removeEventListener() are requir=
ed to remove both, one call with useCapture() set to true, and another call=
 with useCapture() set to false.
		 </td></tr></tbody></table><p></p></div><a name=3D"repeat()"></a><a name=
=3D"repeat(Number)"></a><table class=3D"detailHeader" cellpadding=3D"0" cel=
lspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">repeat</td><td cla=
ss=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td>=
<td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=
=3D"detailBody"><code> public function repeat(value:Number =3D 0):*</code><=
p></p><p></p><p>=20
		 Gets or sets the number of times that the timeline should repeat after i=
ts first iteration. For=20
		 example, if <code>repeat</code> is 1, the timeline will play a total of =
twice (the initial play
		 plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> shou=
ld always be an integer.
		=20
		 </p><p>To cause the repeats to alternate between forward and backward, s=
et <code>yoyo</code> to=20
		 <code>true</code>. To add a time gap between repeats, use <code>repeatDe=
lay</code>. You can=20
		 set the initial <code>repeat</code> value via the <code>vars</code> para=
meter, like:</p>
		=20
		 <p><code>
		 var tl =3D new TimelineMax({repeat:2});
		 </code></p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myTimeline.repeat(2).yoyo(true).p=
lay();</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var repeat =3D myTimeline.re=
peat(); //gets current repeat value
myTimeline.repeat(2); //sets repeat to 2
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>0</code>)<code></code> =E2=80=94 Omitting the parameter returns the curre=
nt value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#repeatDelay()" target=3D"">repeatDelay()</a><br><a href=3D=
"https://greensock.com/asdocs/com/greensock/TimelineMax.html#yoyo()" target=
=3D"">yoyo()</a></div></div><a name=3D"repeatDelay()"></a><a name=3D"repeat=
Delay(Number)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspac=
ing=3D"0"><tbody><tr><td class=3D"detailHeaderName">repeatDelay</td><td cla=
ss=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td>=
<td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=
=3D"detailBody"><code> public function repeatDelay(value:Number =3D 0):*</c=
ode><p></p><p></p><p>
		 Gets or sets the amount of time in seconds (or frames for frames-based t=
imelines) between repeats.=20
		 For example, if <code>repeat</code> is 2 and <code>repeatDelay</code> is=
 1, the timeline will=20
		 play initially, then wait for 1 second before it repeats, then play agai=
n, then wait 1 second=20
		 again before doing its final repeat. You can set the initial <code>repea=
tDelay</code> value=20
		 via the <code>vars</code> parameter, like:
		=20
		 </p><p><code>
		 var tl =3D new TimelineMax({repeat:2, repeatDelay:1});
		 </code></p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myTimeline.repeat(2).yoyo(true).r=
epeatDelay(0.5).play();</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var repeatDelay =3D myTimeli=
ne.repeatDelay(); //gets current repeatDelay value
myTimeline.repeatDelay(2); //sets repeatDelay to 2
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>0</code>)<code></code> =E2=80=94 Omitting the parameter returns the curre=
nt value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#repeat()" target=3D"">repeat()</a><br><a href=3D"https://g=
reensock.com/asdocs/com/greensock/TimelineMax.html#yoyo()" target=3D"">yoyo=
()</a></div></div><a name=3D"time()"></a><a name=3D"time(Number,Boolean)"><=
/a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody=
><tr><td class=3D"detailHeaderName">time</td><td class=3D"detailHeaderParen=
s">()</td><td class=3D"detailHeaderType">method</td><td class=3D"detailHead=
erRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code>ove=
rride public function time(value:Number, suppressEvents:Boolean =3D false):=
*</code><p></p><p></p><p>
		 Gets or sets the local position of the playhead (essentially the current=
 time), <b>not</b>=20
		 including any repeats or repeatDelays. If the timeline has a non-zero <c=
ode>repeat</code>, its <code>time</code>=20
		 goes back to zero upon repeating even though the <code>totalTime</code> =
continues forward linearly=20
		 (or if <code>yoyo</code> is <code>true</code>, the <code>time</code> alt=
ernates between moving forward=20
		 and backward). <code>time</code> never exceeds the duration whereas the =
<code>totalTime</code> reflects=20
		 the overall time including any repeats and repeatDelays.=20
		=20
		 </p><p>For example, if a TimelineMax instance has a <code>duration</code=
> of 2 and a repeat of 3,=20
		 <code>totalTime</code> will go from 0 to 8 during the course of the time=
line (plays once then=20
		 repeats 3 times, making 4 total cycles) whereas <code>time</code> would =
go from 0 to 2 a=20
		 total of 4 times.</p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var currentTime =3D myTimeli=
ne.time(); //gets current time
myTimeline.time(2); //sets time, jumping to new value just like seek().
         </pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining. Negative values will =
be interpreted from the <b>END</b> of the animation.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">suppressEvents</span>:Boolean</=
code> (default =3D <code>false</code>)<code></code> =E2=80=94 If <code>true=
</code>, no events or callbacks will be triggered when the playhead moves t=
o the new position defined in the <code>value</code> parameter.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#seek()" target=3D"">seek()</a><br><a href=3D"https://green=
sock.com/asdocs/com/greensock/TimelineMax.html#play()" target=3D"">play()</=
a><br><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.htm=
l#reverse()" target=3D"">reverse()</a><br><a href=3D"https://greensock.com/=
asdocs/com/greensock/TimelineMax.html#pause()" target=3D"">pause()</a><br><=
a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html#total=
Time()" target=3D"">totalTime()</a></div></div><a name=3D"totalDuration()">=
</a><a name=3D"totalDuration(Number)"></a><table class=3D"detailHeader" cel=
lpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">=
totalDuration</td><td class=3D"detailHeaderParens">()</td><td class=3D"deta=
ilHeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></t=
body></table><div class=3D"detailBody"><code>override public function total=
Duration(value:Number):*</code><p></p><p></p><p>
		 Gets or sets the total duration of the timeline in seconds (or frames fo=
r frames-based timelines)=20
		 <b>including</b> any repeats or repeatDelays. <code>duration</code>, by =
contrast, does=20
		 <b>NOT</b> include repeats and repeatDelays. For example, if the timelin=
e has a=20
		 <code>duration</code> of 10, a <code>repeat</code> of 1 and a <code>repe=
atDelay</code> of 2,=20
		 the <code>totalDuration</code> would be 22.
		=20
		 </p><p>This method serves as both a getter and setter. Omitting the para=
meter returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var total =3D myTimeline.tot=
alDuration(); //gets total duration
myTimeline.totalDuration(10); //sets the total duration
         </pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining. Negative values will =
be interpreted from the <b>END</b> of the animation.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#duration()" target=3D"">duration()</a><br><a href=3D"https=
://greensock.com/asdocs/com/greensock/TimelineMax.html#timeScale()" target=
=3D"">timeScale()</a></div></div><a name=3D"totalProgress()"></a><a name=3D=
"totalProgress(Number,Boolean)"></a><table class=3D"detailHeader" cellpaddi=
ng=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">totalP=
rogress</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHead=
erType">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody><=
/table><div class=3D"detailBody"><code>override public function totalProgre=
ss(value:Number, suppressEvents:Boolean =3D true):*</code><p></p><p></p><p>=
=20
		 Gets or sets the timeline's total progress which is a value between 0 an=
d 1 indicating the position=20
		 of the virtual playhead (<b>including</b> repeats) where 0 is at the beg=
inning, 0.5 is=20
		 at the halfway point, and 1 is at the end (complete). If the timeline ha=
s a non-zero <code>repeat</code> defined,=20
		 <code>progress()</code> and <code>totalProgress()</code> will be differe=
nt because <code>progress()</code>=20
		 doesn't include the <code>repeat</code> or <code>repeatDelay</code> wher=
eas <code>totalProgress()</code> does. For example,=20
		 if a TimelineMax instance is set to repeat once, at the end of the first=
 cycle <code>totalProgress()</code>=20
		 would only be 0.5 whereas <code>progress</code> would be 1. If you watch=
ed both properties over the=20
		 course of the entire animation, you'd see <code>progress</code> go from =
0 to 1 twice (once for=20
		 each cycle) in the same time it takes the <code>totalProgress()</code> t=
o go from 0 to 1 once.
		=20
		 </p><p>This method serves as both a getter and setter. Omitting the para=
meter returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myAnimation.totalProgress(0.5).pl=
ay();</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var progress =3D myAnimation=
.totalProgress(); //gets total progress
myAnimation.totalProgress(0.25); //sets total progress to one quarter finis=
hed
         </pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">suppressEvents</span>:Boolean</=
code> (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>true<=
/code>, no events or callbacks will be triggered when the playhead moves to=
 the new position.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#progress()" target=3D"">progress()</a><br><a href=3D"https=
://greensock.com/asdocs/com/greensock/TimelineMax.html#seek()" target=3D"">=
seek()</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/Timelin=
eMax.html#time()" target=3D"">time()</a><br><a href=3D"https://greensock.co=
m/asdocs/com/greensock/TimelineMax.html#totalTime()" target=3D"">totalTime(=
)</a></div></div><a name=3D"tweenFromTo()"></a><a name=3D"tweenFromTo(any,a=
ny,Object)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"detailHeaderName">tweenFromTo</td><td class=
=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><t=
d class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"=
detailBody"><code> public function tweenFromTo(fromPosition:*, toPosition:*=
, vars:Object =3D null):<a href=3D"https://greensock.com/asdocs/com/greenso=
ck/TweenLite.html">TweenLite</a></code><p></p><p></p><p>
		 Creates a linear tween that essentially scrubs the playhead from a parti=
cular time or label=20
		 to another time or label and then stops. If you plan to sequence multipl=
e playhead tweens=20
		 one-after-the-other, <code>tweenFromTo()</code> is better to use than <c=
ode>tweenTo()</code>=20
		 because it allows the duration to be determined immediately, ensuring th=
at subsequent tweens=20
		 that are appended to a sequence are positioned appropriately. For exampl=
e, to make the=20
		 TimelineMax play from the label "myLabel1" to the "myLabel2" label, and =
then from "myLabel2"=20
		 back to the beginning (a time of 0), simply do:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var tl:TimelineMax =3D n=
ew TimelineMax();=20
tl.add( myTimeline.tweenFromTo("myLabel1", "myLabel2") );
tl.add( myTimeline.tweenFromTo("myLabel2", 0) );
</pre></div>
		=20
		 <p>If you want advanced control over the tween, like adding an onComplet=
e or changing the ease=20
		 or adding a delay, just pass in a vars object with the appropriate prope=
rties. For example,=20
		 to tween from the start (0) to the 5-second point on the timeline and th=
en call a function=20
		 named <code>myFunction</code> and pass in a parameter that references th=
is TimelineMax and=20
		 use a <code>Strong.easeOut</code> ease, you'd do: </p>
		=20
		 <p><code>
		 myTimeline.tweenFromTo(0, 5, {onComplete:myFunction, onCompleteParams:[m=
yTimeline], ease:Strong.easeOut});
		 </code></p>
		=20
		 <p>Remember, this method simply creates a TweenLite instance that tweens=
 the <code>time()</code>=20
		 of your timeline. So you can store a reference to that tween if you want=
, and you can <code>kill()</code>=20
		 it anytime. Also note that <code>tweenFromTo()</code> does <b>NOT</b> af=
fect the timeline's=20
		 <code>reversed</code> property. So if your timeline is oriented normally=
 (not reversed) and you
		 tween to a time/label that precedes the current time, it will appear to =
go backwards but the=20
		 <code>reversed</code> property will <b>not</b> change to <code>true</cod=
e>. Also note that=20
		 <code>tweenFromTo()</code> pauses the timeline immediately before tweeni=
ng its <code>time()</code>,=20
		 and it does not automatically resume after the tween completes. If you n=
eed to resume playback,=20
		 you can always use an onComplete to call the <code>resume()</code> metho=
d.</p>
		=20
		 <p>Like all from-type methods in GSAP, <code>immediateRender</code> is <=
code>true</code> by default,
		 meaning the timeline will immediately jump to the "from" time/label unle=
ss you set <code>immediateRender:false</code></p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">fromPosition</span>:*</code> =E2=80=94 The b=
eginning time in seconds (or frame if the timeline is frames-based) or labe=
l from which the timeline should play. For example, <code>myTimeline.tweenT=
o(0, 5)</code> would play from 0 (the beginning) to the 5-second point wher=
eas <code>myTimeline.tweenFromTo("myLabel1", "myLabel2")</code> would play =
from "myLabel1" to "myLabel2".
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">toPosition</span>:*</code> =E2=
=80=94 The destination time in seconds (or frame if the timeline is frames-=
based) or label to which the timeline should play. For example, <code>myTim=
eline.tweenTo(0, 5)</code> would play from 0 (the beginning) to the 5-secon=
d point whereas <code>myTimeline.tweenFromTo("myLabel1", "myLabel2")</code>=
 would play from "myLabel1" to "myLabel2".
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> (defa=
ult =3D <code>null</code>)<code></code> =E2=80=94 An optional vars object t=
hat will be passed to the TweenLite instance. This allows you to define an =
onComplete, ease, delay, or any other TweenLite special property. onInit is=
 the only special property that is not available (<code>tweenFromTo()</code=
> sets it internally)
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TweenLite.html">TweenLite</a></code> =E2=80=94 TweenLite instance th=
at handles tweening the timeline between the desired times/labels.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#tweenTo()" target=3D"">tweenTo()</a><br><a href=3D"https:/=
/greensock.com/asdocs/com/greensock/TimelineMax.html#seek()" target=3D"">se=
ek()</a></div></div><a name=3D"tweenTo()"></a><a name=3D"tweenTo(any,Object=
)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><t=
body><tr><td class=3D"detailHeaderName">tweenTo</td><td class=3D"detailHead=
erParens">()</td><td class=3D"detailHeaderType">method</td><td class=3D"det=
ailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><c=
ode> public function tweenTo(position:*, vars:Object =3D null):<a href=3D"h=
ttps://greensock.com/asdocs/com/greensock/TweenLite.html">TweenLite</a></co=
de><p></p><p></p><p>
		 Creates a linear tween that essentially scrubs the playhead to a particu=
lar time or label and=20
		 then stops. For example, to make the TimelineMax play to the "myLabel2" =
label, simply do:=20
		=20
		 </p><p><code>
		 myTimeline.tweenTo("myLabel2");=20
		 </code></p>
		=20
		 <p>If you want advanced control over the tween, like adding an onComplet=
e or changing the ease or=20
		 adding a delay, just pass in a <code>vars</code> object with the appropr=
iate properties. For example,=20
		 to tween to the 5-second point on the timeline and then call a function =
named <code>myFunction</code>=20
		 and pass in a parameter that's references this TimelineMax and use a <co=
de>Strong.easeOut</code> ease, you'd do:</p>
		=20
		 <p><code>
		 myTimeline.tweenTo(5, {onComplete:myFunction, onCompleteParams:[myTimeli=
ne], ease:Strong.easeOut});
		 </code></p>
		=20
		 <p>Remember, this method simply creates a TweenLite instance that pauses=
 the timeline and then tweens=20
		 the <code>time()</code> of the timeline. So you can store a reference to=
 that tween if you want, and=20
		 you can kill() it anytime. Also note that <code>tweenTo()</code> does <b=
>NOT</b> affect the timeline's=20
		 <code>reversed</code> state. So if your timeline is oriented normally (n=
ot reversed) and you tween to=20
		 a time/label that precedes the current time, it will appear to go backwa=
rds but the <code>reversed</code>=20
		 state will <b>not</b> change to <code>true</code>. Also note that <code>=
tweenTo()</code>
		 pauses the timeline immediately before tweening its <code>time()</code>,=
 and it does not automatically
		 resume after the tween completes. If you need to resume playback, you co=
uld always use an onComplete=20
		 to call the timeline's <code>resume()</code> method.</p>
		=20
		 <p>If you plan to sequence multiple playhead tweens one-after-the-other,=
 it is typically better to use=20
		 <code>tweenFromTo()</code> so that you can define the starting point and=
 ending point, allowing the=20
		 duration to be accurately determined immediately.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">position</span>:*</code> =E2=80=94 The desti=
nation time in seconds (or frame if the timeline is frames-based) or label =
to which the timeline should play. For example, <code>myTimeline.tweenTo(5)=
</code> would play from wherever the timeline is currently to the 5-second =
point whereas <code>myTimeline.tweenTo("myLabel")</code> would play to wher=
ever "myLabel" is on the timeline.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> (defa=
ult =3D <code>null</code>)<code></code> =E2=80=94 An optional vars object t=
hat will be passed to the TweenLite instance. This allows you to define an =
onComplete, ease, delay, or any other TweenLite special property.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TweenLite.html">TweenLite</a></code> =E2=80=94 A TweenLite instance =
that handles tweening the timeline to the desired time/label.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#tweenFromTo()" target=3D"">tweenFromTo()</a><br><a href=3D=
"https://greensock.com/asdocs/com/greensock/TimelineMax.html#seek()" target=
=3D"">seek()</a></div></div><a name=3D"yoyo()"></a><a name=3D"yoyo(Boolean)=
"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tb=
ody><tr><td class=3D"detailHeaderName">yoyo</td><td class=3D"detailHeaderPa=
rens">()</td><td class=3D"detailHeaderType">method</td><td class=3D"detailH=
eaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code>=
 public function yoyo(value:Boolean =3D false):*</code><p></p><p></p><p>
		 Gets or sets the timeline's <code>yoyo</code> state, where <code>true</c=
ode> causes
		 the timeline to go back and forth, alternating backward and forward on e=
ach=20
		 <code>repeat</code>. <code>yoyo</code> works in conjunction with <code>r=
epeat</code>,
		 where <code>repeat</code> controls how many times the timeline repeats, =
and <code>yoyo</code>
		 controls whether or not each repeat alternates direction. So in order to=
 make a timeline yoyo,=20
		 you must set its <code>repeat</code> to a non-zero value.
		 Yoyo-ing, has no affect on the timeline's "<code>reversed</code>" proper=
ty. For example,=20
		 if <code>repeat</code> is 2 and <code>yoyo</code> is <code>false</code>,=
 it will look like:=20
		 start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</code=
> is <code>true</code>,=20
		 it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.
		=20
		 </p><p>You can set the <code>yoyo</code> property initially by passing <=
code>yoyo:true</code>
		 in the <code>vars</code> parameter, like: <code>new TimelineMax({repeat:=
1, yoyo:true});</code></p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myTimeline.yoyo(true).repeat(3).t=
imeScale(2).play(0.5);</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var yoyo =3D myTimeline.yoyo=
(); //gets current yoyo state
myTimeline.yoyo( true ); //sets yoyo to true
</pre></div>
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Boolean</code> (default =3D <co=
de>false</code>)<code></code> =E2=80=94 Omitting the parameter returns the =
current value (getter), whereas defining the parameter sets the value (sett=
er) and returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineMax.html#repeat()" target=3D"">repeat()</a><br><a href=3D"https://g=
reensock.com/asdocs/com/greensock/TimelineMax.html#repeatDelay()" target=3D=
"">repeatDelay()</a></div></div><a name=3D"includeExamplesSummary"></a><div=
 class=3D"detailSectionHeader">Examples</div><div class=3D"detailBody">Samp=
le code:<div class=3D"listing" version=3D"3.0"><pre>//create the timeline t=
hat repeats 3 times with 1 second between each repeat and then calls myFunc=
tion() when it completes
var tl =3D new TimelineMax({repeat:3, repeatDelay:1, onComplete:myFunction}=
);
//add a tween
tl.add( new TweenLite(mc, 1, {x:200, y:100}) );
       =20
//add another tween at the end of the timeline (makes sequencing easy)
tl.add( new TweenLite(mc, 0.5, {alpha:0}) );
=20
//append a tween using the convenience method (shorter syntax) and offset i=
t by 0.5 seconds
tl.to(mc, 1, {rotation:30}, "+=3D0.5");
        =20
//reverse anytime
tl.reverse();
//Add a "spin" label 3-seconds into the timeline
tl.addLabel("spin", 3);
//insert a rotation tween at the "spin" label (you could also define the in=
sertion point as the time instead of a label)
tl.add( new TweenLite(mc, 2, {rotation:"360"}), "spin");
   =20
//go to the "spin" label and play the timeline from there
tl.play("spin");
//nest another TimelineMax inside your timeline...
var nested =3D new TimelineMax();
nested.to(mc2, 1, {x:200}));
tl.add(nested);
</pre></div>
=20
 <p><b>How do timelines work? What are the mechanics like?</b></p>
 <p>Every animation (tween and timeline) is placed on a parent timeline (ex=
cept the 2 root timelines - there's one for normal tweens and another for "=
useFrames" ones).=20
 In a sense, they all have their own playheads (that's what its "time" refe=
rs to, or "totalTime" which is identical except that it includes repeats an=
d repeatDelays)=20
 but generally they're not independent because they're sitting on a timelin=
e whose playhead moves.=20
 When the parent's playhead moves to a new position, it updates the childre=
ns' too. </p>
=20
 <p>When a timeline renders at a particular time, it loops through its chil=
dren and says "okay, you should render as if your playhead is at ____" and =
if that child=20
 is a timeline with children, it does the same to its children, right on do=
wn the line. </p>
=20
 <p>The only exception is when the tween/timeline is paused in which case i=
ts internal playhead acts like it's "locked". So in that case,=20
 it's possible (likely in fact) that the child's playhead would <b>not</b> =
be synced with the parent's.=20
 When you unpause it (<code>resume()</code>), it essentially picks it up an=
d moves it so that its internal playhead=20
 is synchronized with wherever the parent's playhead is at that moment, thu=
s things play perfectly smoothly.=20
 That is, unless the timeline's <code>smoothChildTiming</code> is to <code>=
false</code> in which case it won't move -=20
 its <code>startTime</code> will remain locked to where it was. </p>
=20
 <p>So basically, when <code>smoothChildTiming</code> is <code>true</code>,=
 the engine will rearrange things on=20
 the fly to ensure the playheads line up so that playback is seamless and s=
mooth. The same thing happens when you <code>reverse()</code>
 or alter the <code>timeScale</code>, etc. But sometimes you might not want=
 that behavior - you prefer to have tight=20
 control over exactly where your tweens line up in the timeline - that's wh=
en <code>smoothChildTiming:false</code> is handy.</p>
=20
 <p>One more example: let's say you've got a 10-second tween that's just si=
tting on the root timeline and you're 2-seconds into the tween.=20
 Let's assume it started at exactly 0 on the root to make this easy, and th=
en when it's at 2-seconds, you do <code>tween.seek(5)</code>.=20
 The playhead of the root isn't affected - it keeps going exactly as it alw=
ays did, but in order to make that tween jump to 5 seconds=20
 and play appropriately, the tween's <code>startTime</code> gets changed to=
 -3. That way, the tween's playhead and the root=20
 playhead are perfectly aligned. </p>
=20
 <p><b>Copyright 2008-2013, GreenSock. All rights reserved.</b> This work i=
s subject to the terms in <a href=3D"http://www.greensock.com/terms_of_use.=
html" target=3D"">http://www.greensock.com/terms_of_use.html</a> or for <a =
href=3D"http://www.greensock.com/club/" target=3D"">Club GreenSock</a> memb=
ers, the software agreement that was issued with the membership.</p>
=20
 </div><br><br><hr><br><p></p><center class=3D"copyright"><footer></footer>=
<br>Thu Oct 24 2013, 01:43 PM -05:00  </center></div></body></html><!--<br/=
>Thu Oct 24 2013, 01:43 PM -05:00  -->
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/inherit-arrow.gif

R0lGODlhDwAJAKIAAEZGRjExMSUlJSEhIQAAAP///wAAAAAAACH5BAEHAAUALAAAAAAPAAkAAAMa
WLoM/I8ESAkZNFpsu/9TVnSCqFilOYaqsyQAOw==

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/expanded.gif

R0lGODlhCQAJAKIAAERERDMzMyIiIgAAAP///wAAAAAAAAAAACH5BAEHAAQALAAAAAAJAAkAAAMU
SLrcCyPKAUiYIywhReOeozlkmQAAOw==

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/collapsed.gif

R0lGODlhCQAJAKIAAERERDMzMyIiIgAAAP///wAAAAAAAAAAACH5BAEHAAQALAAAAAAJAAkAAAMU
SATaPcG9ISQZuDqM46RSZkHWYiUAOw==

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/inheritedSummary.gif

R0lGODlhDgAOALMAAElJSYKCgpmZmWtra9jY2GZmZqSkpFNTU4+Pj8HBwXNzc+Xl5VtbW////wAA
AAAAACH5BAEHAA0ALAAAAAAOAA4AAAQ9sMlJKyWAWLrAAMvWLEOgFEVYLYpgFkzKBYnxMrjauIjy
HoOBwBJ4KUSN4ukoUhaYGyeUaERKkQrGwVOJAAA7

------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/html
Content-ID: <frame-D2E701FDCAF0C8C47A47EC9156DD1075@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/package-list.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><title>Package List - GreenSock Documentation</title><base target=
=3D"classFrame"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdo=
cs/style.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" h=
ref=3D"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"p=
rint"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/overrid=
e.css" type=3D"text/css"></head><body class=3D"classFrameContent vsc-initia=
lized"><h3><a href=3D"https://greensock.com/asdocs/package-summary.html" st=
yle=3D"color:black">Packages</a></h3><table cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock=
/package-detail.html">com.greensock</a></td></tr><tr><td><a href=3D"https:/=
/greensock.com/asdocs/com/greensock/core/package-detail.html">com.greensock=
.core</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/gree=
nsock/data/package-detail.html">com.greensock.data</a></td></tr><tr><td><a =
href=3D"https://greensock.com/asdocs/com/greensock/easing/package-detail.ht=
ml">com.greensock.easing</a></td></tr><tr><td><a href=3D"https://greensock.=
com/asdocs/com/greensock/events/package-detail.html">com.greensock.events</=
a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/l=
ayout/package-detail.html">com.greensock.layout</a></td></tr><tr><td><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/loading/package-detail.html=
">com.greensock.loading</a></td></tr><tr><td><a href=3D"https://greensock.c=
om/asdocs/com/greensock/loading/core/package-detail.html">com.greensock.loa=
ding.core</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/=
greensock/loading/data/package-detail.html">com.greensock.loading.data</a><=
/td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/load=
ing/display/package-detail.html">com.greensock.loading.display</a></td></tr=
><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/motionPaths/=
package-detail.html">com.greensock.motionPaths</a></td></tr><tr><td><a href=
=3D"https://greensock.com/asdocs/com/greensock/plugins/package-detail.html"=
>com.greensock.plugins</a></td></tr><tr><td><a href=3D"https://greensock.co=
m/asdocs/com/greensock/text/package-detail.html">com.greensock.text</a></td=
></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/utils/p=
ackage-detail.html">com.greensock.utils</a></td></tr></tbody></table></body=
></html><!--<br/>Thu Jul 4 2013, 12:48 AM -05:00  -->
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg----
Content-Type: text/html
Content-ID: <frame-2DB230D84C1A4EA07B8DF7B65FB1CBC6@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/com/greensock/class-list.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><title>com.greensock - GreenSock Documentation</title><base targe=
t=3D"classFrame"><link rel=3D"stylesheet" href=3D"https://greensock.com/asd=
ocs/style.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" =
href=3D"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"=
print"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/overri=
de.css" type=3D"text/css"></head><body class=3D"classFrameContent vsc-initi=
alized"><h3><a href=3D"https://greensock.com/asdocs/com/greensock/package-d=
etail.html" target=3D"classFrame" style=3D"color:black">Package com.greenso=
ck</a></h3><table cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/package-detail.html#classSu=
mmary" style=3D"color:black"><b>Classes</b></a></td></tr><tr><td><a href=3D=
"https://greensock.com/asdocs/com/greensock/BlitMask.html">BlitMask</a></td=
></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/FlexBli=
tMask.html">FlexBlitMask</a></td></tr><tr><td><a href=3D"https://greensock.=
com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td></tr><tr><=
td><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html">=
TimelineMax</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/co=
m/greensock/TweenLite.html">TweenLite</a></td></tr><tr><td><a href=3D"https=
://greensock.com/asdocs/com/greensock/TweenMax.html">TweenMax</a></td></tr>=
<tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/TweenNano.htm=
l">TweenNano</a></td></tr></tbody></table></body></html><!--<br/>Thu Oct 24=
 2013, 01:43 PM -05:00  -->
------MultipartBoundary--H6zNckmp1htvcYMspuH7sJ4PlnI0BdZHAkOlhGPfSg------
