From: <Saved by Blink>
Snapshot-Content-Location: https://greensock.com/asdocs/index.html?com/greensock/package-detail.html&com/greensock/class-list.html
Subject: TweenMax - GreenSock Documentation
Date: Mon, 1 Mar 2021 20:47:58 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----"


------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/html
Content-ID: <frame-1312FFEB6037E394294EB36BFD0FA88F@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/index.html?com/greensock/package-detail.html&com/greensock/class-list.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.o=
rg/TR/html4/frameset.dtd"><html><head><meta http-equiv=3D"Content-Type" con=
tent=3D"text/html; charset=3DUTF-8">

   =20
<title>TweenMax - GreenSock Documentation</title>
   =20


</head>

<frameset cols=3D"210,*" border=3D"2" bordercolor=3D"#AAAAAA" framespacing=
=3D"0" class=3D"vsc-initialized">
      =20
<frame src=3D"cid:frame-8E2F44989CD45DEB7F97D82B64DEAF58@mhtml.blink" name=
=3D"packageFrame" scrolling=3D"no">
      =20
<frameset rows=3D"80,*" border=3D"0" bordercolor=3D"#AAAAAA">
       	=09
<frame src=3D"cid:frame-501211C38104CA3BA94F42327462FD6B@mhtml.blink" name=
=3D"titlebar" scrolling=3D"no" frameborder=3D"0">
       	=09
<frame src=3D"cid:frame-D8597E5C10C52654623AE90471FD0F47@mhtml.blink" name=
=3D"classFrame" frameborder=3D"0">
    =09
</frameset>
   =20
<noframes>
=09
<body>
       =20
<h2>Frame Alert</h2>
       =20
<p>
        This document is designed to be viewed using the frames feature. If=
 you see this message, you are using a non-frame-capable web client.
        <br>
        Link to <a href=3D"package-summary.html">Non-frame version.</a>
       =20
</p>
       =20
</body>
   =20
</noframes>

</frameset>
<!-- -->


</html>
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/html
Content-ID: <frame-8E2F44989CD45DEB7F97D82B64DEAF58@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/package-frame.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.o=
rg/TR/html4/frameset.dtd"><html><head><meta http-equiv=3D"Content-Type" con=
tent=3D"text/html; charset=3DUTF-8">

   =20
<title>GreenSock Tweening Platform Language Reference</title>

</head>

<frameset rows=3D"40%,60%" border=3D"2" framespacing=3D"1" bordercolor=3D"#=
AAAAAA" class=3D"vsc-initialized">
   =20
<frame src=3D"cid:frame-D2E701FDCAF0C8C47A47EC9156DD1075@mhtml.blink" name=
=3D"packageListFrame">
   =20
<frame src=3D"cid:frame-2DB230D84C1A4EA07B8DF7B65FB1CBC6@mhtml.blink" name=
=3D"classListFrame">
   =20
<noframes>
       =20
<body>
           =20
<h2>Frame Alert</h2>
           =20
<p>This document is designed to be viewed using the frames feature. If you =
see this message, you are using a non-frame-capable web client.
                <br>
                Link to<a href=3D"package-summary.html">Non-frame version.<=
/a>
           =20
</p>
       =20
</body>
   =20
</noframes>

</frameset>
<!-- -->


</html>
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/html
Content-ID: <frame-501211C38104CA3BA94F42327462FD6B@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/title-bar.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><!=
-- saved from url=3D(0014)about:internet --><html><head><meta http-equiv=3D=
"Content-Type" content=3D"text/html; charset=3DUTF-8">
		<title>GreenSock ActionScript API Docs</title><link rel=3D"stylesheet" hr=
ef=3D"https://greensock.com/asdocs/style.css" type=3D"text/css" media=3D"sc=
reen"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/print.c=
ss" type=3D"text/css" media=3D"print"><link rel=3D"stylesheet" href=3D"http=
s://greensock.com/asdocs/override.css" type=3D"text/css">
	=09
	=09
	=09
	</head>
	<body class=3D"vsc-initialized">
		<a name=3D"top"></a>
	=09
		<div style=3D"width:300px; height:60px;position:absolute;background-image=
:url('images/02geek-as3-js.gif'); left:240px; top:7px; border:1px solid #77=
7;">
			<a href=3D"http://02skills.com/course/javascript-animation-bundle/?affco=
de=3Dic6i&amp;couponCode=3DBEST" target=3D"_blank"><div style=3D"width:174p=
x;height:61px;position:relative;left:0px;top:0px;"></div></a>
			<a href=3D"http://02skills.com/course/gsap-flash-animation/?affcode=3Dic=
6i&amp;couponCode=3DBEST" target=3D"_blank"><div style=3D"width:33px;height=
:61px;position:relative;left:174px;top:-61px;"></div></a>
			<a name=3D"02geek" href=3D"http://02skills.com/course/animation-bundle/?=
affcode=3Dic6i&amp;couponCode=3DBEST" target=3D"_blank">
					<div style=3D"width:93px;height:61px;position:relative;left:207px;top:=
-122px;"></div>
			</a>
		</div>
		<table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
		  <tbody><tr>
			<td>
			  <table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
				<tbody><tr>
				  <td class=3D"titleTableTitle" align=3D"left">GreenSock ActionScript A=
PI Docs</td><td class=3D"titleTableSearch" align=3D"center">&nbsp;</td>
				  <td class=3D"titleTableTopNav" align=3D"right">
					<a target=3D"classFrame" href=3D"https://greensock.com/asdocs/package-=
summary.html"> All Packages </a>&nbsp;|&nbsp;<a target=3D"classFrame" href=
=3D"https://greensock.com/asdocs/class-summary.html"> All Classes </a>&nbsp=
;|&nbsp;<a target=3D"classFrame" href=3D"https://greensock.com/asdocs/all-i=
ndex-A.html"> Index </a>&nbsp;|&nbsp;<a href=3D"https://greensock.com/asdoc=
s/title-bar.html"> No Frames </a>
				  </td>
				</tr>
			  </tbody></table>
			</td>
			<td class=3D"titleTableLogo" align=3D"right" rowspan=3D"3"><img src=3D"h=
ttps://greensock.com/asdocs/images/logo.jpg" class=3D"logoImage" title=3D"A=
dobe Logo" alt=3D"Adobe Logo"></td>
		  </tr>
		  <tr>
			<td>
			  <table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0">
				<tbody><tr class=3D"titleTableRow2">
				  <td class=3D"titleTableSubTitle" id=3D"subTitle" align=3D"left" colsp=
an=3D"2">TweenMax</td>
				  <td class=3D"titleTableSubNav" id=3D"subNav" align=3D"right">
					<a id=3D"propertiesLink" href=3D"https://greensock.com/asdocs/title-ba=
r.html#top" style=3D"display: inline;"> Properties </a><span id=3D"properti=
esBar" style=3D"display: inline;"> | </span><a id=3D"packagePropertiesLink"=
 href=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display:=
none"> Properties </a><span id=3D"packagePropertiesBar" style=3D"display:no=
ne"> | </span><a id=3D"constructorLink" href=3D"https://greensock.com/asdoc=
s/title-bar.html#top" style=3D"display:none"> Constructor </a><span id=3D"c=
onstructorBar" style=3D"display:none"> | </span><a id=3D"methodsLink" href=
=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display: inli=
ne;"> Methods </a><span id=3D"methodsBar" style=3D"display: none;"> | </spa=
n><a id=3D"packageFunctionsLink" href=3D"https://greensock.com/asdocs/title=
-bar.html#top" style=3D"display:none"> Functions </a><span id=3D"packageFun=
ctionsBar" style=3D"display:none"> | </span><a id=3D"eventsLink" href=3D"ht=
tps://greensock.com/asdocs/title-bar.html#top" style=3D"display:none"> Even=
ts </a><span id=3D"eventsBar" style=3D"display:none"> | </span><a id=3D"sty=
lesLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"=
display:none"> Styles </a><span id=3D"stylesBar" style=3D"display:none"> | =
</span><a id=3D"SkinPartLink" href=3D"https://greensock.com/asdocs/title-ba=
r.html#top" style=3D"display:none"> Skin Parts </a><span id=3D"SkinPartBar"=
 style=3D"display:none"> | </span><a id=3D"SkinStateLink" href=3D"https://g=
reensock.com/asdocs/title-bar.html#top" style=3D"display:none"> Skin States=
 </a><span id=3D"SkinStateBar" style=3D"display:none"> | </span><a id=3D"ef=
fectsLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" style=
=3D"display:none"> Effects </a><span id=3D"effectsBar" style=3D"display:non=
e"> | </span><a id=3D"constantsLink" href=3D"https://greensock.com/asdocs/t=
itle-bar.html#top" style=3D"display:none"> Constants </a><span id=3D"consta=
ntsBar" style=3D"display:none"> | </span><a id=3D"packageConstantsLink" hre=
f=3D"https://greensock.com/asdocs/title-bar.html#top" style=3D"display:none=
"> Constants </a><span id=3D"packageConstantsBar" style=3D"display:none"> |=
 </span><a id=3D"interfacesLink" href=3D"https://greensock.com/asdocs/title=
-bar.html#top" style=3D"display:none"> Interfaces </a><span id=3D"interface=
sBar" style=3D"display:none"> | </span><a id=3D"classesLink" href=3D"https:=
//greensock.com/asdocs/title-bar.html#top" style=3D"display: none;"> Classe=
s </a><span id=3D"classesBar" style=3D"display:none"> | </span><a id=3D"pac=
kageUseLink" href=3D"https://greensock.com/asdocs/title-bar.html#top" style=
=3D"display:none">Use</a><span id=3D"packageUseBar" style=3D"display:none">=
 | </span><a id=3D"examplesLink" href=3D"https://greensock.com/asdocs/title=
-bar.html#top" style=3D"display: none;"> Examples </a>
				  </td>
				</tr>
				<tr class=3D"titleTableRow3">
				  <td colspan=3D"3">&nbsp;</td>
				</tr>
			  </tbody></table>
			</td>
		  </tr>
		</tbody></table>
=09
<!--<br/>Thu Mar 28 2013, 04:38 PM -05:00  --></body></html>
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/style.css

@charset "utf-8";

.titleTable { width: 100%; }

.titleTableTitle { white-space: nowrap; padding-left: 15px; padding-right: =
5px; font-size: 13px; height: 44px; background-image: url("images/titleTabl=
eTop.jpg"); background-repeat: repeat-x; }

.titleTableSearch { white-space: nowrap; background-image: url("images/titl=
eTableTop.jpg"); background-repeat: repeat-x; padding-right: 10px; }

.searchForm { margin-top: 0px; margin-bottom: 0px; }

.titleTableTopNav { font-size: 12px; background-image: url("images/titleTab=
leTop.jpg"); background-repeat: repeat-x; }

.titleTableLogo { width: 76px; height: 80px; vertical-align: top; }

.titleTableRow2 { color: rgb(0, 0, 0); height: 31px; background-image: url(=
"images/titleTableMiddle.jpg"); background-repeat: repeat-x; }

.titleTableSubTitle { font-size: 20px; padding-left: 15px; padding-right: 5=
px; }

.titleTableSubNav { font-size: 12px; }

.titleTableRow3 { height: 5px; background-image: url("images/titleTableBott=
om.jpg"); background-repeat: repeat-x; }

.logoImage { width: 76px; height: 80px; }

.classHeaderTable { margin-top: 20px; }

.classHeaderTable td { vertical-align: top; padding-bottom: 4px; }

.classHeaderTableLabel { font-weight: bold; padding-right: 15px; }

.classSignature { text-indent: -20px; padding-left: 20px; }

.inheritanceList { text-indent: -20px; padding-left: 20px; }

.inheritArrow { width: 15px; height: 9px; }

.mxmlSyntax { margin-bottom: -13px; }

.collapsedImage { width: 9px; height: 9px; border: 0px; }

.expandedImage { width: 9px; height: 9px; border: 0px; }

.classFrameContent { margin: 10px 5px 10px 10px; }

.classFrameContent td { white-space: nowrap; padding-right: 5px; }

.eclipseBody { display: none; }

img { border: 0px; }

.annotation { font-size: 20px; margin-top: 20px; }

.label { color: rgb(68, 68, 68); font-weight: bold; }

strong { color: rgb(68, 68, 68); }

.summarySection { margin-left: 20px; margin-right: 10px; }

.summaryTableTitle { font-weight: bold; font-size: 18px; padding-top: 20px;=
 padding-bottom: 5px; }

* .summaryTable { margin-top: 10px; border: 1px solid rgb(153, 153, 153); w=
idth: 100%; margin-bottom: 20px; }

html > body .summaryTable { margin-top: 10px; border: 1px solid rgb(153, 15=
3, 153); width: 100%; margin-bottom: 20px; margin-right: 10px; }

.summaryTable th { color: rgb(255, 255, 255); background-color: rgb(98, 124=
, 157); white-space: nowrap; }

.summaryTable td { border-top: 1px solid rgb(153, 153, 153); vertical-align=
: top; }

.summaryTablePaddingCol { width: 5px; }

.summaryTableInheritanceCol { width: 14px; }

.summaryTableSignatureCol { padding-right: 10px; }

.summaryTableOperatorCol { padding-left: 10px; padding-right: 10px; font-we=
ight: bold; }

.summaryTableStatementCol { padding-left: 10px; padding-right: 10px; font-w=
eight: bold; white-space: nowrap; }

.summarySignature { text-indent: -20px; padding-left: 20px; }

.summaryTableOwnerCol { padding-right: 10px; width: 10px; }

.summaryTableCol, .summaryTableSecondCol { }

.signatureLink { font-weight: bold; }

.summaryTableDescription { color: rgb(51, 51, 51); }

.summaryTableLastCol { padding-right: 10px; }

.inheritedSummaryImage { width: 14px; height: 14px; }

.showHideLink { }

.showHideLinkImage { width: 9px; height: 9px; }

.hideInheritedConstant { display: none; }

.showInheritedConstant { display: inline; }

.hideInheritedProtectedConstant { display: none; }

.showInheritedProtectedConstant { display: inline; }

.hideInheritedProperty { display: none; }

.showInheritedProperty { display: inline; }

.hideInheritedProtectedProperty { display: none; }

.showInheritedProtectedProperty { display: inline; }

.hideInheritedMethod { display: none; }

.showInheritedMethod { display: inline; }

.hideInheritedProtectedMethod { display: none; }

.showInheritedProtectedMethod { display: inline; }

.hideInheritedEvent { display: none; }

.showInheritedEvent { display: inline; }

.hideInheritedStyle { display: none; }

.showInheritedStyle { display: inline; }

.hideInheritedEffect { display: none; }

.showInheritedEffect { display: inline; }

.detailSectionHeader { color: rgb(67, 67, 67); font-size: 18px; padding-lef=
t: 10px; padding-top: 4px; padding-bottom: 4px; margin-top: 40px; margin-bo=
ttom: 3px; background-image: url("images/detailSectionHeader.jpg"); backgro=
und-repeat: repeat-x; }

.detailHeader { margin-left: 20px; margin-top: 10px; margin-bottom: 3px; }

.detailHeaderName { font-weight: bold; font-size: 16px; vertical-align: bas=
eline; white-space: nowrap; }

.detailHeaderType { font-size: 12px; vertical-align: baseline; padding-righ=
t: 10px; padding-left: 7px; white-space: nowrap; }

.detailHeaderParens { font-size: 14px; font-weight: bold; padding-left: 1px=
; padding-bottom: 2px; }

.detailHeaderRule { background-image: url("images/detailHeaderRule.jpg"); b=
ackground-repeat: repeat-x; width: 100%; background-position: 50% center; }

.detailBody { margin-left: 20px; margin-right: 15px; margin-bottom: 20px; }

.exampleHeader { background-color: rgb(200, 209, 223); padding-left: 10px; =
padding-top: 3px; padding-bottom: 3px; }

.seeAlso { margin-top: -13px; padding-left: 20px; }

body { font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; color: r=
gb(0, 0, 0); background-color: rgb(255, 255, 255); margin: 0px; padding: 0p=
x; }

body, td, th { font-size: 13px; }

.MainContent { margin-left: 20px; margin-right: 10px; margin-bottom: 10px; =
}

code { font-family: "Lucida Console", "Courier New", Courier, monospace; fo=
nt-size: 12px; }

pre { font-family: "Lucida Console", "Courier New", Courier, monospace; fon=
t-size: 12px; }

th { text-align: left; font-weight: bold; vertical-align: bottom; }

table { background-color: white; }

table.withBorder { border-color: rgb(187, 187, 187); border-width: 1px; bor=
der-style: solid; }

.innertable { border-collapse: collapse; }

.innertable th { border: 1px solid rgb(0, 0, 0); background: rgb(221, 221, =
221); padding: 2px 3px; }

.innertable td { border: 1px solid rgb(0, 0, 0); padding: 2px 3px; }

.paramSpacer { font-size: 5px; }

.row0 { background-color: rgb(242, 242, 242); }

.row1 { background-color: rgb(255, 255, 255); }

.prow0 { background-color: rgb(242, 242, 242); }

.prow1 { background-color: rgb(255, 255, 255); }

.idxrow { padding-top: 5px; }

.SummaryTableHeader { background-color: rgb(204, 204, 204); }

.InheritedTableHeader { background-color: rgb(238, 238, 238); }

.PackageTableHeader { background-color: rgb(238, 238, 238); }

a:link { color: rgb(0, 0, 204); text-decoration: none; }

a:visited { color: rgb(0, 0, 204); text-decoration: none; }

a:hover { text-decoration: underline; color: rgb(0, 0, 204); }

a:active { text-decoration: none; color: rgb(204, 0, 0); }

h1, h2, h3, h4, h5, h6 { font-family: "Trebuchet MS", "Bitstream Vera Sans"=
, verdana, lucida, arial, helvetica, sans-serif; font-weight: bold; margin-=
top: 3px; margin-bottom: 3px; letter-spacing: 1px; width: 90%; }

h1 { font-size: 18px; }

h2 { font-size: 16px; }

h3 { font-size: 14px; }

h4 { font-size: 12px; color: rgb(102, 102, 102); }

h5 { font-size: 11px; }

.copyright { margin-top: 30px; color: rgb(119, 119, 119); font-size: 10px; =
padding-bottom: 5px; }

.inheritanceList { line-height: 19px; }

.private { color: rgb(153, 153, 153); }

.flashonly { color: rgb(0, 0, 0); }

.flexonly { display: none; color: rgb(0, 0, 0); }

.hide { display: none; }

.feedbackLink { }

* html .listing { width: 93%; padding: 5px 5px 5px 6%; overflow-x: auto; ba=
ckground-color: rgb(242, 242, 242); margin-bottom: 10px; margin-top: 10px; =
font-family: "Lucida Console", "Courier New", Courier, monospace; font-size=
: 12px; }

html > body .listing pre { overflow: auto; padding: 5px 5px 5px 40px; backg=
round-color: rgb(242, 242, 242); margin-top: 10px; margin-bottom: 10px; fon=
t-family: "Lucida Console", "Courier New", Courier, monospace; font-size: 1=
2px; }

.listingIcons { padding: 0px; margin-top: 10px; height: 15px; }

.pageTop { height: 10px; }

.hideInheritedSkinState { display: none; }

.showInheritedSkinState { display: inline; }

.hideInheritedSkinPart { display: none; }

.showInheritedSkinPart { display: inline; }
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableTop.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAsAAEDAREA
AhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABAcJ/8QAHRAAAgEEAwAAAAAAAAAAAAAAABMFAQMS
F1WS0//EABgBAQEAAwAAAAAAAAAAAAAAAAEAAgQF/8QAFhEBAQEAAAAAAAAAAAAAAAAAABES/9oA
DAMBAAIRAxEAPwDRnCh0mhDVhTS1hSeokYsElWzJbiIvrf8Aczwn/9k=

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableMiddle.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAfAAEDAREA
AhEBAxEB/8QAFgABAQEAAAAAAAAAAAAAAAAABQQJ/8QAGBABAQADAAAAAAAAAAAAAAAAABMBEmH/
xAAXAQADAQAAAAAAAAAAAAAAAAABAgQA/8QAFhEBAQEAAAAAAAAAAAAAAAAAABEB/9oADAMBAAIR
AxEAPwDWaPF1SlIgy7QIYhPBLgx//9k=

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/titleTableBottom.jpg

/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAICAgICAgICAgIDAgICBAUEAgIEBQYFBQUFBQYHBgYG
BgYGBwcICAkICAcKCgsLCgoODg4ODg4ODg4ODg4ODg7/2wBDAQMDAwYFBgsHBwsODAoMDhEQEBAQ
EREODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg7/wAARCAAFAAEDAREA
AhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/EABoQAAAHAAAAAAAAAAAAAAAAAAABAwYYU5H/
xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFREBAQAAAAAAAAAAAAAAAAAAABH/2gAMAwEAAhEDEQA/
AFEjYx7V8ICP/9k=

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/print.css

@charset "utf-8";

body { color: rgb(0, 0, 0); background: rgb(255, 255, 255); font-family: "T=
imes New Roman", Times, serif; font-size: 12pt; }

a { text-decoration: none; color: rgb(0, 0, 0); }

pre { overflow-wrap: break-word; }

.titleTableTopNav, .titleTableSubNav, .logoImage { display: none; }

.packageFrame { display: none; }

.titleTableSubTitle { font-weight: bold; }

.classHeaderTableLabel { padding-right: 10px; vertical-align: top; }

.showHideLinks { display: none; }

html > body code { font-size: 10pt; }

.summaryTableTitle, .detailSectionHeader { font-size: 14pt; font-weight: bo=
ld; padding-top: 15px; padding-bottom: 5px; }

.summaryTable { border: 1px solid rgb(0, 0, 0); border-collapse: collapse; =
width: 100%; }

.summaryTableDescription { padding-bottom: 20px; }

.summaryTableSignatureCol, .summaryTableOwnerCol, .summaryTableLastCol, .su=
mmaryTableCol { border: 1px solid rgb(0, 0, 0); }

.summaryTablePaddingCol { border-width: 1px 0px 1px 1px; border-top-style: =
solid; border-bottom-style: solid; border-left-style: solid; border-top-col=
or: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb=
(0, 0, 0); border-image: initial; border-right-style: initial; border-right=
-color: initial; }

.summaryTableInheritanceCol, .summaryTableOperatorCol, .summaryTableStateme=
ntCol, .summaryTableSecondCol { border-width: 1px 1px 1px 0px; border-top-s=
tyle: solid; border-right-style: solid; border-bottom-style: solid; border-=
top-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-bottom-co=
lor: rgb(0, 0, 0); border-image: initial; border-left-style: initial; borde=
r-left-color: initial; }

.summaryTableLastCol { vertical-align: top; }

.detailHeader { font-size: 13pt; padding-top: 100px; }

.detailHeaderName { font-weight: bold; }

.detailHeaderType { padding-left: 5px; }

.detailHeaderRule { background: rgb(255, 0, 0); }

.seeAlso { padding-bottom: 20px; margin-top: -20px; }

.innertable { border-collapse: collapse; }

.innertable td, .innertable th { border: 1px solid rgb(0, 0, 0); padding-le=
ft: 5px; padding-right: 5px; }

.listing { font-size: 10pt; }

.feedbackLink { display: none; }

.copyright { font-size: 10pt; }
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/override.css

@charset "utf-8";
=0A
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/02geek-as3-js.gif

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

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/logo.jpg

/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABGAAD/7gAOQWRvYmUA
ZMAAAAAB/9sAhAAEAwMDAwMEAwMEBgQDBAYHBQQEBQcIBgYHBgYICggJCQkJCAoKDAwMDAwKDAwN
DQwMEREREREUFBQUFBQUFBQUAQQFBQgHCA8KCg8UDg4OFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU
FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABQAEwDAREAAhEBAxEB/8QAYwABAAIDAAAA
AAAAAAAAAAAAAAMEAQYIAQEBAAMAAAAAAAAAAAAAAAAAAQIDBBAAAgADCQAAAAAAAAAAAAAAABIB
AwRhUpKT0xTUVQcRAQEBAQAAAAAAAAAAAAAAAAAREgH/2gAMAwEAAhEDEQA/AOjVgdrkgsAQWAIL
AEFgCCwBBYAgsAQWAILAETICiAogKICiAogKICiAogKICpkJVEFBBQQUEFBBQQUEFBBQQUWEAIAQ
AgBACAEAIAQAgEygFAKAUAoBQCgFAKAUDKV96lyJvIEUSvvUuRN5AgJX3qXIm8gQEr71LkTeQICV
96lyJvIEBK+9S5E3kCAlfepcibyBASvvUuRN5AgJX3qXIm8gQEr71LkTeQIL6GKiAEAIAQAgBACA
EAIBaWwAtgBbAC2AFsALYAWwAtgBbAC2ATpElWCRFIJEUgkRSCRFIJEUgkRSCRFIJEUgkRSNP3Xq
XWUGCbrGnfW3JuvUusoME3WG+mTdepdZQYJusN9Mm69S6ygwTdYb6ZN16l1lBgm6w30ybr1LrKDB
N1hvpk3XqXWUGCbrDfTJuvUusoME3WG+mTdepdZQYJusN9Mm69S6ygwTdYb6Zf/Z

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/html
Content-ID: <frame-D8597E5C10C52654623AE90471FD0F47@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/com/greensock/TweenMax.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/sty=
le.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" href=3D=
"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"print">=
<link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/override.css"=
 type=3D"text/css"><meta name=3D"keywords" content=3D"TweenMax,com.greensoc=
k.TweenMax,autoUpdate,autoUpdate,bitmapMode,bitmapMode,defaultEase,defaultE=
ase,defaultOverwrite,fillColor,fillColor,height,height,rotation,rotation,sc=
aleX,scaleX,scaleY,scaleY,scrollX,scrollX,scrollY,scrollY,smoothing,smoothi=
ng,target,target,target,target,ticker,ticker,ticker,vars,width,width,wrap,w=
rap,wrapOffsetX,wrapOffsetX,wrapOffsetY,wrapOffsetY,x,x,y,y,add,addCallback=
,addEventListener,addEventListener,addLabel,addPause,call,clear,currentLabe=
l,delayedCall,delayedCall,delayedCall,disableBitmapMode,disableBitmapMode,d=
ispose,dispose,duration,duration,enableBitmapMode,enableBitmapMode,exportRo=
ot,from,from,from,from,fromTo,fromTo,fromTo,getActive,getAllTweens,getChild=
ren,getLabelAfter,getLabelBefore,getLabelTime,getLabelsArray,getTweensOf,ge=
tTweensOf,getTweensOf,invalidate,invalidate,invalidate,invalidate,isTweenin=
g,kill,killAll,killChildTweensOf,killDelayedCallsTo,killDelayedCallsTo,kill=
TweensOf,killTweensOf,killTweensOf,normalizePosition,normalizePosition,paus=
eAll,progress,progress,remove,removeCallback,removeEventListener,removeEven=
tListener,removeLabel,repeat,repeat,repeatDelay,repeatDelay,resumeAll,seek,=
set,set,set,setActualSize,setSize,setSize,shiftChildren,staggerFrom,stagger=
From,staggerFromTo,staggerFromTo,staggerTo,staggerTo,stop,time,time,to,to,t=
o,to,totalDuration,totalDuration,totalDuration,totalProgress,totalProgress,=
tweenFromTo,tweenTo,update,update,updateTo,usesFrames,yoyo,yoyo"><title>com=
.greensock.TweenMax</title></head><body class=3D"vsc-initialized">
<table class=3D"titleTable" cellpadding=3D"0" cellspacing=3D"0" id=3D"title=
Table" style=3D"display:none"><tbody><tr><td class=3D"titleTableTitle" alig=
n=3D"left">GreenSock ActionScript API Docs</td><td class=3D"titleTableTopNa=
v" align=3D"right"><a href=3D"https://greensock.com/asdocs/package-summary.=
html">All Packages</a>&nbsp;|&nbsp;<a href=3D"https://greensock.com/asdocs/=
class-summary.html">All Classes</a>&nbsp;|&nbsp;<a href=3D"https://greensoc=
k.com/asdocs/all-index-A.html">Index</a>&nbsp;|&nbsp;<a id=3D"framesLink1" =
href=3D"https://greensock.com/asdocs/index.html?com/greensock/TweenMax.html=
&amp;com/greensock/class-list.html">Frames</a><a id=3D"noFramesLink1" style=
=3D"display:none" href=3D"https://greensock.com/asdocs/com/greensock/TweenM=
ax.html"> No Frames </a></td><td class=3D"titleTableLogo" align=3D"right" r=
owspan=3D"3"><img src=3D"https://greensock.com/asdocs/images/logo.jpg" clas=
s=3D"logoImage" alt=3D" Adobe Logo " title=3D" Adobe Logo "></td></tr><tr c=
lass=3D"titleTableRow2"><td class=3D"titleTableSubTitle" id=3D"subTitle" al=
ign=3D"left">TweenMax</td><td class=3D"titleTableSubNav" id=3D"subNav" alig=
n=3D"right"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.=
html#propertySummary">Properties</a>&nbsp;| <a href=3D"https://greensock.co=
m/asdocs/com/greensock/TweenMax.html#methodSummary">Methods</a></td></tr><t=
r class=3D"titleTableRow3"><td colspan=3D"3">&nbsp;</td></tr></tbody></tabl=
e><div xmlns:fn=3D"http://www.w3.org/2005/xpath-functions" class=3D"MainCon=
tent"><table class=3D"classHeaderTable" cellpadding=3D"0" cellspacing=3D"0"=
><tbody><tr><td class=3D"classHeaderTableLabel">Package</td><td><a href=3D"=
https://greensock.com/asdocs/com/greensock/package-detail.html">com.greenso=
ck</a></td></tr><tr><td class=3D"classHeaderTableLabel">Class</td><td class=
=3D"classSignature">public  class  TweenMax</td></tr><tr><td class=3D"class=
HeaderTableLabel">Inheritance</td><td class=3D"inheritanceList">TweenMax  <=
img src=3D"https://greensock.com/asdocs/images/inherit-arrow.gif" title=3D"=
Inheritance" alt=3D"Inheritance" class=3D"inheritArrow"> <a href=3D"https:/=
/greensock.com/asdocs/com/greensock/TweenLite.html">TweenLite</a> <img src=
=3D"https://greensock.com/asdocs/images/inherit-arrow.gif" title=3D"Inherit=
ance" alt=3D"Inheritance" class=3D"inheritArrow"> <a href=3D"https://greens=
ock.com/asdocs/com/greensock/core/Animation.html">Animation</a> <img src=3D=
"https://greensock.com/asdocs/images/inherit-arrow.gif" title=3D"Inheritanc=
e" alt=3D"Inheritance" class=3D"inheritArrow"> Object</td></tr><tr><td clas=
s=3D"classHeaderTableLabel">Implements</td><td> flash.events.IEventDispatch=
er</td></tr></tbody></table><p></p><p></p><p></p>
 TweenMax extends TweenLite, adding many useful (but non-essential) feature=
s like repeat(),=20
 repeatDelay(), yoyo(), AS3 event dispatching, updateTo(), pauseAll(), and =
more. It also activates many extra plugins=20
 by default, making it extremely full-featured. Any of the plugins can work=
 with TweenLite too, but TweenMax saves
 you the step of activating the common ones. Since TweenMax extends TweenLi=
te, it can do <b>ANYTHING</b>=20
 TweenLite can do plus more. The syntax is identical. You can mix and match=
 TweenLite and TweenMax in your=20
 project as you please, but if file size is a concern it is best to stick w=
ith TweenLite unless you need=20
 a particular TweenMax-only feature.=20
=20
 <p>Like TweenLite, a TweenMax instance handles tweening one or more proper=
ties of <b>any object</b>=20
 (or array of objects) over time. TweenMax can be used on its own or in con=
juction with advanced sequencing=20
 tools like TimelineLite or TimelineMax to make complex tasks much simpler.=
 With scores of other animation=20
 frameworks to choose from, why consider the GreenSock Animation Platform?:=
</p>
=20
 	             <ul>
 		               <li>
                     <b> SPEED </b>- The platform has been highly optimized=
 for maximum performance.=20
 			See some speed comparisons yourself at=20
 			<a href=3D"http://www.greensock.com/tweening-speed-test/" target=3D"">h=
ttp://www.greensock.com/tweening-speed-test/</a>
                  </li>
 		 =20
 		               <li>
                     <b> Freakishly robust feature set </b>- In addition to=
 tweening any numeric property=20
 			of any object, plugins can be activated to tween hex colors, beziers, a=
rrays, filters, plus=20
 			<b>LOTS</b> more. It can round values, use relative values, smoothly re=
verse() on the=20
 			fly, automatically detect and accommodate getter/setter functions, empl=
oy virtually any easing=20
 			equation, <code>pause()/resume()</code> anytime, and intelligently mana=
ge conflicting tweens of=20
 			the same object with various overwrite modes. TweenMax extends TweenLit=
e and adds even=20
 			more capabilities like repeat, yoyo, repeatDelay, on-the-fly destinatio=
n value=20
 			updates and more.</li>
 		 =20
 		               <li>
                     <b> Sequencing, grouping, and management features </b>=
- TimelineLite and TimelineMax=20
 			make it surprisingly simple to create complex sequences or groups of tw=
eens that you can=20
 			control as a whole. play(), pause(), restart(),  or reverse(). You can =
even tween a timeline's=20
 			<code>time</code> or <code>progress</code> to fastforward or rewind the=
 entire timeline. Add=20
 			labels, change the timeline's timeScale, nest timelines within timeline=
s, and much more.
 			This can revolutionize your animation workflow, making it more modular =
and concise.</li>
=20
 		               <li>
                     <b> AS3, AS2, and JavaScript </b>- Most other engines =
are only developed for one language,=20
 			but the GreenSock Animation Platform allows you to use a consistent API=
 across all your Flash and
 			HTML5 projects.</li>
=20
 		               <li>
                     <b> Ease of use </b>- Designers and Developers alike r=
ave about how intuitive the platform is.</li>
 	=09
 		               <li>
                     <b> Support and reliability </b>- With frequent update=
s, <a href=3D"http://forums.greensock.com/" target=3D"">dedicated forums</a=
>,=20
 			committed authorship, a solid track record, a proven funding mechansim,=
 and a thriving community of users,=20
 			the platform is a safe long-term bet (unlike many open source projects)=
.</li>
=20
 		               <li>
                     <b> Expandability </b>- With its plugin architecture, =
you can activate as many (or as few)=20
 			extra features as your project requires. Write your own plugin to handl=
e particular special=20
 			properties in custom ways. Minimize bloat and maximize performance.</li=
>
 	=09
 	             </ul>
=20
               <p>
                  <b>USAGE</b>
               </p>
               <p>The most common type of tween is a <a href=3D"https://gre=
ensock.com/asdocs/com/greensock/TweenMax.html#to()" target=3D"">to()</a> tw=
een which allows you=20
 to define the destination values:</p>
=20
               <p>
                  <code>
 TweenMax.to(myObject, 2, {x:100, y:200});
 </code>
               </p>
=20
               <p>The above code will tween <code>myObject.x</code> from wh=
atever it currently is to 100 and=20
 <code>myObject.y</code> property to 200 over the course of 2 seconds. Noti=
ce the x and y values are=20
 defined inside a generic object (between curly braces). Put as many proper=
ties there as you want.</p>
=20
               <p>By default, tweens begin immediately, although you can de=
lay them using the <code>delay</code>
 special property or pause them initially using the <code>paused</code> spe=
cial property (see below).</p>
=20
               <p>The <code>target</code> can also be an array of objects. =
For example, the following tween will
 tween the alpha property to 0.5 and y property to 100 for obj1, obj2, and =
obj3:</p>
=20
               <p>
                  <code>
 TweenMax.to([obj1, obj2, obj3], 1, {alpha:0.5, y:100});
 </code>
               </p>
=20
               <p>You can also use a <a href=3D"https://greensock.com/asdoc=
s/com/greensock/TweenMax.html#from()" target=3D"">from()</a> tween if you w=
ant to define the=20
 <b>starting</b> values instead of the ending values so that the target twe=
ens <i>from</i>=20
 the defined values to wherever they currently are. Or a <a href=3D"https:/=
/greensock.com/asdocs/com/greensock/TweenMax.html#fromTo()" target=3D"">fro=
mTo()</a>=20
 lets you define both starting and ending values.</p>
=20
               <p>Although the <code>to()</code>, <code>from()</code>, and =
<code>fromTo()</code> static methods
 are popular because they're quick and can avoid some garbage collection ha=
ssles, you can also
 use the more object-oriented syntax like this:</p>
=20
               <p>
                  <code>
 var tween =3D new TweenMax(myObject, 2, {x:100, y:200});
 </code>
               </p>
=20
               <p>or even:</p>
=20
               <p>
                  <code>
 var tween =3D TweenMax.to(myObject, 2, {x:100, y:200});
 </code>
               </p>
=20
=20
               <p>
                  <b>SPECIAL PROPERTIES:</b>
               </p>
               <p>Typically the <code>vars</code> parameter is used to defi=
ne ending values for tweening=20
 properties of the <code>target</code> (or beginning values for <code>from(=
)</code> tweens)=20
 like <code>{x:100, y:200, alpha:0}</code>, but the following optional spec=
ial properties=20
 serve other purposes:</p>
=20
               <ul>
 	                <li>
                     <b> delay </b>:<i> Number</i> -
 				 Amount of delay in seconds (or frames for frames-based tweens) before=
 the tween should begin.</li>
 =09
 	                <li>
                     <b> ease </b>:<i> Ease (or Function)</i> -
 				 You can choose from various eases to control the rate of change durin=
g=20
 				 the animation, giving it a specific "feel". For example, <code>Elasti=
cOut.ease</code>=20
 				 or <code>StrongInOut.ease</code>. For best performance, use one of th=
e GreenSock eases
 				 (which are in the <code>com.greensock.easing</code> package). TweenMa=
x also works with=20
 				 any standard easing equation that uses the typical 4 parameters (<cod=
e>time, start,=20
 				 change, duration</code>) like Adobe's <code>fl.motion.easing</code> e=
ases.
 				 The default is <code>Power1.easeOut</code>. For linear animation, use=
 the GreenSock=20
 				 <code>Linear.ease</code> ease</li>
 =09
 	                <li>
                     <b> onComplete </b>:<i> Function</i> -
 				 A function that should be called when the tween has completed</li>
 =09
 	                <li>
                     <b> onCompleteParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onComplete</code> function. =
For example,
 				 <code>TweenMax.to(mc, 1, {x:100, onComplete:myFunction, onCompletePar=
ams:[mc, "param2"]});</code>
 				 To self-reference the tween instance itself in one of the parameters,=
 use <code>"{self}"</code>,
 				 like: <code>onCompleteParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> useFrames </b>:<i> Boolean</i> -
 				 If <code>useFrames</code> is <code>true</code>, the tweens's timing w=
ill be=20
 				 based on frames instead of seconds because it is intially added to th=
e root
 				 frames-based timeline. This causes both its <code>duration</code>
 				 and <code>delay</code> to be based on frames. An animations's timing =
mode is=20
 				 always determined by its parent <code>timeline</code>.</li>
 =09
 	                <li>
                     <b> easeParams </b>:<i> Array</i> [deprecated] -=20
 				 Some GreenSock eases (like <code>OutIn</code> or <code>ElasticOut</co=
de>) have a <code>config()</code>=20
 				 method that allows them to be configured to change their behavior (li=
ke <code>TweenMax.to(mc, 1, {x:100, ease:ElasticOut.ease.config(0.5, 1)})</=
code>
 				 but if you are using a non-GreenSock ease that accepts extra paramete=
rs like Adobe's
 				 <code>fl.motion.easing.Elastic</code>, <code>easeParams</code> allows=
 you to define=20
 				 those extra parameters as an array like <code>TweenMax.to(mc, 1, {x:1=
00, ease:Elastic.easeOut, easeParams:[0.5, 1]})</code>.=20
 				 Most easing equations, however, don't require extra parameters so you=
 won't need to=20
 				 pass in any easeParams. GreenSock eases provide the best performance,=
 so use them=20
 				 whenever possible.</li>
 =09
 	                <li>
                     <b> immediateRender </b>:<i> Boolean</i> -
 				 Normally when you create a tween, it begins rendering on the very nex=
t frame (update cycle)=20
 				 unless you specify a <code>delay</code>. However, if you prefer to fo=
rce the tween to=20
 				 render immediately when it is created, set <code>immediateRender</cod=
e> to <code>true</code>.=20
 				 Or to prevent a <code>from()</code> from rendering immediately, set <=
code>immediateRender</code>=20
 				 to <code>false</code>. By default, <code>from()</code> tweens set <co=
de>immediateRender</code> to <code>true</code>.</li>
=20
                  <li>
                     <b> onStart </b>:<i> Function</i> -
 				 A function that should be called when the tween begins (when its <cod=
e>time</code>
 				 changes from 0 to some other value which can happen more than once if=
 the=20
 				 tween is restarted multiple times).</li>
 =09
 	                <li>
                     <b> onStartParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onStart</code> function. For=
 example,=20
 				 <code>TweenMax.to(mc, 1, {x:100, delay:1, onStart:myFunction, onStart=
Params:[mc, "param2"]});</code>
 				 To self-reference the tween instance itself in one of the parameters,=
 use <code>"{self}"</code>,
 				 like: <code>onStartParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> onUpdate </b>:<i> Function</i> -
 				 A function that should be called every time the tween updates =20
 				 (on every frame while the tween is active)</li>
 =09
 	                <li>
                     <b> onUpdateParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onUpdate</code> function. Fo=
r example,
 				 <code>TweenMax.to(mc, 1, {x:100, onUpdate:myFunction, onUpdateParams:=
[mc, "param2"]});</code>
 				 To self-reference the tween instance itself in one of the parameters,=
 use <code>"{self}"</code>,
 				 like: <code>onUpdateParams:["{self}", "param2"]</code>
                  </li>
 =09
 	                <li>
                     <b> onReverseComplete </b>:<i> Function</i> -
 				 A function that should be called when the tween has reached its begin=
ning again from the=20
 				 reverse direction. For example, if <code>reverse()</code> is called t=
he tween will move
 				 back towards its beginning and when its <code>time</code> reaches 0, =
<code>onReverseComplete</code>
 				 will be called. This can also happen if the tween is placed in a Time=
lineLite or TimelineMax instance
 				 that gets reversed and plays the tween backwards to (or past) the beg=
inning.</li>
 =09
 	                <li>
                     <b> onReverseCompleteParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the <code>onReverseComplete</code> fun=
ction. For example,=20
 				 <code>TweenMax.to(mc, 1, {x:100, onReverseComplete:myFunction, onReve=
rseCompleteParams:[mc, "param2"]});</code>
 				 To self-reference the tween instance itself in one of the parameters,=
 use <code>"{self}"</code>,
 				 like: <code>onReverseCompleteParams:["{self}", "param2"]</code>
                  </li>
=20
                  <li>
                     <b> paused </b>:<i> Boolean</i> -
 				 If <code>true</code>, the tween will pause itself immediately upon cr=
eation.</li>
 =09
 	                <li>
                     <b> overwrite </b>:<i> String (or integer)</i> -
 				 Controls how (and if) other tweens of the same target are overwritten=
.=20
 				 There are several modes to choose from, but <code>"auto"</code> is th=
e default (although
 				 you can change the default mode using the <code>TweenLite.defaultOver=
write</code> property):
 					<ul>
 			  			               <li>
                           <code>"none"</code> (0) (or <code>false</code>) =
- no overwriting will occur.</li>
 					=09
 						                 <li>
                           <code>"all"</code> (1) (or <code>true</code>) - =
immediately overwrites all existing=20
 									tweens of the same target even if they haven't started yet or don=
't have=20
 									conflicting properties.</li>
 												=09
 						                 <li>
                           <code>"auto"</code> (2) - when the tween renders=
 for the first time, it will analyze=20
 									tweens of the same target that are currently active/running and o=
nly overwrite=20
 									individual tweening properties that overlap/conflict. Tweens that=
 haven't begun
 									yet are ignored. For example, if another active tween is found th=
at is tweening
 									3 properties, only 1 of which it shares in common with the new tw=
een, the other
 									2 properties will be left alone. Only the conflicting property ge=
ts overwritten/killed.
 									This is the default mode and typically the most intuitive for dev=
elopers.</li>
 						=09
 						                 <li>
                           <code>"concurrent"</code> (3) - when the tween r=
enders for the first time, it kills
 									only the active (in-progress) tweens of the same target regardles=
s of whether=20
 									or not they contain conflicting properties. Like a mix of <code>"=
all"</code>=20
 									and <code>"auto"</code>. Good for situations where you only want =
one tween=20
 									controling the target at a time.</li>
 											=09
 						                 <li>
                           <code>"allOnStart"</code> (4) - Identical to <co=
de>"all"</code> but waits to run
 									the overwrite logic until the tween begins (after any delay). Kil=
ls
 									tweens of the same target even if they don't contain conflicting =
properties
 									or haven't started yet.</li>
 											=09
 						                 <li>
                           <code>"preexisting"</code> (5) - when the tween =
renders for the first time, it kills
 									only the tweens of the same target that existed BEFORE this tween=
 was created
 									regardless of their scheduled start times. So, for example, if yo=
u create a tween
 									with a delay of 10 and then a tween with a delay of 1 and then a =
tween with a=20
 									delay of 2 (all of the same target), the 2nd tween would overwrit=
e the first
 									but not the second even though scheduling might seem to dictate o=
therwise.=20
 									<code>"preexisting"</code> only cares about the order in which th=
e instances
 									were actually created. This can be useful when the order in which=
 your code runs=20
 									plays a critical role.</li>
=20
 					               </ul>
                  </li>
 =09
 	                <li>
                     <b> repeat </b>:<i> Number</i> -
 				 Number of times that the tween should repeat after its first iteratio=
n. For example,=20
 				 if <code>repeat</code> is 1, the tween will play a total of twice (th=
e initial play
 				 plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> s=
hould always be an integer.</li>
 =09
 	                <li>
                     <b> repeatDelay </b>:<i> Number</i> -
 				 Amount of time in seconds (or frames for frames-based tweens) between=
 repeats. For example,
 				 if <code>repeat</code> is 2 and <code>repeatDelay</code> is 1, the tw=
een will play initially,
 				 then wait for 1 second before it repeats, then play again, then wait =
1 second again before=20
 				 doing its final repeat.</li>
 =09
 	                <li>
                     <b> yoyo </b>:<i> Boolean</i> -
 				 If <code>true</code>, every other <code>repeat</code> cycle will run =
in the opposite
 				 direction so that the tween appears to go back and forth (forward the=
n backward).
 				 This has no affect on the "<code>reversed</code>" property though. So=
 if <code>repeat</code>=20
 				 is 2 and <code>yoyo</code> is <code>false</code>, it will look like:=
=20
 				 start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</c=
ode> is <code>true</code>,=20
 				 it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.</=
li>
 =20
 	                <li>
                     <b> onRepeat </b>:<i> Function</i> -
 				 A function that should be called each time the tween repeats</li>
 =09
 	                <li>
                     <b> onRepeatParams </b>:<i> Array</i> -
 				 An Array of parameters to pass the onRepeat function. For example,=20
 				 <code>TweenMax.to(mc, 1, {x:100, onRepeat:myFunction, onRepeatParams:=
[mc, "param2"]});</code>
 				 To self-reference the tween instance itself in one of the parameters,=
 use <code>"{self}"</code>,
 				 like: <code>onRepeatParams:["{self}", "param2"]</code>
                  </li>
 								=09
 	                <li>
                     <b> onStartListener </b>:<i> Function</i> [AS3 only] -
 				 A function that should be called (and passed an event parameter) when=
 the tween begins=20
 				 (when its <code>totalTime</code> changes from 0 to some other value w=
hich can happen more=20
 				 than once if the tween is restarted multiple times). Identical to <co=
de>onStart</code> except
 				 that the function will always be passed an event parameter whose <cod=
e>target</code> property points
 				 to the tween. It's the same as doing <code>myTween.addEventListener("=
start", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onStart</code>.</li>
 =09
 	                <li>
                     <b> onUpdateListener </b>:<i> Function</i> [AS3 only] =
-
 				 A function that should be called (and passed an event parameter) each=
 time the tween updates=20
 				 (on every frame while the tween is active). Identical to <code>onUpda=
te</code> except
 				 that the function will always be passed an event parameter whose <cod=
e>target</code> property points
 				 to the tween. It's the same as doing <code>myTween.addEventListener("=
update", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onUpdate</code>.</li>
 	 =20
 	                <li>
                     <b> onCompleteListener </b>:<i> Function</i> [AS3 only=
] -=20
 				 A function that should be called (and passed an event parameter) each=
 time the tween completes.=20
 				 Identical to <code>onComplete</code> except that the function will al=
ways be passed an event=20
 				 parameter whose <code>target</code> property points to the tween. It'=
s the same as doing=20
 				 <code>myTween.addEventListener("complete", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onComplete</code>.</li>
=20
                  <li>
                     <b> onReverseCompleteListener </b>:<i> Function</i> [A=
S3 only] -
 				 A function that should be called (and passed an event parameter) each=
 time the tween has reached=20
 				 its beginning again from the reverse direction. For example, if <code=
>reverse()</code> is called=20
 				 the tween will move back towards its beginning and when its <code>tot=
alTime</code> reaches 0,=20
 				 <code>onReverseCompleteListener</code> will be called. This can also =
happen if the tween is placed=20
 				 in a TimelineLite or TimelineMax instance that gets reversed and play=
s the tween backwards to=20
 				 (or past) the beginning. Identical to <code>onReverseComplete</code> =
except that the function=20
 				 will always be passed an event parameter whose <code>target</code> pr=
operty points to the tween.=20
 				 It's the same as doing <code>myTween.addEventListener("reverseComplet=
e", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onReverseComplete</code>.</li>
=20
                  <li>
                     <b> onRepeatListener </b>:<i> Function</i> [AS3 only] =
-
 				 A function that should be called (and passed an event parameter) each=
 time the tween repeats.=20
 				 Identical to <code>onRepeat</code> except that the function will alwa=
ys be passed an event=20
 				 parameter whose <code>target</code> property points to the tween. It'=
s the same as doing=20
 				 <code>myTween.addEventListener("repeat", myFunction);</code>.=20
 				 Unless you need the event parameter, it's better/faster to use <code>=
onRepeat</code>.</li>
 =09
 	                <li>
                     <b> startAt </b>:<i> Object</i> -
 				 Allows you to define the starting values for tweening properties. Typ=
ically, TweenMax uses=20
 				 the current value (whatever it happens to be at the time the tween be=
gins) as the starting=20
 				 value, but <code>startAt</code> allows you to override that behavior.=
 Simply pass an object=20
 				 in with whatever properties you'd like to set just before the tween b=
egins. For example,=20
 				 if <code>mc.x</code> is currently 100, and you'd like to tween it fro=
m 0 to 500, do=20
 				 <code>TweenMax.to(mc, 2, {x:500, startAt:{x:0}});</code>
                  </li>
               </ul>
=20
               <p>
                  <b>AS3 note:</b> In AS3, using a <code>
                     <a href=3D"https://greensock.com/asdocs/com/greensock/=
data/TweenMaxVars.html" target=3D"">TweenMaxVars</a>
                  </code>=20
 instance instead of a generic object to define your <code>vars</code> is a=
 bit more verbose but provides=20
 code hinting and improved debugging because it enforces strict data typing=
. Use whichever one you prefer.</p>
=20
=20
=20
               <p>
                  <b>PLUGINS:</b>
               </p>
=20
               <p>Think of plugins like special properties that are dynamic=
ally added, delivering extra abilities without
 forcing them to be baked into the core engine, keeping it relatively lean =
and mean. Each plugin is associated=20
 with a property name and it takes responsibility for handling that propert=
y. For example, the TintPlugin=20
 is associated with the "tint" property name so if it is activated it will =
intercept the "tint" property=20
 in the following tween and manage it uniquely:</p>
=20
               <p>
                  <code>
 TweenLite.to(mc, 1, {tint:0xFF0000});
 </code>
               </p>
=20
               <p>If the TintPlugin wasn't activated, TweenLite would act a=
s though you were trying to literally tween the=20
 <code>mc.tint</code> property (and there is no such thing).</p>
=20
               <p>In the JavaScript version of TweenMax, activating a plugi=
n is as simple as loading the associated .js file.=20
 No extra activation code is necessary. And by default, the JavaScript vers=
ion of TweenMax includes the CSSPlugin
 and RoundPropsPlugin so you don't need to load those separately. In the Ac=
tionScript version, activating a plugin=20
 requires a single line of code and you only need to do it once, so it's pr=
etty easy. Simply pass an Array containing=20
 the names of all the plugins you'd like to activate to the <code>TweenPlug=
in.activate()</code> method, like this:</p>
=20
               <p>
                  <code>
 TweenPlugin.activate([FrameLabelPlugin, ColorTransformPlugin, TintPlugin])=
;
 </code>
               </p>
=20
               <p>To make it even easier, there is a <a href=3D"http://www.=
greensock.com/tweenlite/#plugins" target=3D"">Plugin Explorer</a>
 which writes the code for you. All you need to do is select the plugins an=
d copy/paste the code=20
 from the bottom of the tool. It also displays interactive examples of each=
 plugin and the assocaited=20
 code so that it=E2=80=99s easy to see the correct syntax.</p>
=20
               <p>The following plugins are automatically activated by Twee=
nMax:</p>
 =09
               <ul>
 	                <li>
                     <b> autoAlpha </b>:<i> Number</i> -=20
 				 <code>autoAlpha</code> is identical to tweening <code>alpha</code> ex=
cept that it also=20
 				 automatically hides the target when the value hits zero, and shows th=
e target when the
 				 value isn't zero. In AS3, this means it toggles the target's <code>vi=
sible</code> property.
 				 In AS2, the <code>_visible</code> property is toggled, and in JS the =
<code>visibility</code>=20
 				 style property is set to <code>"hidden"</code> to hide. This can help=
 improve rendering performance.</li>
 						  =20
                  <li>
                     <b> visible </b>:<i> Boolean</i> [AS3/AS2 only] -=20
 				 hides or shows the target when the tween completes. In AS3, this mean=
s it toggles the target's=20
 				 <code>visible</code> property. In AS2, the <code>_visible</code> prop=
erty is toggled, and in=20
 				 JS the <code>display</code> style is set to <code>"none"</code> to hi=
de.</li>
 	 =20
 	                <li>
                     <b> volume </b>:<i> Number</i> [AS3/AS2 only] -=20
 				 Tweens the volume of an object. In AS3, it can handle anything with a=
 <code>soundTransform</code>=20
 				 property (MovieClip/SoundChannel/NetStream, etc.). In AS2, it is for =
MovieClips or Sound objects.</li>
 	 =20
 	                <li>
                     <b> tint </b>:<i> Number</i> [AS3/AS2 only] -=20
 				 Tweens the color (tint) of the target. Use a hex value, for example: =
0xFF0000 for red or 0x0000FF=20
 				 for blue, etc. To remove the tint, use <code>null</code>.</li>
  	 =20
 	                <li>
                     <b> frame </b>:<i> Number</i> [AS3/AS2 only] -=20
 				 Tweens a MovieClip to a particular frame. To tween to a label, use th=
e FrameLabelPlugin.</li>
 =09
 	                <li>
                     <b> bezier </b>:<i> Array</i> -=20
 				 Bezier tweening allows you to tween in a non-linear way. For example,=
 you may want to tween
 				 the target's position from the origin (0,0) 500 pixels to the right (=
500,0) but curve downwards
  			 through the middle of the tween. Simply pass as many objects in the b=
ezier array as you'd like,=20
 				 one for each "control point". See the BezierPlugin documentation for =
more details. In this example,=20
 				 let's say the control point would be at x/y coordinates 250,50. Just =
make sure your mc is at=20
 				 coordinates 0,0 and then do: <code>TweenMax.to(my_mc, 3, {bezier:[{x:=
250, y:50}, {x:500, y:0}]});</code>
                  </li>
 					  =20
 	                <li>
                     <b> bezierThrough </b>:<i> Array</i> -=20
 				 Identical to <code>bezier</code> except that instead of passing bezie=
r control point values, you
 				 pass values through which the bezier values should move. This can be =
more intuitive than using=20
 				 control points.</li>
 							 =20
 	                <li>
                     <b> orientToBezier </b>:<i> Boolean (or Array)</i> -=
=20
 				 When doing a <code>bezier</code> or <code>bezierThrough</code> tween,=
 you can use
 				 <code>orientToBezier</code> to cause the target to alter its rotation=
 in the direction
 				 of the bezier, making it appear to turn with the curves. The simplest=
 way is to set
 				 <code>orientToBezier</code> to <code>true</code>, but you can accompl=
ish advanced effects
 				 like using a different property than "rotation" or adding a certain n=
umber of degrees to the
 				 standard rotational value, etc. by using an array instead. The array =
should contain the
 				 following 4 elements (in this order):=20
 					<ol>
 						                 <li> Position property 1 (typically "x")</li>
 						                 <li> Position property 2 (typically "y")</li>
 						                 <li> Rotational property (typically "rotation")</li=
>
 						                 <li> Number of degrees to add (optional - makes it =
easy to orient your target properly)</li>
 				                </ol>
 				 For maximum flexibility, you can pass in any number of arrays inside =
the container array, one=20
 				 for each rotational property. This can be convenient when working in =
3D because you can rotate
 				 on multiple axis. If you're doing a standard 2D x/y tween on a bezier=
, you can simply pass=20
 				 in a boolean value of true and TweenMax will use a typical setup, <co=
de>[["x", "y", "rotation", 0]]</code>.=20
 				 Hint: Don't forget the container Array (notice the double outer brack=
ets)</li>
 						=09
 	                <li>
                     <b> hexColors </b>:<i> Object</i> -=20
 				 Although hex colors are technically numbers, if you try to tween them=
 conventionally,
 				 you'll notice that they don't tween smoothly. To tween them properly,=
 the red, green, and=20
 				 blue components must be extracted and tweened independently. TweenMax=
 makes it easy. To tween
 				 a property of your object that's a hex color, just pass an Object wit=
h properties named the=20
 				 same as your object's hex color properties that should be tweened. Fo=
r example, if your mc=20
 				 object has a "myHexProp" property that you'd like to tween to red (0x=
FF0000) over the course=20
 				 of 2 seconds, do: <code>TweenMax.to(mc, 2, {hexColors:{myHexProp:0xFF=
0000}});</code>
 				 You can pass in any number of hexColor properties.</li>
 				=20
 	                <li>
                     <b> shortRotation </b>:<i> Object</i> -=20
 				 For rotational tweens, it can be useful to have the engine figure out=
 the shortest direction
 				 to the destination value and go that way. For example, if the target'=
s rotation property is
 				 at 0 and you need to rotate to 270, it would actually be shorter to g=
o from 0 to -90.=20
 				 If <code>rotation</code> is currently 170 degrees and you want to twe=
en it to -170 degrees,=20
 				 a normal rotation tween would travel a total of 340 degrees in the co=
unter-clockwise direction,=20
 				 but if you use shortRotation, it would travel 20 degrees in the clock=
wise direction instead.
 				 In order to accommodate any rotational property (including 3D ones li=
ke rotationX, rotationY,=20
 				 and rotationZ or even a custom one), <code>shortRotation</code> shoul=
d be an object whose properties
 				 correspond to the ones you want tweened. For example, to tween <code>=
mc.rotation</code> to 270 in ths shortest
 				 direction, do: <code>TweenMax.to(mc, 1, {shortRotation:{rotation:270}=
});</code> or to tween
 				 its <code>rotationX</code> to -80 and <code>rotationY</code> to 30 in=
 the shortest direction, do:=20
 				 <code>TweenMax.to(mc, 1, {shortRotation:{rotationX:-80, rotationY:30}=
});</code>
                  </li>
 	  					  =20
 	                <li>
                     <b> roundProps </b>:<i> String</i> -=20
 				 A comma-delimited list of property names whose value should be rounde=
d to the nearest integer
 				 anytime they are updated during the tween. For example, if you're twe=
ening the=20
 				 x, y, and alpha properties of mc and you want to round the x and y va=
lues (not alpha)
 	  			 every time the tween is rendered, do:=20
 				 <code>TweenMax.to(mc, 2, {x:300, y:200, alpha:0.5, roundProps:"x,y"})=
;</code>
                  </li>
 	  					  =20
 	                <li>
                     <b> blurFilter </b>:<i> Object</i> [AS3/AS2 only] -=20
 				 Creates a BlurFilter tween affecting any of the following properties:
 	  			 <code>blurX, blurY, quality, remove, addFilter, index</code>. For e=
xample,=20
 				 to blur the object 20 pixels on each axis, do:
 				 <code>TweenMax.to(mc, 1, {blurFilter:{blurX:20, blurY:20}});</code>
 				 To remove the filter as soon as the tween completes, set <code>remove=
:true</code>
 				 inside the <code>blurFilter</code> object.</li>
 	  					=09
 	                <li>
                     <b> glowFilter </b>:<i> Object</i> [AS3/AS2 only] -=20
 				 Creates a GlowFilter tween affecting any of the following properties:
 	  			 <code>alpha, blurX, blurY, color, strength, quality, inner, knockou=
t, remove, addFilter, index</code>.
 				 For example, to create a 20 pixel red glow with a strength of 1.5 and=
 alpha of 1, do:
 				 <code>TweenMax.to(mc, 1, {glowFilter:{blurX:20, blurY:20, color:0xFF0=
000, strength:1.5, alpha:1}});</code>
 				 To remove the filter as soon as the tween completes, set <code>remove=
:true</code>
 				 inside the <code>glowFilter</code> object.</li>
 	  					=09
 	                <li>
                     <b> colorMatrixFilter </b>:<i> Object</i> [AS3/AS2 onl=
y] -=20
 				 Creates a ColorMatrixFilter tween affecting any of the following prop=
erties:
 				 <code>colorize, amount, contrast, brightness, saturation, hue, thresh=
old, relative, matrix, remove, addFilter, index</code>
 				 For example, to completely desaturate the target, do:
 				 <code>TweenMax.to(mc, 1, {colorMatrixFilter:{saturation:0}});</code>
 				 Or to colorize the object red at 50% strength, do:
 				 <code>TweenMax.to(mc, 1, {colorMatrixFilter:{colorize:0xFF0000, amoun=
t:0.5}});</code>
 				 To remove the filter as soon as the tween completes, set <code>remove=
:true</code>
 				 inside the <code>colorMatrixFilter</code> object.</li>
 								  =20
 	                <li>
                     <b> dropShadowFilter </b>:<i> Object</i> [AS3/AS2 only=
] -=20
 				 Creates a DropShadowFilter tween affecting any of the following prope=
rties:
 				 <code>alpha, angle, blurX, blurY, color, distance, strength, quality,=
 remove, addFilter, index</code>
 				 For example, to create a 10 pixel red drop shadow with an alpha of 0.=
8 and an angle of 45, do:
 				 <code>TweenMax.to(mc, 1, {dropShadowFilter:{blurX:10, blurY:10, color=
:0xFF0000, angle:45, alpha:0.8}});</code>
 				 To remove the filter as soon as the tween completes, set <code>remove=
:true</code>
 				 inside the <code>dropShadowFilter</code> object.</li>
 								 =20
 	                <li>
                     <b> bevelFilter </b>:<i> Object</i> [AS3/AS2 only] -=
=20
 				 Creates a BevelFilter tween affecting any of the following properties=
:
 				 <code>angle, blurX, blurY, distance, highlightAlpha, highlightColor, =
shadowAlpha, shadowColor, strength, quality, remove, addFilter, index</code=
>
 				 For example, to create a 10 pixel bevel with a strength of 1.5 and di=
stance of 10 and shadowAlpha of 0.8, do:
 				 <code>TweenMax.to(mc, 1, {bevelFilter:{blurX:10, blurY:10, strength:1=
.5, distance:10, shadowAlpha:0.8}});</code>
 				 To remove the filter as soon as the tween completes, set <code>remove=
:true</code>
 				 inside the <code>bevelFilter</code> object.</li>
 	             </ul>
 =09
 =09
               <p>
                  <b>EXAMPLES:</b>
               </p>=20
               <p>Please see <a href=3D"http://www.greensock.com/" target=
=3D"">http://www.greensock.com</a> for=20
 examples, tutorials, and interactive demos.</p>
=20
               <b>NOTES / TIPS:</b>
               <ul>
 	                <li> Passing values as Strings and a preceding "+=3D" or =
"-=3D" will make the tween relative to the=20
 		current value. For example, if you do <code>TweenMax.to(mc, 2, {x:"-=3D2=
0"});</code> it'll=20
 		tween <code>mc.x</code> to the left 20 pixels. <code>{x:"+=3D20"}</code>=
 would move it to the right.</li>
 	 =20
 	                <li> You can use <code>addEventListener()</code> to add l=
isteners to the tween instance manually=20
 		instead of using the onCompleteListener, onStartListener, and onUpdateLi=
stener special properties.=20
 	 	Like <code>myTween.addEventListener("complete", myFunction);</code>
                  </li>
 	 =20
 	                <li> You can change the default ease by setting the <code=
>TweenLite.defaultEase</code> static property.=20
 		The default is <code>Power1.easeOut</code>.</li>
 	 =20
 	                <li> You can kill all tweens of a particular object anyti=
me with <code>TweenMax.killTweensOf(myObject); </code>
                  </li>
 	 =20
 	                <li> You can kill all delayedCalls to a particular functi=
on with <code>TweenMax.killDelayedCallsTo(myFunction)</code>
 		 or <code>TweenMax.killTweensOf(myFunction);</code>
                  </li>
 	 =20
 	                <li> Use the <code>TweenMax.from()</code> method to anima=
te things into place. For example,=20
 		if you have things set up on the stage in the spot where they should end=
 up, and you=20
 		just want to animate them into place, you can pass in the beginning x an=
d/or y and/or=20
 		alpha (or whatever properties you want).</li>
 	 =20
 	                <li> If you find this class useful, please consider joini=
ng <a href=3D"http://www.greensock.com/club/" target=3D"">Club GreenSock</a=
>
 		which not only helps to sustain ongoing development, but also gets you b=
onus plugins, classes=20
 		and other benefits that are ONLY available to members. Learn more at=20
 		<a href=3D"http://www.greensock.com/club/" target=3D"">http://www.greens=
ock.com/club/</a>
                  </li>
 	             </ul>
 	 =20
               <p>
                  <b>Copyright 2008-2013, GreenSock. All rights reserved.</=
b> This work is subject to the terms in <a href=3D"http://www.greensock.com=
/terms_of_use.html" target=3D"">http://www.greensock.com/terms_of_use.html<=
/a> or for <a href=3D"http://www.greensock.com/club/" target=3D"">Club Gree=
nSock</a> members, the software agreement that was issued with the membersh=
ip.</p>
=20
            <p></p><br><hr></div><a name=3D"propertySummary"></a><div class=
=3D"summarySection"><div class=3D"summaryTableTitle">Public Properties</div=
><div class=3D"showHideLinks"><div id=3D"hideInheritedProperty" class=3D"hi=
deInheritedProperty"><a class=3D"showHideLink" href=3D"https://greensock.co=
m/asdocs/com/greensock/TweenMax.html#propertySummary"><img class=3D"showHid=
eLinkImage" src=3D"https://greensock.com/asdocs/images/expanded.gif"> Hide =
Inherited Public Properties</a></div><div id=3D"showInheritedProperty" clas=
s=3D"showInheritedProperty"><a class=3D"showHideLink" href=3D"https://green=
sock.com/asdocs/com/greensock/TweenMax.html#propertySummary"><img class=3D"=
showHideLinkImage" src=3D"https://greensock.com/asdocs/images/collapsed.gif=
"> Show Inherited Public Properties</a></div></div><table cellspacing=3D"0"=
 cellpadding=3D"3" class=3D"summaryTable " id=3D"summaryTableProperty"><tbo=
dy><tr><th>&nbsp;</th><th colspan=3D"2">Property</th><th class=3D"summaryTa=
bleOwnerCol">Defined By</th></tr><tr class=3D"hideInheritedProperty" bgcolo=
r=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"=
summaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images=
/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inher=
itedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/core/Animation.html#data" class=3D=
"signatureLink">data</a> : *<div class=3D"summaryTableDescription"> A place=
 to store any data you want (initially populated with vars.data if it exist=
s).</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greenso=
ck.com/asdocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr=
 class=3D"hideInheritedProperty" bgcolor=3D"#F2F2F2"><td class=3D"summaryTa=
blePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=
=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inheri=
ted" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"=
summaryTableSignatureCol"><a href=3D"https://greensock.com/asdocs/com/green=
sock/TweenLite.html#defaultEase" class=3D"signatureLink">defaultEase</a> : =
<a href=3D"https://greensock.com/asdocs/com/greensock/easing/Ease.html">Eas=
e</a><div class=3D"summaryTableDescription">[static]  Provides An easy way =
to change the default easing equation.</div></td><td class=3D"summaryTableO=
wnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenLite.ht=
ml">TweenLite</a></td></tr><tr class=3D"hideInheritedProperty" bgcolor=3D"#=
FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summar=
yTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inher=
itedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSu=
mmaryImage"></td><td class=3D"summaryTableSignatureCol"><a href=3D"https://=
greensock.com/asdocs/com/greensock/TweenLite.html#defaultOverwrite" class=
=3D"signatureLink">defaultOverwrite</a> : String =3D auto<div class=3D"summ=
aryTableDescription">[static]  Provides An easy way to change the default o=
verwrite mode.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"http=
s://greensock.com/asdocs/com/greensock/TweenLite.html">TweenLite</a></td></=
tr><tr class=3D"hideInheritedProperty" bgcolor=3D"#F2F2F2"><td class=3D"sum=
maryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><i=
mg src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"=
Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td cla=
ss=3D"summaryTableSignatureCol"><a href=3D"https://greensock.com/asdocs/com=
/greensock/TweenLite.html#target" class=3D"signatureLink">target</a> : Obje=
ct<div class=3D"summaryTableDescription"> [READ-ONLY] Target object (or arr=
ay of objects) whose properties the tween affects.</div></td><td class=3D"s=
ummaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenLite.html">TweenLite</a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><=
td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInh=
eritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><a href=3D"h=
ttps://greensock.com/asdocs/com/greensock/TweenMax.html#ticker" class=3D"si=
gnatureLink">ticker</a> : Shape<div class=3D"summaryTableDescription">[stat=
ic]=20
		 The object that dispatches a "tick" event each time the engine updates, =
making it easy for=20
		 you to add your own listener(s) to run custom logic after each update (g=
reat for game developers).</div></td><td class=3D"summaryTableOwnerCol">Twe=
enMax</td></tr><tr class=3D"hideInheritedProperty" bgcolor=3D"#F2F2F2"><td =
class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheri=
tanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.=
gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage">=
</td><td class=3D"summaryTableSignatureCol"><a href=3D"https://greensock.co=
m/asdocs/com/greensock/core/Animation.html#timeline" class=3D"signatureLink=
">timeline</a> : <a href=3D"https://greensock.com/asdocs/com/greensock/core=
/SimpleTimeline.html">SimpleTimeline</a><div class=3D"summaryTableDescripti=
on"> [Read-only] Parent timeline.</div></td><td class=3D"summaryTableOwnerC=
ol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.ht=
ml">Animation</a></td></tr><tr class=3D"hideInheritedProperty" bgcolor=3D"#=
FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summar=
yTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inher=
itedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSu=
mmaryImage"></td><td class=3D"summaryTableSignatureCol"><a href=3D"https://=
greensock.com/asdocs/com/greensock/core/Animation.html#vars" class=3D"signa=
tureLink">vars</a> : Object<div class=3D"summaryTableDescription"> The vars=
 object passed into the constructor which stores configuration variables li=
ke onComplete, onUpdate, etc.</div></td><td class=3D"summaryTableOwnerCol">=
<a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">=
Animation</a></td></tr></tbody></table></div><a name=3D"methodSummary"></a>=
<div class=3D"summarySection"><div class=3D"summaryTableTitle">Public Metho=
ds </div><div class=3D"showHideLinks"><div id=3D"hideInheritedMethod" class=
=3D"hideInheritedMethod"><a class=3D"showHideLink" href=3D"https://greensoc=
k.com/asdocs/com/greensock/TweenMax.html#methodSummary"><img class=3D"showH=
ideLinkImage" src=3D"https://greensock.com/asdocs/images/expanded.gif"> Hid=
e Inherited Public Methods</a></div><div id=3D"showInheritedMethod" class=
=3D"showInheritedMethod"><a class=3D"showHideLink" href=3D"https://greensoc=
k.com/asdocs/com/greensock/TweenMax.html#methodSummary"><img class=3D"showH=
ideLinkImage" src=3D"https://greensock.com/asdocs/images/collapsed.gif"> Sh=
ow Inherited Public Methods</a></div></div><table cellspacing=3D"0" cellpad=
ding=3D"3" class=3D"summaryTable " id=3D"summaryTableMethod"><tbody><tr><th=
>&nbsp;</th><th colspan=3D"2">Method</th><th class=3D"summaryTableOwnerCol"=
>Defined By</th></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summar=
yTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp=
;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature=
"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#Tween=
Max()" class=3D"signatureLink">TweenMax</a>(target:Object, duration:Number,=
 vars:Object)</div><div class=3D"summaryTableDescription">
		 Constructor
		 =20
		 </div></td><td class=3D"summaryTableOwnerCol">TweenMax</td></tr><tr clas=
s=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td>=
<td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTab=
leSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TweenMax.html#addEventListener()" class=3D"signa=
tureLink">addEventListener</a>(type:String, listener:Function, useCapture:B=
oolean =3D false, priority:int =3D 0, useWeakReference:Boolean =3D false):v=
oid</div><div class=3D"summaryTableDescription">
		 [AS3 only]
		 Registers a function that should be called each time a particular type o=
f event occurs, like=20
		 "complete" or "update".</div></td><td class=3D"summaryTableOwnerCol">Twe=
enMax</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td cl=
ass=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInherita=
nceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gi=
f" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></=
td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><=
a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#de=
lay()" class=3D"signatureLink">delay</a>(value:Number):*</div><div class=3D=
"summaryTableDescription">=20
		 Gets or sets the animation's initial delay which is the length of time i=
n seconds=20
		 (or frames for frames-based tweens) before the animation should begin.</=
div></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.co=
m/asdocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr clas=
s=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td>=
<td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTab=
leSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TweenMax.html#delayedCall()" class=3D"signatureL=
ink">delayedCall</a>(delay:Number, callback:Function, params:Array =3D null=
, useFrames:Boolean =3D false):<a href=3D"https://greensock.com/asdocs/com/=
greensock/TweenMax.html">TweenMax</a></div><div class=3D"summaryTableDescri=
ption">[static]=20
		 Provides a simple way to call a function after a set amount of time (or =
frames).</div></td><td class=3D"summaryTableOwnerCol">TweenMax</td></tr><tr=
 class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;=
</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summa=
ryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://gre=
ensock.com/asdocs/com/greensock/TweenMax.html#duration()" class=3D"signatur=
eLink">duration</a>(value:Number):*</div><div class=3D"summaryTableDescript=
ion">[override] =20
		 Gets or sets the animation's duration, not including any repeats or repe=
atDelays=20
		 (which are only available in TweenMax and TimelineMax).</div></td><td cl=
ass=3D"summaryTableOwnerCol">TweenMax</td></tr><tr class=3D"hideInheritedMe=
thod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><=
td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.com/a=
sdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" cl=
ass=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><=
div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/=
greensock/core/Animation.html#eventCallback()" class=3D"signatureLink">even=
tCallback</a>(type:String, callback:Function =3D null, params:Array =3D nul=
l):*</div><div class=3D"summaryTableDescription">
		 Gets or sets an event callback like "onComplete", "onUpdate", "onStart",=
 "onReverseComplete"
		 or "onRepeat" (onRepeat only applies to TweenMax or TimelineMax instance=
s)
		 along with any parameters that should be passed to that callback.</div><=
/td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asd=
ocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr class=3D"=
" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td c=
lass=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSig=
natureCol"><div class=3D"summarySignature"><a href=3D"https://greensock.com=
/asdocs/com/greensock/TweenMax.html#from()" class=3D"signatureLink">from</a=
>(target:Object, duration:Number, vars:Object):<a href=3D"https://greensock=
.com/asdocs/com/greensock/TweenMax.html">TweenMax</a></div><div class=3D"su=
mmaryTableDescription">[static]=20
		 Static method for creating a TweenMax instance that tweens backwards -=
=20
		 you define the BEGINNING values and the current values are used
		 as the destination values which is great for doing things like animating=
 objects
		 onto the screen because you can set them up initially the way you want t=
hem to look=20
		 at the end of the tween and then animate in from elsewhere.</div></td><t=
d class=3D"summaryTableOwnerCol">TweenMax</td></tr><tr class=3D"" bgcolor=
=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol=
"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/c=
om/greensock/TweenMax.html#fromTo()" class=3D"signatureLink">fromTo</a>(tar=
get:Object, duration:Number, fromVars:Object, toVars:Object):<a href=3D"htt=
ps://greensock.com/asdocs/com/greensock/TweenMax.html">TweenMax</a></div><d=
iv class=3D"summaryTableDescription">[static]=20
		 Static method for creating a TweenMax instance that allows you to define=
 both the starting
		 and ending values (as opposed to to() and from() tweens which are=20
		 based on the target's current values at one end or the other).</div></td=
><td class=3D"summaryTableOwnerCol">TweenMax</td></tr><tr class=3D"" bgcolo=
r=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"=
summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCo=
l"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/=
com/greensock/TweenMax.html#getAllTweens()" class=3D"signatureLink">getAllT=
weens</a>(includeTimelines:Boolean =3D false):Array</div><div class=3D"summ=
aryTableDescription">[static]=20
		 Returns an array containing all tweens (and optionally timelines too, ex=
cluding the root timelines).</div></td><td class=3D"summaryTableOwnerCol">T=
weenMax</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTab=
lePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</t=
d><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a=
 href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#getTweens=
Of()" class=3D"signatureLink">getTweensOf</a>(target:*, onlyActive:Boolean =
=3D false):Array</div><div class=3D"summaryTableDescription">[static]=20
		 Returns an array containing all the tweens of a particular target (or gr=
oup of targets) that have not
		 been released for garbage collection yet which typically happens within =
a few seconds after the tween completes.</div></td><td class=3D"summaryTabl=
eOwnerCol">TweenMax</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summar=
ySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.=
html#invalidate()" class=3D"signatureLink">invalidate</a>():*</div><div cla=
ss=3D"summaryTableDescription">[override]   =20
		 Clears any initialization data (like starting/ending values in tweens) w=
hich can be useful if, for example,=20
		 you want to restart a tween without reverting to any previously recorded=
 starting values.</div></td><td class=3D"summaryTableOwnerCol">TweenMax</td=
></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"su=
mmaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><=
img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D=
"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td cl=
ass=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D=
"https://greensock.com/asdocs/com/greensock/core/Animation.html#isActive()"=
 class=3D"signatureLink">isActive</a>():Boolean</div><div class=3D"summaryT=
ableDescription">=20
		 Indicates whether or not the animation is currently active (meaning the =
virtual playhead is actively moving across=20
		 this instance's time span and it is not paused, nor are any of its ances=
tor timelines).</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"htt=
ps://greensock.com/asdocs/com/greensock/core/Animation.html">Animation</a><=
/td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddin=
gCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td cl=
ass=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D=
"https://greensock.com/asdocs/com/greensock/TweenMax.html#isTweening()" cla=
ss=3D"signatureLink">isTweening</a>(target:Object):Boolean</div><div class=
=3D"summaryTableDescription">[static]=20
		 Reports whether or not a particular object is actively tweening.</div></=
td><td class=3D"summaryTableOwnerCol">TweenMax</td></tr><tr class=3D"hideIn=
heritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nb=
sp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greens=
ock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inhe=
rited" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignat=
ureCol"><div class=3D"summarySignature"><a href=3D"https://greensock.com/as=
docs/com/greensock/core/Animation.html#kill()" class=3D"signatureLink">kill=
</a>(vars:Object =3D null, target:Object =3D null):*</div><div class=3D"sum=
maryTableDescription">
		 Kills the animation entirely or in part depending on the parameters.</di=
v></td><td class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/=
asdocs/com/greensock/core/Animation.html">Animation</a></td></tr><tr class=
=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><=
td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTabl=
eSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greensock=
.com/asdocs/com/greensock/TweenMax.html#killAll()" class=3D"signatureLink">=
killAll</a>(complete:Boolean =3D false, tweens:Boolean =3D true, delayedCal=
ls:Boolean =3D true, timelines:Boolean =3D true):void</div><div class=3D"su=
mmaryTableDescription">[static]=20
		 Kills all tweens and/or delayedCalls/callbacks, and/or timelines, option=
ally forcing them to=20
		 completion first.</div></td><td class=3D"summaryTableOwnerCol">TweenMax<=
/td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddin=
gCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td cl=
ass=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D=
"https://greensock.com/asdocs/com/greensock/TweenMax.html#killChildTweensOf=
()" class=3D"signatureLink">killChildTweensOf</a>(parent:DisplayObjectConta=
iner, complete:Boolean =3D false):void</div><div class=3D"summaryTableDescr=
iption">[static]=20
		 [AS3/AS2 only]
		 Kills all tweens of the children of a particular MovieClip/DisplayObject=
Container, optionally forcing them to completion first.</div></td><td class=
=3D"summaryTableOwnerCol">TweenMax</td></tr><tr class=3D"" bgcolor=3D"#FFFF=
FF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTab=
leInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div cl=
ass=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greens=
ock/TweenMax.html#killDelayedCallsTo()" class=3D"signatureLink">killDelayed=
CallsTo</a>(func:Function):void</div><div class=3D"summaryTableDescription"=
>[static]=20
		 Immediately kills all of the delayedCalls to a particular function.</div=
></td><td class=3D"summaryTableOwnerCol">TweenMax</td></tr><tr class=3D"" b=
gcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td clas=
s=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignat=
ureCol"><div class=3D"summarySignature"><a href=3D"https://greensock.com/as=
docs/com/greensock/TweenMax.html#killTweensOf()" class=3D"signatureLink">ki=
llTweensOf</a>(target:*, onlyActive:* =3D false, vars:Object =3D null):void=
</div><div class=3D"summaryTableDescription">[static]=20
		 Kills all the tweens (or specific tweening properties) of a particular o=
bject or=20
		 the delayedCalls to a particular function.</div></td><td class=3D"summar=
yTableOwnerCol">TweenMax</td></tr><tr class=3D"hideInheritedMethod" bgcolor=
=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"s=
ummaryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/=
inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheri=
tedSummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"=
summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html#pause()" class=3D"signatureLink">pause</a>(atTime:* =3D nu=
ll, suppressEvents:Boolean =3D true):*</div><div class=3D"summaryTableDescr=
iption">
		 Pauses the instance, optionally jumping to a specific time.</div></td><t=
d class=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/co=
m/greensock/core/Animation.html">Animation</a></td></tr><tr class=3D"" bgco=
lor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=
=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatu=
reCol"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asd=
ocs/com/greensock/TweenMax.html#pauseAll()" class=3D"signatureLink">pauseAl=
l</a>(tweens:Boolean =3D true, delayedCalls:Boolean =3D true, timelines:Boo=
lean =3D true):void</div><div class=3D"summaryTableDescription">[static]=20
		 [deprecated] Pauses all tweens and/or delayedCalls/callbacks and/or time=
lines.</div></td><td class=3D"summaryTableOwnerCol">TweenMax</td></tr><tr c=
lass=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=3D"summaryTableP=
addingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img src=3D"=
https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited"=
 title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=3D"summ=
aryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"https://gr=
eensock.com/asdocs/com/greensock/core/Animation.html#paused()" class=3D"sig=
natureLink">paused</a>(value:Boolean =3D false):*</div><div class=3D"summar=
yTableDescription">=20
		 Gets or sets the animation's paused state which indicates whether or not=
 the animation=20
		 is currently paused.</div></td><td class=3D"summaryTableOwnerCol"><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Animat=
ion</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td =
class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheri=
tanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.=
gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage">=
</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"=
><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#=
play()" class=3D"signatureLink">play</a>(from:* =3D null, suppressEvents:Bo=
olean =3D true):*</div><div class=3D"summaryTableDescription">
		 Begins playing forward, optionally from a specific time (by default play=
back begins from
		 wherever the playhead currently is).</div></td><td class=3D"summaryTable=
OwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animat=
ion.html">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td cla=
ss=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritan=
ceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summ=
arySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMa=
x.html#progress()" class=3D"signatureLink">progress</a>(value:Number, suppr=
essEvents:Boolean =3D false):*</div><div class=3D"summaryTableDescription">=
[override] =20
		 Gets or sets the tween's progress which is a value between 0 and 1 indic=
ating the position=20
		 of the virtual playhead (excluding repeats) where 0 is at the beginning,=
 0.5 is halfway complete,=20
		 and 1 is complete.</div></td><td class=3D"summaryTableOwnerCol">TweenMax=
</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddi=
ngCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td c=
lass=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=
=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#removeEventLis=
tener()" class=3D"signatureLink">removeEventListener</a>(type:String, liste=
ner:Function, useCapture:Boolean =3D false):void</div><div class=3D"summary=
TableDescription">=20
		 [AS3 only]
		 Removes a listener from the EventDispatcher object.</div></td><td class=
=3D"summaryTableOwnerCol">TweenMax</td></tr><tr class=3D"" bgcolor=3D"#F2F2=
F2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTab=
leInheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div cl=
ass=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greens=
ock/TweenMax.html#repeat()" class=3D"signatureLink">repeat</a>(value:int =
=3D 0):*</div><div class=3D"summaryTableDescription">=20
		 Gets or sets the number of times that the tween should repeat after its =
first iteration.</div></td><td class=3D"summaryTableOwnerCol">TweenMax</td>=
</tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol=
">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=
=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TweenMax.html#repeatDelay()" class=
=3D"signatureLink">repeatDelay</a>(value:Number):*</div><div class=3D"summa=
ryTableDescription">
		 Gets or sets the amount of time in seconds (or frames for frames-based t=
weens) between repeats.</div></td><td class=3D"summaryTableOwnerCol">TweenM=
ax</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#resta=
rt()" class=3D"signatureLink">restart</a>(includeDelay:Boolean =3D false, s=
uppressEvents:Boolean =3D true):*</div><div class=3D"summaryTableDescriptio=
n">
		 Restarts and begins playing forward from the beginning.</div></td><td cl=
ass=3D"summaryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/gr=
eensock/core/Animation.html">Animation</a></td></tr><tr class=3D"hideInheri=
tedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingCol">&nbsp;<=
/td><td class=3D"summaryTableInheritanceCol"><img src=3D"https://greensock.=
com/asdocs/images/inheritedSummary.gif" alt=3D"Inherited" title=3D"Inherite=
d" class=3D"inheritedSummaryImage"></td><td class=3D"summaryTableSignatureC=
ol"><div class=3D"summarySignature"><a href=3D"https://greensock.com/asdocs=
/com/greensock/core/Animation.html#resume()" class=3D"signatureLink">resume=
</a>(from:* =3D null, suppressEvents:Boolean =3D true):*</div><div class=3D=
"summaryTableDescription">
		 Resumes playing without altering direction (forward or reversed), option=
ally jumping to a specific time first.</div></td><td class=3D"summaryTableO=
wnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animati=
on.html">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td clas=
s=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanc=
eCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summa=
rySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax=
.html#resumeAll()" class=3D"signatureLink">resumeAll</a>(tweens:Boolean =3D=
 true, delayedCalls:Boolean =3D true, timelines:Boolean =3D true):void</div=
><div class=3D"summaryTableDescription">[static]=20
		 [deprecated] Resumes all paused tweens and/or delayedCalls/callbacks and=
/or timelines.</div></td><td class=3D"summaryTableOwnerCol">TweenMax</td></=
tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F2"><td class=3D"summa=
ryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol"><img=
 src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" alt=3D"In=
herited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td><td class=
=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/core/Animation.html#reverse()" cla=
ss=3D"signatureLink">reverse</a>(from:* =3D null, suppressEvents:Boolean =
=3D true):*</div><div class=3D"summaryTableDescription">
		 Reverses playback so that all aspects of the animation are oriented back=
wards including, for example,
		 a tween's ease.</div></td><td class=3D"summaryTableOwnerCol"><a href=3D"=
https://greensock.com/asdocs/com/greensock/core/Animation.html">Animation</=
a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#rever=
sed()" class=3D"signatureLink">reversed</a>(value:Boolean =3D false):*</div=
><div class=3D"summaryTableDescription">=20
		 Gets or sets the animation's reversed state which indicates whether or n=
ot the animation=20
		 should be played backwards.</div></td><td class=3D"summaryTableOwnerCol"=
><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html"=
>Animation</a></td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#F2F2F=
2"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTabl=
eInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inheritedS=
ummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummary=
Image"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySig=
nature"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animatio=
n.html#seek()" class=3D"signatureLink">seek</a>(time:*, suppressEvents:Bool=
ean =3D true):*</div><div class=3D"summaryTableDescription">
		 Jumps to a specific time without affecting whether or not the instance i=
s paused or reversed.</div></td><td class=3D"summaryTableOwnerCol"><a href=
=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Animati=
on</a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTabl=
ePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td=
><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a =
href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#set()" cla=
ss=3D"signatureLink">set</a>(target:Object, vars:Object):<a href=3D"https:/=
/greensock.com/asdocs/com/greensock/TweenMax.html">TweenMax</a></div><div c=
lass=3D"summaryTableDescription">[static]=20
		 Immediately sets properties of the target accordingly - essentially a ze=
ro-duration to() tween with a more=20
		 intuitive name.</div></td><td class=3D"summaryTableOwnerCol">TweenMax</t=
d></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTablePaddingC=
ol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td clas=
s=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a href=3D"h=
ttps://greensock.com/asdocs/com/greensock/TweenMax.html#staggerFrom()" clas=
s=3D"signatureLink">staggerFrom</a>(targets:Array, duration:Number, vars:Ob=
ject, stagger:Number =3D 0, onCompleteAll:Function =3D null, onCompleteAllP=
arams:Array =3D null):Array</div><div class=3D"summaryTableDescription">[st=
atic]=20
		 Tweens an array of targets from a common set of destination values (usin=
g the current
		 values as the destination), but staggers their start times by a specifie=
d amount of time,=20
		 creating an evenly-spaced sequence with a surprisingly small amount of c=
ode.</div></td><td class=3D"summaryTableOwnerCol">TweenMax</td></tr><tr cla=
ss=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td=
><td class=3D"summaryTableInheritanceCol">&nbsp;</td><td class=3D"summaryTa=
bleSignatureCol"><div class=3D"summarySignature"><a href=3D"https://greenso=
ck.com/asdocs/com/greensock/TweenMax.html#staggerFromTo()" class=3D"signatu=
reLink">staggerFromTo</a>(targets:Array, duration:Number, fromVars:Object, =
toVars:Object, stagger:Number =3D 0, onCompleteAll:Function =3D null, onCom=
pleteAllParams:Array =3D null):Array</div><div class=3D"summaryTableDescrip=
tion">[static]=20
		 Tweens an array of targets from and to a common set of values, but stagg=
ers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code.</div></td><td class=3D"summaryTableOw=
nerCol">TweenMax</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"s=
ummaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">=
&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySign=
ature"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#=
staggerTo()" class=3D"signatureLink">staggerTo</a>(targets:Array, duration:=
Number, vars:Object, stagger:Number =3D 0, onCompleteAll:Function =3D null,=
 onCompleteAllParams:Array =3D null):Array</div><div class=3D"summaryTableD=
escription">[static]=20
		 Tweens an array of targets to a common set of destination values, but st=
aggers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code.</div></td><td class=3D"summaryTableOw=
nerCol">TweenMax</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFF=
FFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTa=
bleInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inherite=
dSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSumma=
ryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summaryS=
ignature"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animat=
ion.html#startTime()" class=3D"signatureLink">startTime</a>(value:Number):*=
</div><div class=3D"summaryTableDescription">=20
		 Gets or sets the time at which the animation begins on its parent timeli=
ne (after any delay
		 that was defined).</div></td><td class=3D"summaryTableOwnerCol"><a href=
=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html">Animati=
on</a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTabl=
ePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</td=
><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a =
href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#time()" cl=
ass=3D"signatureLink">time</a>(value:Number, suppressEvents:Boolean =3D fal=
se):*</div><div class=3D"summaryTableDescription">[override]=20
		 Gets or sets the local position of the playhead (essentially the current=
 time), not=20
		 including any repeats or repeatDelays.</div></td><td class=3D"summaryTab=
leOwnerCol">TweenMax</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"=
#FFFFFF"><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summa=
ryTableInheritanceCol"><img src=3D"https://greensock.com/asdocs/images/inhe=
ritedSummary.gif" alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedS=
ummaryImage"></td><td class=3D"summaryTableSignatureCol"><div class=3D"summ=
arySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/core/An=
imation.html#timeScale()" class=3D"signatureLink">timeScale</a>(value:Numbe=
r):*</div><div class=3D"summaryTableDescription">=20
		 Factor that's used to scale time in the animation where 1 =3D normal spe=
ed (the default),
		 0.5 =3D half speed, 2 =3D double speed, etc.</div></td><td class=3D"summ=
aryTableOwnerCol"><a href=3D"https://greensock.com/asdocs/com/greensock/cor=
e/Animation.html">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"=
><td class=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableI=
nheritanceCol">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=
=3D"summarySignature"><a href=3D"https://greensock.com/asdocs/com/greensock=
/TweenMax.html#to()" class=3D"signatureLink">to</a>(target:Object, duration=
:Number, vars:Object):<a href=3D"https://greensock.com/asdocs/com/greensock=
/TweenMax.html">TweenMax</a></div><div class=3D"summaryTableDescription">[s=
tatic]=20
		 Static method for creating a TweenMax instance that animates to the spec=
ified destination values
		 (from the current values).</div></td><td class=3D"summaryTableOwnerCol">=
TweenMax</td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"summaryTa=
blePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</=
td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><=
a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#totalDur=
ation()" class=3D"signatureLink">totalDuration</a>(value:Number):*</div><di=
v class=3D"summaryTableDescription">[override]=20
		 Gets or sets the total duration of the tween in seconds (or frames for f=
rames-based tweens)=20
		 including any repeats or repeatDelays.</div></td><td class=3D"summaryTab=
leOwnerCol">TweenMax</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col">&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summar=
ySignature"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.=
html#totalProgress()" class=3D"signatureLink">totalProgress</a>(value:Numbe=
r, suppressEvents:Boolean =3D false):*</div><div class=3D"summaryTableDescr=
iption">[override] =20
		 Gets or sets the tween's totalProgress which is a value between 0 and 1 =
indicating the position=20
		 of the virtual playhead (including repeats) where 0 is at the beginning,=
 0.5 is halfway complete,=20
		 and 1 is complete.</div></td><td class=3D"summaryTableOwnerCol">TweenMax=
</td></tr><tr class=3D"hideInheritedMethod" bgcolor=3D"#FFFFFF"><td class=
=3D"summaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritance=
Col"><img src=3D"https://greensock.com/asdocs/images/inheritedSummary.gif" =
alt=3D"Inherited" title=3D"Inherited" class=3D"inheritedSummaryImage"></td>=
<td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/core/Animation.html#total=
Time()" class=3D"signatureLink">totalTime</a>(time:Number, suppressEvents:B=
oolean =3D false, uncapped:Boolean =3D false):*</div><div class=3D"summaryT=
ableDescription">
		 Gets or sets the position of the playhead according to the totalDuration
		 which includes any repeats and repeatDelays (only available=20
		 in TweenMax and TimelineMax).</div></td><td class=3D"summaryTableOwnerCo=
l"><a href=3D"https://greensock.com/asdocs/com/greensock/core/Animation.htm=
l">Animation</a></td></tr><tr class=3D"" bgcolor=3D"#FFFFFF"><td class=3D"s=
ummaryTablePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">=
&nbsp;</td><td class=3D"summaryTableSignatureCol"><div class=3D"summarySign=
ature"><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#=
updateTo()" class=3D"signatureLink">updateTo</a>(vars:Object, resetDuration=
:Boolean =3D false):*</div><div class=3D"summaryTableDescription">
		 Updates tweening values on the fly so that they appear to seamlessly cha=
nge course even if=20
		 the tween is in-progress.</div></td><td class=3D"summaryTableOwnerCol">T=
weenMax</td></tr><tr class=3D"" bgcolor=3D"#F2F2F2"><td class=3D"summaryTab=
lePaddingCol">&nbsp;</td><td class=3D"summaryTableInheritanceCol">&nbsp;</t=
d><td class=3D"summaryTableSignatureCol"><div class=3D"summarySignature"><a=
 href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#yoyo()" c=
lass=3D"signatureLink">yoyo</a>(value:Boolean =3D false):*</div><div class=
=3D"summaryTableDescription">
		 Gets or sets the tween's yoyo state, where true causes
		 the tween to go back and forth, alternating backward and forward on each=
=20
		 repeat.</div></td><td class=3D"summaryTableOwnerCol">TweenMax</td></tr><=
/tbody></table></div><div class=3D"MainContent"><div class=3D"detailSection=
Header">Property Detail</div><a name=3D"propertyDetail"></a><a name=3D"tick=
er"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"detailHeaderName">ticker</td><td class=3D"detailHead=
erType">property</td></tr></tbody></table><div class=3D"detailBody"><code>p=
ublic static var ticker:Shape</code><p></p><p></p><p>
		 The object that dispatches a <code>"tick"</code> event each time the eng=
ine updates, making it easy for=20
		 you to add your own listener(s) to run custom logic after each update (g=
reat for game developers).
		 Add as many listeners as you want. The basic syntax is the same for all =
versions (AS2, AS3, and JavaScript):
		=20
		 </p><p><b>Basic example (AS2, AS3, and JavaScript):</b></p><div class=3D=
"listing" version=3D"3.0"><pre> //add listener
 TweenMax.ticker.addEventListener("tick", myFunction);
=20
 function myFunction(event) {
     //executes on every tick after the core engine updates
 }
        =20
 //to remove the listener later...
 TweenMax.ticker.removeEventListener("tick", myFunction);
         </pre></div>
		=20
		 <p>Due to differences in the core languages (and to maximize efficiency)=
, the advanced syntax is slightly different
		 for the AS3 version compared to AS2 and JavaScript. The parameters beyon=
d the first 2 in the addEventListener()=20
		 method are outlined below:</p>
		=20
		 <p><b>JavaScript and AS2</b></p>
		 <p><code>addEventListener(type, callback, scope, useParam, priority)</co=
de></p>
		 <p>Parameters:
		 </p><ol>
		 		<li><b>type</b> <i>: String</i> - type of listener, should always be <=
code>"tick"</code></li>
		 		<li><b>callback</b> <i>: Function</i> - the function to call when the =
event occurs</li>
		 		<li><b>scope</b> <i>: Object</i> - binds the scope to a particular obj=
ect (scope is basically what "<code>this</code>" refers to in your function=
). This can be very useful in JavaScript and AS2 because scope isn't genera=
lly maintained. </li>
		 		<li><b>useParam</b> <i>: Boolean</i> - if <code>true</code>, an event =
object will be generated and fed to the callback each time the event occurs=
. The event is a generic object and has two properties: <code>type</code> (=
always <code>"tick"</code>) and <code>target</code> which refers to the tic=
ker instance. The default for <code>useParam</code> is <code>false</code> b=
ecause it improves performance.</li>
		 		<li><b>priority</b> <i>: Integer</i> - influences the order in which t=
he listeners are called. Listeners with lower priorities are called after o=
nes with higher priorities.</li>
		 </ol>
		 <p></p>
		=20
		 <p><b>Advanced example (JavaScript and AS2):</b></p><div class=3D"listin=
g" version=3D"3.0"><pre> //add listener that requests an event object param=
eter, binds scope to the current scope (this), and sets priority to 1 so th=
at it is called before any other listeners that had a priority lower than 1=
...
 TweenMax.ticker.addEventListener("tick", myFunction, this, true, 1);
=20
 function myFunction(event) {
     //executes on every tick after the core engine updates
 }
=20
 //to remove the listener later...
 TweenMax.ticker.removeEventListener("tick", myFunction);
         </pre></div>
		=20
		 <p><b>AS3</b></p>
		 <p>The AS3 version uses the standard <code>EventDispatcher.addEventListe=
ner()</code> syntax which=20
		 basically allows you to define a priority and whether or not to use weak=
 references (see Adobe's=20
		 docs for details).</p>
		=20
		 <p><b>Advanced example [AS3 only]:</b></p><div class=3D"listing" version=
=3D"3.0"><pre> import flash.events.Event;
=20
 //add listener with weak reference (standard syntax - notice the 5th param=
eter is true)
 TweenMax.ticker.addEventListener("tick", myFunction, false, 0, true);
=20
 function myFunction(event:Event):void {
     //executes on every tick after the core engine updates
 }
=20
 //to remove the listener later...
 TweenMax.ticker.removeEventListener("tick", myFunction);
         </pre></div>
		 <p></p></div><a name=3D"constructorDetail"></a><div class=3D"detailSecti=
onHeader">Constructor Detail</div><a name=3D"TweenMax()"></a><a name=3D"Twe=
enMax(Object,Number,Object)"></a><table class=3D"detailHeader" cellpadding=
=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">TweenMax=
</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType"=
>Constructor</td></tr></tbody></table><div class=3D"detailBody"><code>publi=
c function TweenMax(target:Object, duration:Number, vars:Object)</code><p><=
/p><p>
		 Constructor
		 =20
		 </p><span class=3D"label"> Parameters </span><table cellpadding=3D"0" ce=
llspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><td><code><=
span class=3D"label">target</span>:Object</code> =E2=80=94 Target object (o=
r array of objects) whose properties this tween affects=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if <code>useFrames:true</code> is =
set in the <code>vars</code> parameter)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>onComplete</code>, <code=
>ease</code>, etc. For example, to tween <code>mc.x</code> to 100 and <code=
>mc.y</code> to 200 and then call <code>myFunction</code>, do this: <code>n=
ew TweenMax(mc, 1, {x:100, y:200, onComplete:myFunction})</code>.
		 </td></tr></tbody></table></div><a name=3D"methodDetail"></a><div class=
=3D"detailSectionHeader">Method Detail</div><a name=3D"addEventListener()">=
</a><a name=3D"addEventListener(String,Function,Boolean,int,Boolean)"></a><=
table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr=
><td class=3D"detailHeaderName">addEventListener</td><td class=3D"detailHea=
derParens">()</td><td class=3D"detailHeaderType">method</td></tr></tbody></=
table><div class=3D"detailBody"><code> public function addEventListener(typ=
e:String, listener:Function, useCapture:Boolean =3D false, priority:int =3D=
 0, useWeakReference:Boolean =3D false):void</code><p></p><p></p><p>
		 [AS3 only]
		 Registers a function that should be called each time a particular type o=
f event occurs, like=20
		 <code>"complete"</code> or <code>"update"</code>. The function will be p=
assed a single "event"=20
		 parameter whose "<code>target</code>" property refers to the tween. Typi=
cally it is more efficient
		 to use callbacks like <code>onComplete, onUpdate, onStart, onReverseComp=
lete,</code> and <code>onRepeat</code>
		 unless you need the event parameter or if you need to register more than=
 one listener for the same=20
		 type of event.=20
		=20
		 </p><p>If you no longer need an event listener, remove it by calling <co=
de>removeEventListener()</code>, or memory=20
		 problems could result. Event listeners are not automatically removed fro=
m memory because the garbage=20
		 collector does not remove the listener as long as the dispatching object=
 exists (unless the=20
		 useWeakReference parameter is set to <code>true</code>).</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">type</span>:String</code> =E2=80=94 The type=
 of event
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">listener</span>:Function</code>=
 =E2=80=94 The listener function that processes the event. This function mu=
st accept an Event object as its only parameter
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">useCapture</span>:Boolean</code=
> (default =3D <code>false</code>)<code></code> =E2=80=94 (not typically us=
ed) Determines whether the listener works in the capture phase or the targe=
t and bubbling phases. If useCapture is set to true, the listener processes=
 the event only during the capture phase and not in the target or bubbling =
phase. If useCapture is false, the listener processes the event only during=
 the target or bubbling phase. To listen for the event in all three phases,=
 call addEventListener twice, once with useCapture set to true, then again =
with useCapture set to false.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">priority</span>:int</code> (def=
ault =3D <code>0</code>)<code></code> =E2=80=94 The priority level of the e=
vent listener. The priority is designated by a signed 32-bit integer. The h=
igher the number, the higher the priority. All listeners with priority n ar=
e processed before listeners of priority n-1. If two or more listeners shar=
e the same priority, they are processed in the order in which they were add=
ed. The default priority is 0.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">useWeakReference</span>:Boolean=
</code> (default =3D <code>false</code>)<code></code> =E2=80=94 Determines =
whether the reference to the listener is strong or weak. A strong reference=
 (the default) prevents your listener from being garbage-collected. A weak =
reference does not.=20
		 </td></tr></tbody></table><p></p><p><span class=3D"label">See also</span=
></p><div class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TweenMax.html#removeEventListener()" target=3D"">removeEventListener=
()</a></div></div><a name=3D"delayedCall()"></a><a name=3D"delayedCall(Numb=
er,Function,Array,Boolean)"></a><table class=3D"detailHeader" cellpadding=
=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">delayedC=
all</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderTy=
pe">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></tab=
le><div class=3D"detailBody"><code> public static function delayedCall(dela=
y:Number, callback:Function, params:Array =3D null, useFrames:Boolean =3D f=
alse):<a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html">=
TweenMax</a></code><p></p><p></p><p>
		 Provides a simple way to call a function after a set amount of time (or =
frames). You can
		 optionally pass any number of parameters to the function too.
		=20
		 </p><p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and A=
S2 don't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions the 4th parameter is <code>scope</code>, bumping <code>useFrame=
s</code>=20
		 back to the 5th parameter:</p>
		=20
		 <p><code>TweenMax.delayedCall(delay, callback, params, scope, useFrames)=
</code> <i>[JavaScript and AS2 only]</i></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//calls myFunction after 1 s=
econd and passes 2 parameters:
TweenMax.delayedCall(1, myFunction, ["param1", 2]);
        =20
function myFunction(param1, param2) {
    //do stuff
}
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">delay</span>:Number</code> =E2=80=94 Delay i=
n seconds (or frames if <code>useFrames</code> is <code>true</code>) before=
 the function should be called
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">callback</span>:Function</code>=
 =E2=80=94 Function to call
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">params</span>:Array</code> (def=
ault =3D <code>null</code>)<code></code> =E2=80=94 An Array of parameters t=
o pass the function (optional).
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">useFrames</span>:Boolean</code>=
 (default =3D <code>false</code>)<code></code> =E2=80=94 If the delay shoul=
d be measured in frames instead of seconds, set <code>useFrames</code> to <=
code>true</code> (default is <code>false</code>)
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TweenMax.html">TweenMax</a></code> =E2=80=94 TweenMax instance
		 </td></tr></tbody></table></div><a name=3D"duration()"></a><a name=3D"du=
ration(Number)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspa=
cing=3D"0"><tbody><tr><td class=3D"detailHeaderName">duration</td><td class=
=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><t=
d class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"=
detailBody"><code>override public function duration(value:Number):*</code><=
p></p><p></p><p>=20
		 Gets or sets the animation's duration, <b>not</b> including any repeats =
or repeatDelays=20
		 (which are only available in TweenMax and TimelineMax). For example, if =
a TweenMax instance has=20
		 a <code>duration</code> of 2 and a <code>repeat</code> of 3, its <code>t=
otalDuration</code>=20
		 would be 8 (one standard play plus 3 repeats equals 4 total cycles).
		=20
		 </p><p>This method serves as both a getter and setter. Omitting the para=
meter returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myAnimation.duration(2).delay(0.5=
).play(1);</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre> var currentDuration =3D myA=
nimation.duration(); //gets current duration
 myAnimation.duration(2); //sets duration
</pre></div>
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table></div><a name=3D"from()"></a><a name=3D"from(O=
bject,Number,Object)"></a><table class=3D"detailHeader" cellpadding=3D"0" c=
ellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">from</td><td cla=
ss=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td>=
<td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=
=3D"detailBody"><code> public static function from(target:Object, duration:=
Number, vars:Object):<a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html">TweenMax</a></code><p></p><p></p><p>
		 Static method for creating a TweenMax instance that tweens backwards -=
=20
		 you define the <b>BEGINNING</b> values and the current values are used
		 as the destination values which is great for doing things like animating=
 objects
		 onto the screen because you can set them up initially the way you want t=
hem to look=20
		 at the end of the tween and then animate in from elsewhere.
		=20
		 </p><p><b>NOTE:</b> By default, <code>immediateRender</code> is <code>tr=
ue</code> in=20
		 <code>from()</code> tweens, meaning that they immediately render their s=
tarting state=20
		 regardless of any delay that is specified. You can override this behavio=
r by passing=20
		 <code>immediateRender:false</code> in the <code>vars</code> parameter so=
 that it will=20
		 wait to render until the tween actually begins (often the desired behavi=
or when inserting=20
		 into TimelineLite or TimelineMax instances). To illustrate the default b=
ehavior, the=20
		 following code will immediately set the <code>alpha</code> of <code>mc</=
code>=20
		 to 0 and then wait 2 seconds before tweening the <code>alpha</code> back=
 to 1 over
		 the course of 1.5 seconds:</p>
		=20
		 <p><code>
		 TweenMax.from(mc, 1.5, {alpha:0, delay:2});
		 </code></p>
		=20
		 <p>Since the <code>target</code> parameter can also be an array of objec=
ts, the following=20
		 code will tween the alpha property of mc1, mc2, and mc3 from a value of =
0 simultaneously:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>TweenMax.from([mc1, mc2, mc3=
], 1.5, {alpha:0});
</pre></div>
		 <p>Even though 3 objects are animating, there is still only one tween th=
at is created.=20
		 In order to stagger or offset the start times of each object animating, =
please see=20
		 the <code>staggerFrom()</code> method (TimelineLite has one too).</p>
		=20
		 <p>For simple sequencing, you can use the <code>delay</code> special pro=
perty
		 (like <code>TweenMax.from(mc, 1, {alpha:0, delay:0.5})</code>),=20
		 but it is highly recommended that you consider using TimelineLite (or Ti=
melineMax)=20
		 for all but the simplest sequencing tasks. It has an identical <code>fro=
m()</code> method
		 that allows you to append tweens one-after-the-other and then control th=
e entire sequence=20
		 as a whole. You can even have the tweens overlap as much as you want.</p=
>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target=
 object (or array of objects) whose properties this tween affects. =20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if <code>useFrames:true</code> is =
set in the <code>vars</code> parameter)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the starting value for each property that should =
be tweened as well as any special properties like <code>onComplete</code>, =
<code>ease</code>, etc. For example, to tween <code>mc.x</code> from 100 an=
d <code>mc.y</code> from 200 and then call <code>myFunction</code>, do this=
: <code>TweenMax.from(mc, 1, {x:100, y:200, onComplete:myFunction});</code>
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TweenMax.html">TweenMax</a></code> =E2=80=94 TweenMax instance
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#to()" target=3D"">to()</a><br><a href=3D"https://greensock.co=
m/asdocs/com/greensock/TweenMax.html#fromTo()" target=3D"">fromTo()</a><br>=
<a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#stagger=
From()" target=3D"">staggerFrom()</a><br><a href=3D"https://greensock.com/a=
sdocs/com/greensock/TimelineLite.html#from()" target=3D"">com.greensock.Tim=
elineLite.from()</a><br><a href=3D"https://greensock.com/asdocs/com/greenso=
ck/TimelineLite.html#staggerFrom()" target=3D"">com.greensock.TimelineLite.=
staggerFrom()</a></div></div><a name=3D"fromTo()"></a><a name=3D"fromTo(Obj=
ect,Number,Object,Object)"></a><table class=3D"detailHeader" cellpadding=3D=
"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">fromTo</td>=
<td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">meth=
od</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div =
class=3D"detailBody"><code> public static function fromTo(target:Object, du=
ration:Number, fromVars:Object, toVars:Object):<a href=3D"https://greensock=
.com/asdocs/com/greensock/TweenMax.html">TweenMax</a></code><p></p><p></p><=
p>
		 Static method for creating a TweenMax instance that allows you to define=
 both the starting
		 and ending values (as opposed to <code>to()</code> and <code>from()</cod=
e> tweens which are=20
		 based on the target's current values at one end or the other).
		=20
		 </p><p><b>NOTE</b>: Only put starting values in the <code>fromVars</code=
> parameter - all=20
		 special properties for the tween (like onComplete, onUpdate, delay, etc.=
) belong in the <code>toVars</code>=20
		 parameter. </p>
		=20
		 <p>By default, <code>immediateRender</code> is <code>true</code> in=20
		 <code>fromTo()</code> tweens, meaning that they immediately render their=
 starting state=20
		 regardless of any delay that is specified. This is done for convenience =
because it is=20
		 often the preferred behavior when setting things up on the screen to ani=
mate into place, but=20
		 you can override this behavior by passing <code>immediateRender:false</c=
ode> in the=20
		 <code>fromVars</code> or <code>toVars</code> parameter so that it will w=
ait to render=20
		 the starting values until the tween actually begins (often the desired b=
ehavior when inserting=20
		 into TimelineLite or TimelineMax instances).</p>
		=20
		 <p>Since the <code>target</code> parameter can also be an array of objec=
ts, the following=20
		 code will tween the x property of mc1, mc2, and mc3 from 0 to 100 simult=
aneously:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>TweenMax.fromTo([mc1, mc2, m=
c3], 1, {x:0}, {x:100});
</pre></div>
		 <p>Even though 3 objects are animating, there is still only one tween cr=
eated.=20
		 In order to stagger or offset the start times of each object animating, =
please see=20
		 the <code>staggerFromTo()</code> method (TimelineLite has one too).</p>
		=20
		 <p>For simple sequencing, you can use the <code>delay</code> special pro=
perty
		 (like <code>TweenMax.fromTo(mc, 1, {x:0}, {x:100, delay:0.5})</code>),=
=20
		 but it is highly recommended that you consider using TimelineLite (or Ti=
melineMax)=20
		 for all but the simplest sequencing tasks. It has an identical <code>fro=
mTo()</code> method
		 that allows you to append tweens one-after-the-other and then control th=
e entire sequence=20
		 as a whole. You can even have the tweens overlap as much as you want.</p=
>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target=
 object (or array of objects) whose properties this tween affects.=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if <code>useFrames:true</code> is =
set in the <code>vars</code> parameter)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">fromVars</span>:Object</code> =
=E2=80=94 An object defining the starting value for each property that shou=
ld be tweened. For example, to tween <code>mc.x</code> from 100 and <code>m=
c.y</code> from 200, <code>fromVars</code> would look like this: <code>{x:1=
00, y:200}</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">toVars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>onComplete</code>, <code=
>ease</code>, etc. For example, to tween <code>mc.x</code> from 0 to 100 an=
d <code>mc.y</code> from 0 to 200 and then call <code>myFunction</code>, do=
 this: <code>TweenMax.fromTo(mc, 1, {x:0, y:0}, {x:100, y:200, onComplete:m=
yFunction});</code>
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TweenMax.html">TweenMax</a></code> =E2=80=94 TweenMax instance
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#to()" target=3D"">to()</a><br><a href=3D"https://greensock.co=
m/asdocs/com/greensock/TweenMax.html#from()" target=3D"">from()</a><br><a h=
ref=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#staggerFrom=
To()" target=3D"">staggerFromTo()</a><br><a href=3D"https://greensock.com/a=
sdocs/com/greensock/TimelineLite.html#fromTo()" target=3D"">com.greensock.T=
imelineLite.fromTo()</a><br><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TimelineLite.html#staggerFromTo()" target=3D"">com.greensock.Timelin=
eLite.staggerFromTo()</a></div></div><a name=3D"getAllTweens()"></a><a name=
=3D"getAllTweens(Boolean)"></a><table class=3D"detailHeader" cellpadding=3D=
"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">getAllTween=
s</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType=
">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table=
><div class=3D"detailBody"><code> public static function getAllTweens(inclu=
deTimelines:Boolean =3D false):Array</code><p></p><p></p><p>
		 Returns an array containing all tweens (and optionally timelines too, ex=
cluding the root timelines).
		 If your goal is to affect all of the tweens/timelines/delayedCalls (like=
 to <code>pause()</code> them
		 or <code>reverse()</code> or alter their <code>timeScale</code>), you mi=
ght want to consider using the
		 static <code>TimelineLite.exportRoot()</code> method instead because it =
provides a single instance
		 that you can use to control everything.=20
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">includeTimelines</span>:Boolean</code> (defau=
lt =3D <code>false</code>)<code></code> =E2=80=94 If <code>true</code>, Tim=
elineLite and TimelineMax instances will also be included.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Array</code> =E2=80=94 Array of tweens/timeline=
s
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TimelineLite.html#exportRoot()" target=3D"">com.greensock.TimelineLite.expo=
rtRoot()</a></div></div><a name=3D"getTweensOf()"></a><a name=3D"getTweensO=
f(any,Boolean)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspa=
cing=3D"0"><tbody><tr><td class=3D"detailHeaderName">getTweensOf</td><td cl=
ass=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td=
><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=
=3D"detailBody"><code> public static function getTweensOf(target:*, onlyAct=
ive:Boolean =3D false):Array</code><p></p><p></p><p>
		 Returns an array containing all the tweens of a particular target (or gr=
oup of targets) that have not
		 been released for garbage collection yet which typically happens within =
a few seconds after the tween completes.
		 For example, <code>TweenMax.getTweensOf(myObject)</code> returns an arra=
y of all tweens
		 of <code>myObject</code>, even tweens that haven't begun yet. <code>Twee=
nMax.getTweensOf([myObject1, myObject2]);</code>
		 will return a condensed array of the tweens of <code>myObject1</code> pl=
us all the tweens
		 of <code>myObject2</code> combined into one array with duplicates remove=
d.=20
		=20
		 </p><p>Since the method only finds tweens that haven't been released for=
 garbage collection, if you create a tween
		 and then let it finish and then a while later try to find it with <code>=
getTweensOf()</code>, it may not be found=20
		 because it was released by the engine for garbage collection. Remember, =
one of the best parts of GSAP is that it=20
		 saves you from the headache of managing gc. Otherwise, you'd need to man=
ually dispose each tween you create, making=20
		 things much more cumbersome.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>TweenMax.to(myObject1, 1, {x=
:100});
TweenMax.to(myObject2, 1, {x:100});
TweenMax.to([myObject1, myObject2], 1, {alpha:0});
        =20
var a1 =3D TweenMax.getTweensOf(myObject1); //finds 2 tweens
var a2 =3D TweenMax.getTweensOf([myObject1, myObject2]); //finds 3 tweens
</pre></div>
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:*</code> =E2=80=94 The target =
whose tweens should be returned, or an array of such targets
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onlyActive</span>:Boolean</code=
> (default =3D <code>false</code>)<code></code> =E2=80=94 If <code>true</co=
de>, only tweens that are currently active will be returned (a tween is con=
sidered "active" if the virtual playhead is actively moving across the twee=
n and it is not paused, nor are any of its ancestor timelines paused).=20
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Array</code> =E2=80=94 An array of tweens
		 </td></tr></tbody></table></div><a name=3D"invalidate()"></a><table clas=
s=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=
=3D"detailHeaderName">invalidate</td><td class=3D"detailHeaderParens">()</t=
d><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">=
&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code>override pu=
blic function invalidate():*</code><p></p><p></p><p>  =20
		 Clears any initialization data (like starting/ending values in tweens) w=
hich can be useful if, for example,=20
		 you want to restart a tween without reverting to any previously recorded=
 starting values. When you <code>invalidate()</code>=20
		 an animation, it will be re-initialized the next time it renders and its=
 <code>vars</code> object will be re-parsed.=20
		 The timing of the animation (duration, startTime, delay) will not be aff=
ected.
		=20
		 </p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:1=
00, y:100})</code> that ran when mc.x and mc.y=20
		 were initially at 0, but now mc.x and mc.y are 200 and you want them twe=
en to 100 again, you could simply=20
		 <code>invalidate()</code> the tween and <code>restart()</code> it. Witho=
ut invalidating first, restarting it=20
		 would cause the values jump back to 0 immediately (where they started wh=
en the tween originally began).=20
		 When you invalidate a TimelineLite/TimelineMax, it automatically invalid=
ates all of its children.</p>
		 <p></p><p></p><span class=3D"label">Returns</span><table cellpadding=3D"=
0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20"></td><td><cod=
e>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table></div><a name=3D"isTweening()"></a><a name=3D"=
isTweening(Object)"></a><table class=3D"detailHeader" cellpadding=3D"0" cel=
lspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">isTweening</td><td=
 class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method<=
/td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div cla=
ss=3D"detailBody"><code> public static function isTweening(target:Object):B=
oolean</code><p></p><p></p><p>
		 Reports whether or not a particular object is actively tweening. If a tw=
een
		 is paused, is completed, or hasn't started yet, it isn't considered acti=
ve.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target =
object whose tweens you're checking
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Boolean</code> =E2=80=94 Boolean value indicati=
ng whether or not any active tweens were found
		 </td></tr></tbody></table></div><a name=3D"killAll()"></a><a name=3D"kil=
lAll(Boolean,Boolean,Boolean,Boolean)"></a><table class=3D"detailHeader" ce=
llpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName"=
>killAll</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHea=
derType">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody>=
</table><div class=3D"detailBody"><code> public static function killAll(com=
plete:Boolean =3D false, tweens:Boolean =3D true, delayedCalls:Boolean =3D =
true, timelines:Boolean =3D true):void</code><p></p><p></p><p>
		 Kills all tweens and/or delayedCalls/callbacks, and/or timelines, option=
ally forcing them to=20
		 completion first. The various parameters provide a way to specify exactl=
y which types you want
		 to kill
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>//kill everything
TweenMax.killAll();
//kill only tweens, but not delayedCalls or timelines
TweenMax.killAll(false, true, false, false);
//kill only delayedCalls
TweenMax.killAll(false, false, true, false);
</pre></div>
		 =20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">complete</span>:Boolean</code> (default =3D =
<code>false</code>)<code></code> =E2=80=94 Determines whether or not the tw=
eens/delayedCalls/timelines should be forced to completion before being kil=
led.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">tweens</span>:Boolean</code> (d=
efault =3D <code>true</code>)<code></code> =E2=80=94 If <code>true</code>, =
all tweens will be killed (TweenLite and TweenMax instances)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">delayedCalls</span>:Boolean</co=
de> (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>true</c=
ode>, all delayedCalls will be killed. TimelineMax callbacks are treated th=
e same as delayedCalls.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">timelines</span>:Boolean</code>=
 (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>true</code=
>, all TimelineLite and TimelineMax instances will be killed.
		 </td></tr></tbody></table><p></p></div><a name=3D"killChildTweensOf()"><=
/a><a name=3D"killChildTweensOf(flash.display.DisplayObjectContainer,Boolea=
n)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><=
tbody><tr><td class=3D"detailHeaderName">killChildTweensOf</td><td class=3D=
"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td c=
lass=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"det=
ailBody"><code> public static function killChildTweensOf(parent:DisplayObje=
ctContainer, complete:Boolean =3D false):void</code><p></p><p></p><p>
		 [AS3/AS2 only]
		 Kills all tweens of the children of a particular MovieClip/DisplayObject=
Container, optionally forcing them to completion first.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">parent</span>:DisplayObjectContainer</code> =
=E2=80=94 The parent MovieClip/DisplayObjectContainer whose children's twee=
ns should be killed.=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">complete</span>:Boolean</code> =
(default =3D <code>false</code>)<code></code> =E2=80=94 If <code>true</code=
>, the tweens will be forced to completion before being killed.
		 </td></tr></tbody></table><p></p></div><a name=3D"killDelayedCallsTo()">=
</a><a name=3D"killDelayedCallsTo(Function)"></a><table class=3D"detailHead=
er" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeade=
rName">killDelayedCallsTo</td><td class=3D"detailHeaderParens">()</td><td c=
lass=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;<=
/td></tr></tbody></table><div class=3D"detailBody"><code> public static fun=
ction killDelayedCallsTo(func:Function):void</code><p></p><p></p><p>
		 Immediately kills all of the delayedCalls to a particular function. If, =
for example,=20
		 you want to kill all delayedCalls to <code>myFunction</code>, you'd do t=
his:
		=20
		 </p><p><code>
		 TweenMax.killDelayedCallsTo(myFunction);
		 </code></p>
		=20
		 <p>Since a delayedCall is just a tween that uses the function/callback a=
s both its <code>target</code>
		 and its <code>onComplete</code>, <code>TweenMax.killTweensOf(myFunction)=
</code> produces exactly the=20
		 same result as <code>TweenMax.killDelayedCallsTo(myFunction)</code>.</p>
		=20
		 <p>This method affects all delayedCalls that were created using <code>Tw=
eenLite.delayedCall()</code>
		 or <code>TweenMax.delayedCall()</code> or the <code>call()</code> or <co=
de>addCallback()</code> methods
		 of TimelineLite or TimelineMax. Basically, any tween whose target is the=
 function you supply will=20
		 be killed.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">func</span>:Function</code> =E2=80=94 The fu=
nction for which all delayedCalls should be killed/cancelled.
		 </td></tr></tbody></table><p></p></div><a name=3D"killTweensOf()"></a><a=
 name=3D"killTweensOf(any,any,Object)"></a><table class=3D"detailHeader" ce=
llpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName"=
>killTweensOf</td><td class=3D"detailHeaderParens">()</td><td class=3D"deta=
ilHeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></t=
body></table><div class=3D"detailBody"><code> public static function killTw=
eensOf(target:*, onlyActive:* =3D false, vars:Object =3D null):void</code><=
p></p><p></p><p>
		 Kills all the tweens (or specific tweening properties) of a particular o=
bject or=20
		 the delayedCalls to a particular function. If, for example, you want to =
kill all=20
		 tweens of <code>myObject</code>, you'd do this:
		=20
		 </p><p><code>
		 TweenMax.killTweensOf(myObject);
		 </code></p>
		=20
		 <p>To kill only active (currently animating) tweens of <code>myObject</c=
ode>, you'd do this:</p>
		=20
		 <p><code>
		 TweenLite.killTweensOf(myObject, true);
		 </code></p>
		=20
		 <p>To kill only particular tweening properties of the object, use the se=
cond parameter.=20
		 For example, if you only want to kill all the tweens of <code>myObject.a=
lpha</code> and=20
		 <code>myObject.x</code>, you'd do this:</p>
		=20
		 <p><code>
		 TweenMax.killTweensOf(myObject, false, {alpha:true, x:true});
		 </code></p>
		=20
		 <p>To kill all the delayedCalls (like ones created using <code>TweenMax.=
delayedCall(5, myFunction);</code>),=20
		 you can simply call <code>TweenMax.killTweensOf(myFunction);</code> beca=
use delayedCalls=20
		 are simply tweens that have their <code>target</code> and <code>onComple=
te</code> set to=20
		 the same function (as well as a <code>delay</code> of course).</p>
		=20
		 <p><code>killTweensOf()</code> affects tweens that haven't begun yet too=
. If, for example,=20
		 a tween of <code>myObject</code> has a <code>delay</code> of 5 seconds a=
nd=20
		 <code>TweenLite.killTweensOf(mc)</code> is called 2 seconds after the tw=
een was created,=20
		 it will still be killed even though it hasn't started yet. </p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:*</code> =E2=80=94 Object whos=
e tweens should be killed immediately
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onlyActive</span>:*</code> (def=
ault =3D <code>false</code>)<code></code> =E2=80=94 If <code>true</code>, o=
nly tweens that are currently active will be killed (a tween is considered =
"active" if the virtual playhead is actively moving across the tween and it=
 is not paused, nor are any of its ancestor timelines paused).=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> (defa=
ult =3D <code>null</code>)<code></code> =E2=80=94 To kill only specific pro=
perties, use a generic object containing enumerable properties correspondin=
g to the ones that should be killed like <code>{x:true, y:true}</code>. The=
 values assigned to each property of the object don't matter - the sole pur=
pose of the object is for iteration over the named properties (in this case=
, <code>x</code> and <code>y</code>). If no object (or <code>null</code>) i=
s defined, all matched tweens will be killed in their entirety.
		 </td></tr></tbody></table><p></p></div><a name=3D"pauseAll()"></a><a nam=
e=3D"pauseAll(Boolean,Boolean,Boolean)"></a><table class=3D"detailHeader" c=
ellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName=
">pauseAll</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailH=
eaderType">method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbod=
y></table><div class=3D"detailBody"><code> public static function pauseAll(=
tweens:Boolean =3D true, delayedCalls:Boolean =3D true, timelines:Boolean =
=3D true):void</code><p></p><p></p><p>
		 [deprecated] Pauses all tweens and/or delayedCalls/callbacks and/or time=
lines. This literally
		 changes the <code>paused</code> state of all affected tweens/delayedCall=
s/timelines, but a
		 more flexible way to globally control things is to use the <code>Timelin=
eLite.exportRoot()</code> method
		 which essentially wraps all of the tweens/timelines/delayedCalls on the =
root timeline into a
		 TimelineLite instance so that you can <code>pause(), resume()</code>, or=
 even <code>reverse()</code>
		 or alter the <code>timeScale</code> without affecting animations that yo=
u create after the export.
		 This also avoids having to alter the <code>paused</code> state of every =
individual=20
		 tween/delayedCall/timeline - controlling the TimelineLite that contains =
the exported animations
		 delivers the same effect visually, but does so in a more elegant and fle=
xible way.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">tweens</span>:Boolean</code> (default =3D <co=
de>true</code>)<code></code> =E2=80=94 If <code>true</code>, all tweens wil=
l be paused.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">delayedCalls</span>:Boolean</co=
de> (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>true</c=
ode>, all delayedCalls will be paused. timeline callbacks are treated the s=
ame as delayedCalls.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">timelines</span>:Boolean</code>=
 (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>true</code=
>, all TimelineLite and TimelineMax instances will be paused (at least the =
ones who haven't finished and been removed from their parent timeline)
		=20
		 </td></tr></tbody></table><p></p><p><span class=3D"label">See also</span=
></p><div class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TimelineLite.html#exportRoot()" target=3D"">com.greensock.TimelineLi=
te.exportRoot()</a></div></div><a name=3D"progress()"></a><a name=3D"progre=
ss(Number,Boolean)"></a><table class=3D"detailHeader" cellpadding=3D"0" cel=
lspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">progress</td><td c=
lass=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</t=
d><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=
=3D"detailBody"><code>override public function progress(value:Number, suppr=
essEvents:Boolean =3D false):*</code><p></p><p></p><p>=20
		 Gets or sets the tween's progress which is a value between 0 and 1 indic=
ating the position=20
		 of the virtual playhead (excluding repeats) where 0 is at the beginning,=
 0.5 is halfway complete,=20
		 and 1 is complete. If the tween has a non-zero <code>repeat</code> defin=
ed, <code>progress</code>=20
		 and <code>totalProgress</code> will be different because <code>progress<=
/code> doesn't include any=20
		 repeats or repeatDelays whereas <code>totalProgress</code> does. For exa=
mple, if a TweenMax instance=20
		 is set to repeat once, at the end of the first cycle <code>totalProgress=
</code> would only be 0.5=20
		 whereas <code>progress</code> would be 1. If you watched both properties=
 over the course of the entire=20
		 animation, you'd see <code>progress</code> go from 0 to 1 twice (once fo=
r each cycle) in the=20
		 same time it takes the <code>totalProgress</code> to go from 0 to 1 once=
.
		=20
		 </p><p>This method serves as both a getter and setter. Omitting the para=
meter returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myTween.progress(0.5).play();</co=
de></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var progress =3D myTween.pro=
gress(); //gets current progress
myTween.progress( 0.25 ); //sets progress to one quarter finished
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">suppressEvents</span>:Boolean</=
code> (default =3D <code>false</code>)<code></code> =E2=80=94 If <code>true=
</code>, no events or callbacks will be triggered when the playhead moves t=
o the new position.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#totalProgress()" target=3D"">totalProgress()</a><br><a href=
=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#seek()" target=
=3D"">seek()</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/T=
weenMax.html#time()" target=3D"">time()</a><br><a href=3D"https://greensock=
.com/asdocs/com/greensock/TweenMax.html#totalTime()" target=3D"">totalTime(=
)</a></div></div><a name=3D"removeEventListener()"></a><a name=3D"removeEve=
ntListener(String,Function,Boolean)"></a><table class=3D"detailHeader" cell=
padding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">r=
emoveEventListener</td><td class=3D"detailHeaderParens">()</td><td class=3D=
"detailHeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;</td></t=
r></tbody></table><div class=3D"detailBody"><code> public function removeEv=
entListener(type:String, listener:Function, useCapture:Boolean =3D false):v=
oid</code><p></p><p></p><p>=20
		 [AS3 only]
		 Removes a listener from the EventDispatcher object. If there is no match=
ing listener registered=20
		 with the EventDispatcher object, a call to this method has no effect.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">type</span>:String</code> =E2=80=94 The type =
of event
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">listener</span>:Function</code>=
 =E2=80=94 The listener object to remove.=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">useCapture</span>:Boolean</code=
> (default =3D <code>false</code>)<code></code> =E2=80=94 Specifies whether=
 the listener was registered for the capture phase or the target and bubbli=
ng phases. If the listener was registered for both the capture phase and th=
e target and bubbling phases, two calls to removeEventListener() are requir=
ed to remove both, one call with useCapture() set to true, and another call=
 with useCapture() set to false.
		 </td></tr></tbody></table><p></p></div><a name=3D"repeat()"></a><a name=
=3D"repeat(int)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellsp=
acing=3D"0"><tbody><tr><td class=3D"detailHeaderName">repeat</td><td class=
=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><t=
d class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"=
detailBody"><code> public function repeat(value:int =3D 0):*</code><p></p><=
p></p><p>=20
		 Gets or sets the number of times that the tween should repeat after its =
first iteration. For example,=20
		 if <code>repeat</code> is 1, the tween will play a total of twice (the i=
nitial play
		 plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> shou=
ld always be an integer.
		=20
		 </p><p>To cause the repeats to alternate between forward and backward, s=
et <code>yoyo</code> to=20
		 <code>true</code>. To add a time gap between repeats, use <code>repeatDe=
lay</code>. You can=20
		 set the initial <code>repeat</code> value via the <code>vars</code> para=
meter, like:</p>
		=20
		 <p><code>
		 TweenMax.to(mc, 1, {x:100, repeat:2});
		 </code></p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myTween.repeat(2).yoyo(true).play=
();</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var repeat =3D myTween.repea=
t(); //gets current repeat value
myTween.repeat(2); //sets repeat to 2
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:int</code> (default =3D <code>0=
</code>)<code></code> =E2=80=94 Omitting the parameter returns the current =
value (getter), whereas defining the parameter sets the value (setter) and =
returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#repeatDelay()" target=3D"">repeatDelay()</a><br><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TweenMax.html#yoyo()" target=3D"">=
yoyo()</a></div></div><a name=3D"repeatDelay()"></a><a name=3D"repeatDelay(=
Number)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"detailHeaderName">repeatDelay</td><td class=3D"=
detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td cl=
ass=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"deta=
ilBody"><code> public function repeatDelay(value:Number):*</code><p></p><p>=
</p><p>
		 Gets or sets the amount of time in seconds (or frames for frames-based t=
weens) between repeats.=20
		 For example, if <code>repeat</code> is 2 and <code>repeatDelay</code> is=
 1, the tween will=20
		 play initially, then wait for 1 second before it repeats, then play agai=
n, then wait 1 second=20
		 again before doing its final repeat. You can set the initial <code>repea=
tDelay</code> value=20
		 via the <code>vars</code> parameter, like:
		=20
		 </p><p><code>
		 TweenMax.to(mc, 1, {x:100, repeat:2, repeatDelay:1});
		 </code></p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myTween.repeat(2).yoyo(true).repe=
atDelay(0.5).play();</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var repeatDelay =3D myTween.=
repeatDelay(); //gets current repeatDelay value
myTween.repeatDelay(2); //sets repeatDelay to 2
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#repeat()" target=3D"">repeat()</a><br><a href=3D"https://gree=
nsock.com/asdocs/com/greensock/TweenMax.html#yoyo()" target=3D"">yoyo()</a>=
</div></div><a name=3D"resumeAll()"></a><a name=3D"resumeAll(Boolean,Boolea=
n,Boolean)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"detailHeaderName">resumeAll</td><td class=3D=
"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td c=
lass=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"det=
ailBody"><code> public static function resumeAll(tweens:Boolean =3D true, d=
elayedCalls:Boolean =3D true, timelines:Boolean =3D true):void</code><p></p=
><p></p><p>
		 [deprecated] Resumes all paused tweens and/or delayedCalls/callbacks and=
/or timelines. This literally
		 changes the <code>paused</code> state of all affected tweens/delayedCall=
s/timelines, but a
		 more flexible way to globally control things is to use the <code>Timelin=
eLite.exportRoot()</code> method
		 which essentially wraps all of the tweens/timelines/delayedCalls on the =
root timeline into a
		 TimelineLite instance so that you can <code>pause(), resume()</code>, or=
 even <code>reverse()</code>
		 or alter the <code>timeScale</code> without affecting animations that yo=
u create after the export.
		 This also avoids having to alter the <code>paused</code> state of every =
individual=20
		 tween/delayedCall/timeline - controlling the TimelineLite that contains =
the exported animations
		 delivers the same effect visually, but does so in a more elegant and fle=
xible way.
		=20
		 </p><p><span class=3D"label"> Parameters </span></p><table cellpadding=
=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><t=
d><code><span class=3D"label">tweens</span>:Boolean</code> (default =3D <co=
de>true</code>)<code></code> =E2=80=94 If <code>true</code>, all tweens wil=
l be resumed.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">delayedCalls</span>:Boolean</co=
de> (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>true</c=
ode>, all delayedCalls will be resumed. timeline callbacks are treated the =
same as delayedCalls.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">timelines</span>:Boolean</code>=
 (default =3D <code>true</code>)<code></code> =E2=80=94 If <code>true</code=
>, all TimelineLite and TimelineMax instances will be resumed (at least the=
 ones who haven't finished and been removed from their parent timeline)
		 </td></tr></tbody></table><p></p><p><span class=3D"label">See also</span=
></p><div class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TimelineLite.html#exportRoot()" target=3D"">com.greensock.TimelineLi=
te.exportRoot()</a></div></div><a name=3D"set()"></a><a name=3D"set(Object,=
Object)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"detailHeaderName">set</td><td class=3D"detailHe=
aderParens">()</td><td class=3D"detailHeaderType">method</td><td class=3D"d=
etailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody">=
<code> public static function set(target:Object, vars:Object):<a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TweenMax.html">TweenMax</a></code>=
<p></p><p></p><p>
		 Immediately sets properties of the target accordingly - essentially a ze=
ro-duration <code>to()</code> tween with a more=20
		 intuitive name. So the following lines produce identical results:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>TweenMax.set(myObject, {=
x:100, y:50, alpha:0});
TweenMax.to(myObject, 0, {x:100, y:50, alpha:0});
</pre></div>
		=20
		 <p>And of course you can use an array to set the properties of multiple =
targets at the same time, like:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>TweenMax.set([obj1, obj2, ob=
j3], {x:100, y:50, alpha:0});
         </pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target=
 object (or array of objects) whose properties will be affected.=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the value for each property that should be set. F=
or example, to set <code>mc.x</code> to 100 and <code>mc.y</code> to 200, d=
o this: <code>TweenMax.set(mc, {x:100, y:200});</code>
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TweenMax.html">TweenMax</a></code> =E2=80=94 A TweenMax instance (wi=
th a duration of 0) which can optionally be inserted into a TimelineLite/Ma=
x instance (although it's typically more concise to just use the timeline's=
 <code>set()</code> method).
		 </td></tr></tbody></table></div><a name=3D"staggerFrom()"></a><a name=3D=
"staggerFrom(Array,Number,Object,Number,Function,Array)"></a><table class=
=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=
=3D"detailHeaderName">staggerFrom</td><td class=3D"detailHeaderParens">()</=
td><td class=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule"=
>&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> public st=
atic function staggerFrom(targets:Array, duration:Number, vars:Object, stag=
ger:Number =3D 0, onCompleteAll:Function =3D null, onCompleteAllParams:Arra=
y =3D null):Array</code><p></p><p></p><p>
		 Tweens an array of targets from a common set of destination values (usin=
g the current
		 values as the destination), but staggers their start times by a specifie=
d amount of time,=20
		 creating an evenly-spaced sequence with a surprisingly small amount of c=
ode. For example,=20
		 let's say you have an array containing references to a bunch of text fie=
lds that you'd=20
		 like to drop into place while fading in, all in a staggered fashion with=
 0.2 seconds=20
		 between each tween's start time:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var textFields =3D [tf1,=
 tf2, tf3, tf4, tf5];
TweenMax.staggerFrom(textFields, 1, {y:"+150"}, 0.2);
</pre></div>
		 <p><code>staggerFrom()</code> simply loops through the <code>targets</co=
de> array and creates=20
		 a <code>from()</code> tween for each object and then returns an array co=
ntaining all of
		 the resulting tweens (one for each object).</p>
		=20
		 <p>If you can afford the slight increase in file size, it is usually bet=
ter to use
		 TimelineLite's <code>staggerFrom()</code> method because it wraps the tw=
eens in a
		 TimelineLite instead of an array which makes controlling the group as a =
whole much
		 easier. That way you could pause(), resume(), reverse(), restart() or ch=
ange the timeScale
		 of everything at once.</p>
		=20
		 <p>Note that if you define an <code>onComplete</code> (or any callback f=
or that matter)
		 in the <code>vars</code> parameter, it will be called for each tween rat=
her than the whole=20
		 sequence. This can be very useful, but if you want to call a function af=
ter the entire
		 sequence of tweens has completed, use the <code>onCompleteAll</code> par=
ameter (the 5th parameter).</p>
		=20
		 <p>By default, <code>immediateRender</code> is <code>true</code> in=20
		 <code>from()</code> tweens, meaning that they immediately render their s=
tarting state=20
		 regardless of any delay that is specified. You can override this behavio=
r by passing=20
		 <code>immediateRender:false</code> in the <code>vars</code> parameter so=
 that it will=20
		 wait to render until the tween actually begins.</p>
		=20
		 <p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 d=
on't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions accept an extra (7th) parameter for <code>onCompleteAllScope</c=
ode>.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">targets</span>:Array</code> =E2=80=94 An arr=
ay of target objects whose properties should be affected
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if <code>useFrames:true</code> is =
defined in the <code>vars</code> parameter)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>ease</code>. For example=
, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, an=
d mc3, staggering their start time by 0.25 seconds and then call <code>myFu=
nction</code> when they last one has finished, do this: <code>TweenMax.stag=
gerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, myFunction})</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">stagger</span>:Number</code> (d=
efault =3D <code>0</code>)<code></code> =E2=80=94 Amount of time in seconds=
 (or frames for frames-based tweens) to stagger the start time of each twee=
n. For example, you might want to have 5 objects move down 100 pixels while=
 fading out, and stagger the start times by 0.2 seconds - you could do: <co=
de>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:"+100", alpha:0}, 0.=
2)</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAll</span>:Function</=
code> (default =3D <code>null</code>)<code></code> =E2=80=94 A function to =
call as soon as the entire sequence of tweens has completed
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAllParams</span>:Arra=
y</code> (default =3D <code>null</code>)<code></code> =E2=80=94 An array of=
 parameters to pass the <code>onCompleteAll</code> method.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Array</code> =E2=80=94 An array of TweenMax ins=
tances (one for each object in the <code>targets</code> array)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#staggerTo()" target=3D"">staggerTo()</a><br><a href=3D"https:=
//greensock.com/asdocs/com/greensock/TweenMax.html#staggerFromTo()" target=
=3D"">staggerFromTo()</a><br><a href=3D"https://greensock.com/asdocs/com/gr=
eensock/TimelineLite.html#staggerFrom()" target=3D"">com.greensock.Timeline=
Lite.staggerFrom()</a></div></div><a name=3D"staggerFromTo()"></a><a name=
=3D"staggerFromTo(Array,Number,Object,Object,Number,Function,Array)"></a><t=
able class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr>=
<td class=3D"detailHeaderName">staggerFromTo</td><td class=3D"detailHeaderP=
arens">()</td><td class=3D"detailHeaderType">method</td><td class=3D"detail=
HeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code=
> public static function staggerFromTo(targets:Array, duration:Number, from=
Vars:Object, toVars:Object, stagger:Number =3D 0, onCompleteAll:Function =
=3D null, onCompleteAllParams:Array =3D null):Array</code><p></p><p></p><p>
		 Tweens an array of targets from and to a common set of values, but stagg=
ers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code. For example, let's say you have an ar=
ray containing
		 references to a bunch of text fields that you'd like to fade from alpha:=
1 to alpha:0 in a
		 staggered fashion with 0.2 seconds between each tween's start time:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var textFields =3D [tf1,=
 tf2, tf3, tf4, tf5];
TweenMax.staggerFromTo(textFields, 1, {alpha:1}, {alpha:0}, 0.2);
</pre></div>
		 <p><code>staggerFromTo()</code> simply loops through the <code>targets</=
code> array and creates=20
		 a <code>fromTo()</code> tween for each object and then returns an array =
containing all of
		 the resulting tweens (one for each object).</p>
		=20
		 <p>If you can afford the slight increase in file size, it is usually bet=
ter to use
		 TimelineLite's <code>staggerFromTo()</code> method because it wraps the =
tweens in a
		 TimelineLite instead of an array which makes controlling the group as a =
whole much
		 easier. That way you could pause(), resume(), reverse(), restart() or ch=
ange the timeScale
		 of everything at once.</p>
		=20
		 <p>Note that if you define an <code>onComplete</code> (or any callback f=
or that matter)
		 in the <code>vars</code> parameter, it will be called for each tween rat=
her than the whole=20
		 sequence. This can be very useful, but if you want to call a function af=
ter the entire
		 sequence of tweens has completed, use the <code>onCompleteAll</code> par=
ameter (the 6th parameter).</p>
		=20
		 <p>By default, <code>immediateRender</code> is <code>true</code> in=20
		 <code>staggerFromTo()</code> tweens, meaning that they immediately rende=
r their starting state=20
		 regardless of any delay that is specified. This is done for convenience =
because it is=20
		 often the preferred behavior when setting things up on the screen to ani=
mate into place, but=20
		 you can override this behavior by passing <code>immediateRender:false</c=
ode> in the=20
		 <code>fromVars</code> or <code>toVars</code> parameter so that it will w=
ait to render=20
		 the starting values until the tweens actually begin (often the desired b=
ehavior when inserting=20
		 into TimelineLite or TimelineMax instances).</p>
		=20
		 <p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 d=
on't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions accept an extra (8th) parameter for <code>onCompleteAllScope</c=
ode>.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">targets</span>:Array</code> =E2=80=94 An arr=
ay of target objects whose properties should be affected
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if <code>useFrames:true</code> is =
defined in the <code>vars</code> parameter)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">fromVars</span>:Object</code> =
=E2=80=94 An object defining the starting value for each property that shou=
ld be tweened. For example, to tween <code>x</code> from 100 and <code>y</c=
ode> from 200, <code>fromVars</code> would look like this: <code>{x:100, y:=
200}</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">toVars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>ease</code>. For example=
, to tween <code>x</code> from 0 to 100 and <code>y</code> from 0 to 200, s=
taggering the start times by 0.2 seconds and then call <code>myFunction</co=
de> when they all complete, do this: <code>TweenMax.staggerFromTo([mc1, mc2=
, mc3], 1, {x:0, y:0}, {x:100, y:200}, 0.2, myFunction});</code>
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">stagger</span>:Number</code> (d=
efault =3D <code>0</code>)<code></code> =E2=80=94 Amount of time in seconds=
 (or frames if the timeline is frames-based) to stagger the start time of e=
ach tween. For example, you might want to have 5 objects move down 100 pixe=
ls while fading out, and stagger the start times by 0.2 seconds - you could=
 do: <code>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:"+100", alph=
a:0}, 0.2)</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAll</span>:Function</=
code> (default =3D <code>null</code>)<code></code> =E2=80=94 A function to =
call as soon as the entire sequence of tweens has completed
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAllParams</span>:Arra=
y</code> (default =3D <code>null</code>)<code></code> =E2=80=94 An array of=
 parameters to pass the <code>onCompleteAll</code> method.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Array</code> =E2=80=94 An array of TweenMax ins=
tances (one for each object in the <code>targets</code> array)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#staggerTo()" target=3D"">staggerTo()</a><br><a href=3D"https:=
//greensock.com/asdocs/com/greensock/TweenMax.html#staggerFrom()" target=3D=
"">staggerFrom()</a><br><a href=3D"https://greensock.com/asdocs/com/greenso=
ck/TimelineLite.html#staggerFromTo()" target=3D"">com.greensock.TimelineLit=
e.staggerFromTo()</a></div></div><a name=3D"staggerTo()"></a><a name=3D"sta=
ggerTo(Array,Number,Object,Number,Function,Array)"></a><table class=3D"deta=
ilHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td class=3D"detai=
lHeaderName">staggerTo</td><td class=3D"detailHeaderParens">()</td><td clas=
s=3D"detailHeaderType">method</td><td class=3D"detailHeaderRule">&nbsp;</td=
></tr></tbody></table><div class=3D"detailBody"><code> public static functi=
on staggerTo(targets:Array, duration:Number, vars:Object, stagger:Number =
=3D 0, onCompleteAll:Function =3D null, onCompleteAllParams:Array =3D null)=
:Array</code><p></p><p></p><p>
		 Tweens an array of targets to a common set of destination values, but st=
aggers their
		 start times by a specified amount of time, creating an evenly-spaced seq=
uence with a
		 surprisingly small amount of code. For example, let's say you have an ar=
ray containing
		 references to a bunch of text fields that you'd like to fall away and fa=
de out in a
		 staggered fashion with 0.2 seconds between each tween's start time:
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>var textFields =3D [tf1,=
 tf2, tf3, tf4, tf5];
TweenMax.staggerTo(textFields, 1, {y:"+150", ease:CubicIn.ease}, 0.2);
</pre></div>
		 <p><code>staggerTo()</code> simply loops through the <code>targets</code=
> array and creates=20
		 a <code>to()</code> tween for each object and then returns an array cont=
aining all of
		 the resulting tweens (one for each object).</p>
		=20
		 <p>If you can afford the slight increase in file size, it is usually bet=
ter to use
		 TimelineLite's <code>staggerTo()</code> method because it wraps the twee=
ns in a
		 TimelineLite instead of an array which makes controlling the group as a =
whole much
		 easier. That way you could pause(), resume(), reverse(), restart() or ch=
ange the timeScale
		 of everything at once.</p>
		=20
		 <p>Note that if you define an <code>onComplete</code> (or any callback f=
or that matter)
		 in the <code>vars</code> parameter, it will be called for each tween rat=
her than the whole=20
		 sequence. This can be very useful, but if you want to call a function af=
ter the entire
		 sequence of tweens has completed, use the <code>onCompleteAll</code> par=
ameter (the 5th parameter).</p>
		=20
		 <p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 d=
on't=20
		 maintain scope (what "<code>this</code>" refers to, or the context) in f=
unction calls,=20
		 it can be useful to define the scope specifically. Therefore, in the Jav=
aScript and AS2=20
		 versions accept an extra (7th) parameter for <code>onCompleteAllScope</c=
ode>.</p>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">targets</span>:Array</code> =E2=80=94 An arr=
ay of target objects whose properties should be affected
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if <code>useFrames:true</code> is =
defined in the <code>vars</code> parameter)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>ease</code>. For example=
, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, an=
d mc3, staggering their start time by 0.25 seconds and then call <code>myFu=
nction</code> when they last one has finished, do this: <code>TweenMax.stag=
gerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, myFunction})</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">stagger</span>:Number</code> (d=
efault =3D <code>0</code>)<code></code> =E2=80=94 Amount of time in seconds=
 (or frames for frames-based tweens) to stagger the start time of each twee=
n. For example, you might want to have 5 objects move down 100 pixels while=
 fading out, and stagger the start times by 0.2 seconds - you could do: <co=
de>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:"+100", alpha:0}, 0.=
2)</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAll</span>:Function</=
code> (default =3D <code>null</code>)<code></code> =E2=80=94 A function to =
call as soon as the entire sequence of tweens has completed.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">onCompleteAllParams</span>:Arra=
y</code> (default =3D <code>null</code>)<code></code> =E2=80=94 An array of=
 parameters to pass the <code>onCompleteAll</code> method.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>Array</code> =E2=80=94 Array of TweenMax tweens=
 (one for each object in the <code>targets</code> array)
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#staggerFrom()" target=3D"">staggerFrom()</a><br><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TweenMax.html#staggerFromTo()" tar=
get=3D"">staggerFromTo()</a><br><a href=3D"https://greensock.com/asdocs/com=
/greensock/TimelineLite.html#staggerTo()" target=3D"">com.greensock.Timelin=
eLite.staggerTo()</a></div></div><a name=3D"time()"></a><a name=3D"time(Num=
ber,Boolean)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspaci=
ng=3D"0"><tbody><tr><td class=3D"detailHeaderName">time</td><td class=3D"de=
tailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td clas=
s=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detail=
Body"><code>override public function time(value:Number, suppressEvents:Bool=
ean =3D false):*</code><p></p><p></p><p>
		 Gets or sets the local position of the playhead (essentially the current=
 time), <b>not</b>=20
		 including any repeats or repeatDelays. If the tween has a non-zero <code=
>repeat</code>, its <code>time</code>=20
		 goes back to zero upon repeating even though the <code>totalTime</code> =
continues forward linearly=20
		 (or if <code>yoyo</code> is <code>true</code>, the <code>time</code> alt=
ernates between moving forward=20
		 and backward). <code>time</code> never exceeds the duration whereas the =
<code>totalTime</code> reflects=20
		 the overall time including any repeats and repeatDelays.=20
		=20
		 </p><p>For example, if a TweenMax instance has a <code>duration</code> o=
f 2 and a repeat of 3,=20
		 <code>totalTime</code> will go from 0 to 8 during the course of the twee=
n (plays once then=20
		 repeats 3 times, making 4 total cycles) whereas <code>time</code> would =
go from 0 to 2 a=20
		 total of 4 times.</p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var currentTime =3D myTween.=
time(); //gets current time
myTween.time(2); //sets time, jumping to new value just like seek().
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining. Negative values will =
be interpreted from the <b>END</b> of the animation.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">suppressEvents</span>:Boolean</=
code> (default =3D <code>false</code>)<code></code> =E2=80=94 If <code>true=
</code>, no events or callbacks will be triggered when the playhead moves t=
o the new position defined in the <code>value</code> parameter.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#seek()" target=3D"">seek()</a><br><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TweenMax.html#play()" target=3D"">play()</a><br>=
<a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#reverse=
()" target=3D"">reverse()</a><br><a href=3D"https://greensock.com/asdocs/co=
m/greensock/TweenMax.html#pause()" target=3D"">pause()</a><br><a href=3D"ht=
tps://greensock.com/asdocs/com/greensock/TweenMax.html#totalTime()" target=
=3D"">totalTime()</a></div></div><a name=3D"to()"></a><a name=3D"to(Object,=
Number,Object)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspa=
cing=3D"0"><tbody><tr><td class=3D"detailHeaderName">to</td><td class=3D"de=
tailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><td clas=
s=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detail=
Body"><code> public static function to(target:Object, duration:Number, vars=
:Object):<a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.htm=
l">TweenMax</a></code><p></p><p></p><p>
		 Static method for creating a TweenMax instance that animates to the spec=
ified destination values
		 (from the current values). This static method can be more intuitive for =
some developers=20
		 and shields them from potential garbage collection issues that could ari=
se when assigning a
		 tween instance to a persistent variable. The following lines of code pro=
duce identical results:=20
		=20
		 </p><div class=3D"listing" version=3D"3.0"><pre>TweenMax.to(mc, 1, {x:10=
0});
var myTween =3D new TweenMax(mc, 1, {x:100});
var myTween =3D TweenMax.to(mc, 1, {x:100});
</pre></div>
		 <p>Each line above will tween the <code>"x"</code> property of the <code=
>mc</code> object=20
		 to a value of 100 over the coarse of 1 second. They each use a slightly =
different syntax,
		 all of which are valid. If you don't need to store a reference of the tw=
een, just use the=20
		 static <code>TweenMax.to( )</code> call.</p>
		=20
		 <p>Since the <code>target</code> parameter can also be an array of objec=
ts, the following=20
		 code will tween the x property of mc1, mc2, and mc3 to a value of 100 si=
multaneously:</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>TweenMax.to([mc1, mc2, mc3],=
 1, {x:100});
</pre></div>
		 <p>Even though 3 objects are animating, there is still only one tween cr=
eated.=20
		 In order to stagger or offset the start times of each object animating, =
please see=20
		 the <code>staggerTo()</code> method (TimelineLite has one too).</p>
		=20
		 <p>For simple sequencing, you can use the <code>delay</code> special pro=
perty
		 (like <code>TweenMax.to(mc, 1, {x:100, delay:0.5})</code>),=20
		 but it is highly recommended that you consider using TimelineLite (or Ti=
melineMax)=20
		 for all but the simplest sequencing tasks. It has an identical <code>to(=
)</code> method
		 that allows you to append tweens one-after-the-other and then control th=
e entire sequence=20
		 as a whole. You can even have the tweens overlap as much as you want.</p=
>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">target</span>:Object</code> =E2=80=94 Target=
 object (or array of objects) whose properties this tween affects.=20
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">duration</span>:Number</code> =
=E2=80=94 Duration in seconds (or frames if <code>useFrames:true</code> is =
set in the <code>vars</code> parameter)
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">vars</span>:Object</code> =E2=
=80=94 An object defining the end value for each property that should be tw=
eened as well as any special properties like <code>onComplete</code>, <code=
>ease</code>, etc. For example, to tween <code>mc.x</code> to 100 and <code=
>mc.y</code> to 200 and then call <code>myFunction</code>, do this: <code>T=
weenMax.to(mc, 1, {x:100, y:200, onComplete:myFunction});</code>
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code><a href=3D"https://greensock.com/asdocs/com/gre=
ensock/TweenMax.html">TweenMax</a></code> =E2=80=94 TweenMax instance
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#from()" target=3D"">from()</a><br><a href=3D"https://greensoc=
k.com/asdocs/com/greensock/TweenMax.html#fromTo()" target=3D"">fromTo()</a>=
<br><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html#sta=
ggerTo()" target=3D"">staggerTo()</a><br><a href=3D"https://greensock.com/a=
sdocs/com/greensock/TimelineLite.html#to()" target=3D"">com.greensock.Timel=
ineLite.to()</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/T=
imelineLite.html#staggerTo()" target=3D"">com.greensock.TimelineLite.stagge=
rTo()</a></div></div><a name=3D"totalDuration()"></a><a name=3D"totalDurati=
on(Number)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td class=3D"detailHeaderName">totalDuration</td><td clas=
s=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType">method</td><=
td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D=
"detailBody"><code>override public function totalDuration(value:Number):*</=
code><p></p><p></p><p>
		 Gets or sets the total duration of the tween in seconds (or frames for f=
rames-based tweens)=20
		 <b>including</b> any repeats or repeatDelays. <code>duration</code>, by =
contrast, does=20
		 <b>NOT</b> include repeats and repeatDelays. For example, if the tween h=
as a=20
		 <code>duration</code> of 10, a <code>repeat</code> of 1 and a <code>repe=
atDelay</code> of 2,=20
		 the <code>totalDuration</code> would be 22.
		=20
		 </p><p>This method serves as both a getter and setter. Omitting the para=
meter returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var total =3D myTween.totalD=
uration(); //gets total duration
myTween.totalDuration(10); //sets the total duration
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining. Negative values will =
be interpreted from the <b>END</b> of the animation.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#duration()" target=3D"">duration()</a><br><a href=3D"https://=
greensock.com/asdocs/com/greensock/TweenMax.html#timeScale()" target=3D"">t=
imeScale()</a></div></div><a name=3D"totalProgress()"></a><a name=3D"totalP=
rogress(Number,Boolean)"></a><table class=3D"detailHeader" cellpadding=3D"0=
" cellspacing=3D"0"><tbody><tr><td class=3D"detailHeaderName">totalProgress=
</td><td class=3D"detailHeaderParens">()</td><td class=3D"detailHeaderType"=
>method</td><td class=3D"detailHeaderRule">&nbsp;</td></tr></tbody></table>=
<div class=3D"detailBody"><code>override public function totalProgress(valu=
e:Number, suppressEvents:Boolean =3D false):*</code><p></p><p></p><p>=20
		 Gets or sets the tween's totalProgress which is a value between 0 and 1 =
indicating the position=20
		 of the virtual playhead (including repeats) where 0 is at the beginning,=
 0.5 is halfway complete,=20
		 and 1 is complete. If the tween has a non-zero <code>repeat</code> defin=
ed, <code>progress</code>=20
		 and <code>totalProgress</code> will be different because <code>progress<=
/code> doesn't include=20
		 any repeats or repeatDelays whereas <code>totalProgress</code> does. For=
 example, if a TweenMax=20
		 instance is set to repeat once, at the end of the first cycle <code>tota=
lProgress</code> would=20
		 only be 0.5 whereas <code>progress</code> would be 1. If you watched bot=
h properties over the=20
		 course of the entire animation, you'd see <code>progress</code> go from =
0 to 1 twice (once for=20
		 each cycle) in the same time it takes the <code>totalProgress</code> to =
go from 0 to 1 once.
		=20
		 </p><p>This method serves as both a getter and setter. Omitting the para=
meter returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myTween.totalProgress(0.5).play()=
;</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var progress =3D myTween.tot=
alProgress(); //gets total progress
myTween.totalProgress( 0.25 ); //sets total progress to one quarter finishe=
d
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Number</code> (default =3D <cod=
e>NaN</code>)<code></code> =E2=80=94 Omitting the parameter returns the cur=
rent value (getter), whereas defining the parameter sets the value (setter)=
 and returns the instance itself for easier chaining.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">suppressEvents</span>:Boolean</=
code> (default =3D <code>false</code>)<code></code> =E2=80=94 If <code>true=
</code>, no events or callbacks will be triggered when the playhead moves t=
o the new position.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#progress()" target=3D"">progress()</a><br><a href=3D"https://=
greensock.com/asdocs/com/greensock/TweenMax.html#seek()" target=3D"">seek()=
</a><br><a href=3D"https://greensock.com/asdocs/com/greensock/TweenMax.html=
#time()" target=3D"">time()</a><br><a href=3D"https://greensock.com/asdocs/=
com/greensock/TweenMax.html#totalTime()" target=3D"">totalTime()</a></div><=
/div><a name=3D"updateTo()"></a><a name=3D"updateTo(Object,Boolean)"></a><t=
able class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D"0"><tbody><tr>=
<td class=3D"detailHeaderName">updateTo</td><td class=3D"detailHeaderParens=
">()</td><td class=3D"detailHeaderType">method</td><td class=3D"detailHeade=
rRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"><code> pub=
lic function updateTo(vars:Object, resetDuration:Boolean =3D false):*</code=
><p></p><p></p><p>
		 Updates tweening values on the fly so that they appear to seamlessly cha=
nge course even if=20
		 the tween is in-progress. Think of it like dynamically updating the <cod=
e>vars</code> object=20
		 that was passed in to the tween when it was originally created. You do <=
b>NOT</b>=20
		 need to redefine all of the <code>vars</code> properties/values - only t=
he ones that you want
		 to update. You can even define new properties that you didn't define in =
the original <code>vars</code>=20
		 object.
		=20
		 </p><p>If the <code>resetDuration</code> parameter is <code>true</code> =
and the tween has already=20
		 started (or finished), <code>updateTo()</code> will restart the tween. O=
therwise, the tween's=20
		 timing will be honored. And if <code>resetDuration</code> is <code>false=
</code> and the tween=20
		 is in-progress, the starting values of each property will be adjusted so=
 that the tween appears=20
		 to seamlessly redirect to the new destination values. This is typically =
not advisable if you
		 plan to reverse the tween later on or jump to a previous point because t=
he starting values would
		 have been adjusted.</p>
		=20
		 <p><code>updateTo()</code> is only meant for non-plugin values. It's muc=
h more complicated to=20
		 dynamically update values that are being handled inside plugins - that i=
s not what this method
		 is intended to do.</p>
		=20
		 <p>Note: If you plan to constantly update values, please look into using=
 the <code>DynamicPropsPlugin</code>.</p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>//create the tween
var tween:TweenMax =3D new TweenMax(mc, 2, {x:100, y:200, alpha:0.5});
//then later, update the destination x and y values, restarting the tween
tween.updateTo({x:300, y:0}, true);
//or to update the values mid-tween without restarting, do this:
tween.updateTo({x:300, y:0}, false);
</pre></div>
		=20
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">vars</span>:Object</code> =E2=80=94 Object c=
ontaining properties with the destination values that should be udpated. Yo=
u do <b>NOT</b> need to redefine all of the original <code>vars</code> valu=
es - only the ones that should be updated (although if you change a plugin =
value, you will need to fully define it). For example, to update the destin=
ation <code>x</code> value to 300 and the destination <code>y</code> value =
to 500, pass: <code>{x:300, y:500}</code>.
		 </td></tr><tr><td class=3D"paramSpacer">&nbsp;</td></tr><tr><td width=3D=
"20px"></td><td><code><span class=3D"label">resetDuration</span>:Boolean</c=
ode> (default =3D <code>false</code>)<code></code> =E2=80=94 If the tween h=
as already started (or finished) and <code>resetDuration</code> is <code>tr=
ue</code>, the tween will restart. If <code>resetDuration</code> is <code>f=
alse</code>, the tween's timing will be honored (no restart) and each tween=
ing property's starting value will be adjusted so that it appears to seamle=
ssly redirect to the new destination value.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 self (makes chaining easier)
		 </td></tr></tbody></table></div><a name=3D"yoyo()"></a><a name=3D"yoyo(B=
oolean)"></a><table class=3D"detailHeader" cellpadding=3D"0" cellspacing=3D=
"0"><tbody><tr><td class=3D"detailHeaderName">yoyo</td><td class=3D"detailH=
eaderParens">()</td><td class=3D"detailHeaderType">method</td><td class=3D"=
detailHeaderRule">&nbsp;</td></tr></tbody></table><div class=3D"detailBody"=
><code> public function yoyo(value:Boolean =3D false):*</code><p></p><p></p=
><p>
		 Gets or sets the tween's <code>yoyo</code> state, where <code>true</code=
> causes
		 the tween to go back and forth, alternating backward and forward on each=
=20
		 <code>repeat</code>. <code>yoyo</code> works in conjunction with <code>r=
epeat</code>,
		 where <code>repeat</code> controls how many times the tween repeats, and=
 <code>yoyo</code>
		 controls whether or not each repeat alternates direction. So in order to=
 make a tween yoyo,=20
		 you must set its <code>repeat</code> to a non-zero value.
		 Yoyo-ing, has no affect on the tween's "<code>reversed</code>" property.=
 For example,=20
		 if <code>repeat</code> is 2 and <code>yoyo</code> is <code>false</code>,=
 it will look like:=20
		 start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</code=
> is <code>true</code>,=20
		 it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.
		=20
		 </p><p>You can set the <code>yoyo</code> property initially by passing <=
code>yoyo:true</code>
		 in the <code>vars</code> parameter, like: <code>TweenMax.to(mc, 1, {x:10=
0, repeat:1, yoyo:true});</code></p>
		=20
		 <p>This method serves as both a getter and setter. Omitting the paramete=
r returns the current=20
		 value (getter), whereas defining the parameter sets the value (setter) a=
nd returns the instance=20
		 itself for easier chaining, like <code>myAnimation.yoyo(true).repeat(3).=
timeScale(2).play(0.5);</code></p>
		=20
		 <div class=3D"listing" version=3D"3.0"><pre>var yoyo =3D myAnimation.yoy=
o(); //gets current yoyo state
myAnimation.yoyo( true ); //sets yoyo to true
</pre></div>
		 <p></p><p><span class=3D"label"> Parameters </span></p><table cellpaddin=
g=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td width=3D"20px"></td><=
td><code><span class=3D"label">value</span>:Boolean</code> (default =3D <co=
de>false</code>)<code></code> =E2=80=94 Omitting the parameter returns the =
current value (getter), whereas defining the parameter sets the value (sett=
er) and returns the instance itself for easier chaining.
		 </td></tr></tbody></table><p></p><p></p><span class=3D"label">Returns</s=
pan><table cellpadding=3D"0" cellspacing=3D"0" border=3D"0"><tbody><tr><td =
width=3D"20"></td><td><code>*</code> =E2=80=94 Omitting the parameter retur=
ns the current value (getter), whereas defining the parameter sets the valu=
e (setter) and returns the instance itself for easier chaining.
		=20
		 </td></tr></tbody></table><p><span class=3D"label">See also</span></p><d=
iv class=3D"seeAlso"><a href=3D"https://greensock.com/asdocs/com/greensock/=
TweenMax.html#repeat()" target=3D"">repeat()</a><br><a href=3D"https://gree=
nsock.com/asdocs/com/greensock/TweenMax.html#repeatDelay()" target=3D"">rep=
eatDelay()</a></div></div><br><br><hr><br><p></p><center class=3D"copyright=
"><footer></footer><br>Thu Oct 24 2013, 01:43 PM -05:00  </center></div></b=
ody></html><!--<br/>Thu Oct 24 2013, 01:43 PM -05:00  -->
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/inherit-arrow.gif

R0lGODlhDwAJAKIAAEZGRjExMSUlJSEhIQAAAP///wAAAAAAACH5BAEHAAUALAAAAAAPAAkAAAMa
WLoM/I8ESAkZNFpsu/9TVnSCqFilOYaqsyQAOw==

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/expanded.gif

R0lGODlhCQAJAKIAAERERDMzMyIiIgAAAP///wAAAAAAAAAAACH5BAEHAAQALAAAAAAJAAkAAAMU
SLrcCyPKAUiYIywhReOeozlkmQAAOw==

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/collapsed.gif

R0lGODlhCQAJAKIAAERERDMzMyIiIgAAAP///wAAAAAAAAAAACH5BAEHAAQALAAAAAAJAAkAAAMU
SATaPcG9ISQZuDqM46RSZkHWYiUAOw==

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://greensock.com/asdocs/images/inheritedSummary.gif

R0lGODlhDgAOALMAAElJSYKCgpmZmWtra9jY2GZmZqSkpFNTU4+Pj8HBwXNzc+Xl5VtbW////wAA
AAAAACH5BAEHAA0ALAAAAAAOAA4AAAQ9sMlJKyWAWLrAAMvWLEOgFEVYLYpgFkzKBYnxMrjauIjy
HoOBwBJ4KUSN4ukoUhaYGyeUaERKkQrGwVOJAAA7

------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/html
Content-ID: <frame-D2E701FDCAF0C8C47A47EC9156DD1075@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/package-list.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><title>Package List - GreenSock Documentation</title><base target=
=3D"classFrame"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdo=
cs/style.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" h=
ref=3D"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"p=
rint"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/overrid=
e.css" type=3D"text/css"></head><body class=3D"classFrameContent vsc-initia=
lized"><h3><a href=3D"https://greensock.com/asdocs/package-summary.html" st=
yle=3D"color:black">Packages</a></h3><table cellpadding=3D"0" cellspacing=
=3D"0"><tbody><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock=
/package-detail.html">com.greensock</a></td></tr><tr><td><a href=3D"https:/=
/greensock.com/asdocs/com/greensock/core/package-detail.html">com.greensock=
.core</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/gree=
nsock/data/package-detail.html">com.greensock.data</a></td></tr><tr><td><a =
href=3D"https://greensock.com/asdocs/com/greensock/easing/package-detail.ht=
ml">com.greensock.easing</a></td></tr><tr><td><a href=3D"https://greensock.=
com/asdocs/com/greensock/events/package-detail.html">com.greensock.events</=
a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/l=
ayout/package-detail.html">com.greensock.layout</a></td></tr><tr><td><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/loading/package-detail.html=
">com.greensock.loading</a></td></tr><tr><td><a href=3D"https://greensock.c=
om/asdocs/com/greensock/loading/core/package-detail.html">com.greensock.loa=
ding.core</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/=
greensock/loading/data/package-detail.html">com.greensock.loading.data</a><=
/td></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/load=
ing/display/package-detail.html">com.greensock.loading.display</a></td></tr=
><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/motionPaths/=
package-detail.html">com.greensock.motionPaths</a></td></tr><tr><td><a href=
=3D"https://greensock.com/asdocs/com/greensock/plugins/package-detail.html"=
>com.greensock.plugins</a></td></tr><tr><td><a href=3D"https://greensock.co=
m/asdocs/com/greensock/text/package-detail.html">com.greensock.text</a></td=
></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/utils/p=
ackage-detail.html">com.greensock.utils</a></td></tr></tbody></table></body=
></html><!--<br/>Thu Jul 4 2013, 12:48 AM -05:00  -->
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf----
Content-Type: text/html
Content-ID: <frame-2DB230D84C1A4EA07B8DF7B65FB1CBC6@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://greensock.com/asdocs/com/greensock/class-list.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.=
w3.org/TR/html4/loose.dtd"><!-- saved from url=3D(0014)about:internet --><h=
tml><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"><title>com.greensock - GreenSock Documentation</title><base targe=
t=3D"classFrame"><link rel=3D"stylesheet" href=3D"https://greensock.com/asd=
ocs/style.css" type=3D"text/css" media=3D"screen"><link rel=3D"stylesheet" =
href=3D"https://greensock.com/asdocs/print.css" type=3D"text/css" media=3D"=
print"><link rel=3D"stylesheet" href=3D"https://greensock.com/asdocs/overri=
de.css" type=3D"text/css"></head><body class=3D"classFrameContent vsc-initi=
alized"><h3><a href=3D"https://greensock.com/asdocs/com/greensock/package-d=
etail.html" target=3D"classFrame" style=3D"color:black">Package com.greenso=
ck</a></h3><table cellpadding=3D"0" cellspacing=3D"0"><tbody><tr><td><a hre=
f=3D"https://greensock.com/asdocs/com/greensock/package-detail.html#classSu=
mmary" style=3D"color:black"><b>Classes</b></a></td></tr><tr><td><a href=3D=
"https://greensock.com/asdocs/com/greensock/BlitMask.html">BlitMask</a></td=
></tr><tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/FlexBli=
tMask.html">FlexBlitMask</a></td></tr><tr><td><a href=3D"https://greensock.=
com/asdocs/com/greensock/TimelineLite.html">TimelineLite</a></td></tr><tr><=
td><a href=3D"https://greensock.com/asdocs/com/greensock/TimelineMax.html">=
TimelineMax</a></td></tr><tr><td><a href=3D"https://greensock.com/asdocs/co=
m/greensock/TweenLite.html">TweenLite</a></td></tr><tr><td><a href=3D"https=
://greensock.com/asdocs/com/greensock/TweenMax.html">TweenMax</a></td></tr>=
<tr><td><a href=3D"https://greensock.com/asdocs/com/greensock/TweenNano.htm=
l">TweenNano</a></td></tr></tbody></table></body></html><!--<br/>Thu Oct 24=
 2013, 01:43 PM -05:00  -->
------MultipartBoundary--sKoCXudUkQAsDWfv5oJUMrO6D1CnZ6NqJStk3l0xWf------
